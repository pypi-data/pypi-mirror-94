# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class IndicatorResponse(Model):
    """IndicatorResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param name: Required.
    :type name: str
    :param system_sort_order:
    :type system_sort_order: int
    :param indicator_type: If creating a new MetricTypeCode be sure to add a
     Validator attribute and update the following classes
     if necessary: DataValidator, DataValidatorFunctions, ValidatorAttributes
     files. Possible values include: 'Temperature', 'Pressure', 'Flow',
     'Humidity', 'Power', 'DifferentialPressure',
     'MultiSensorDifferentialPressure', 'Voltage', 'GeneralizedAtoD',
     'VibrationBandRms', 'VibrationBandMax', 'VibrationOverallPeak',
     'VibrationOverallRms', 'VibrationOverallSkewness',
     'VibrationOverallKurtosis', 'VibrationOverallCrestFactor',
     'DamageAccumulation', 'VibrationBandRmsAccel', 'VibrationBandMaxAccel',
     'VibrationOverallPeakAccel', 'VibrationOverallRmsAccel',
     'VibrationOverallSkewnessAccel', 'VibrationOverallKurtosisAccel',
     'VibrationOverallCrestFactorAccel', 'DamageAccumulationAccel', 'Group',
     'VibrationOverall', 'VibrationOverallAccel', 'GeneralTimeSeries', 'Math',
     'OnStatistics', 'OffStatistics', 'AlarmStatistics', 'WarningStatistics',
     'PositivePeakPressure', 'NegativePeakPressure', 'RmsPressure',
     'BandPressure', 'OnPercentStatistics', 'OffPercentStatistics',
     'AlarmPercentStatistics', 'WarningPercentStatistics', 'SignalStrength',
     'RunningSpeed', 'DamageAccumulationPressure', 'OilHumidity',
     'OilTemperature', 'DamageAccumulationAccelRaw', 'ThermalRegionOfInterest',
     'SmartMetric'
    :type indicator_type: str or ~smartdiagnostics_sdk.models.enum
    :param display_units:
    :type display_units: str
    :param base_units:
    :type base_units: str
    :param has_spectrum:
    :type has_spectrum: bool
    :param hierarchy:
    :type hierarchy: list[~smartdiagnostics_sdk.models.HierarchyChild]
    :param alarm_definition:
    :type alarm_definition: ~smartdiagnostics_sdk.models.AlarmDefinitionChild
    :param band_definition:
    :type band_definition: ~smartdiagnostics_sdk.models.BandDefinitionChild
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'system_sort_order': {'key': 'SystemSortOrder', 'type': 'int'},
        'indicator_type': {'key': 'IndicatorType', 'type': 'str'},
        'display_units': {'key': 'DisplayUnits', 'type': 'str'},
        'base_units': {'key': 'BaseUnits', 'type': 'str'},
        'has_spectrum': {'key': 'HasSpectrum', 'type': 'bool'},
        'hierarchy': {'key': 'Hierarchy', 'type': '[HierarchyChild]'},
        'alarm_definition': {'key': 'AlarmDefinition', 'type': 'AlarmDefinitionChild'},
        'band_definition': {'key': 'BandDefinition', 'type': 'BandDefinitionChild'},
    }

    def __init__(self, **kwargs):
        super(IndicatorResponse, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.system_sort_order = kwargs.get('system_sort_order', None)
        self.indicator_type = kwargs.get('indicator_type', None)
        self.display_units = kwargs.get('display_units', None)
        self.base_units = kwargs.get('base_units', None)
        self.has_spectrum = kwargs.get('has_spectrum', None)
        self.hierarchy = kwargs.get('hierarchy', None)
        self.alarm_definition = kwargs.get('alarm_definition', None)
        self.band_definition = kwargs.get('band_definition', None)
