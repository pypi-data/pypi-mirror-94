# coding: utf-8

"""
    Adobe Experience Manager (AEM) API

    Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API  # noqa: E501

    The version of the OpenAPI document: 3.5.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from swaggeraem.configuration import Configuration


class SamlConfigurationProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'SamlConfigurationPropertyItemsArray',
        'service_ranking': 'SamlConfigurationPropertyItemsLong',
        'idp_url': 'SamlConfigurationPropertyItemsString',
        'idp_cert_alias': 'SamlConfigurationPropertyItemsString',
        'idp_http_redirect': 'SamlConfigurationPropertyItemsBoolean',
        'service_provider_entity_id': 'SamlConfigurationPropertyItemsString',
        'assertion_consumer_service_url': 'SamlConfigurationPropertyItemsString',
        'sp_private_key_alias': 'SamlConfigurationPropertyItemsString',
        'key_store_password': 'SamlConfigurationPropertyItemsString',
        'default_redirect_url': 'SamlConfigurationPropertyItemsString',
        'user_id_attribute': 'SamlConfigurationPropertyItemsString',
        'use_encryption': 'SamlConfigurationPropertyItemsBoolean',
        'create_user': 'SamlConfigurationPropertyItemsBoolean',
        'add_group_memberships': 'SamlConfigurationPropertyItemsBoolean',
        'group_membership_attribute': 'SamlConfigurationPropertyItemsString',
        'default_groups': 'SamlConfigurationPropertyItemsArray',
        'name_id_format': 'SamlConfigurationPropertyItemsString',
        'synchronize_attributes': 'SamlConfigurationPropertyItemsArray',
        'handle_logout': 'SamlConfigurationPropertyItemsBoolean',
        'logout_url': 'SamlConfigurationPropertyItemsString',
        'clock_tolerance': 'SamlConfigurationPropertyItemsLong',
        'digest_method': 'SamlConfigurationPropertyItemsString',
        'signature_method': 'SamlConfigurationPropertyItemsString',
        'user_intermediate_path': 'SamlConfigurationPropertyItemsString'
    }

    attribute_map = {
        'path': 'path',
        'service_ranking': 'service.ranking',
        'idp_url': 'idpUrl',
        'idp_cert_alias': 'idpCertAlias',
        'idp_http_redirect': 'idpHttpRedirect',
        'service_provider_entity_id': 'serviceProviderEntityId',
        'assertion_consumer_service_url': 'assertionConsumerServiceURL',
        'sp_private_key_alias': 'spPrivateKeyAlias',
        'key_store_password': 'keyStorePassword',
        'default_redirect_url': 'defaultRedirectUrl',
        'user_id_attribute': 'userIDAttribute',
        'use_encryption': 'useEncryption',
        'create_user': 'createUser',
        'add_group_memberships': 'addGroupMemberships',
        'group_membership_attribute': 'groupMembershipAttribute',
        'default_groups': 'defaultGroups',
        'name_id_format': 'nameIdFormat',
        'synchronize_attributes': 'synchronizeAttributes',
        'handle_logout': 'handleLogout',
        'logout_url': 'logoutUrl',
        'clock_tolerance': 'clockTolerance',
        'digest_method': 'digestMethod',
        'signature_method': 'signatureMethod',
        'user_intermediate_path': 'userIntermediatePath'
    }

    def __init__(self, path=None, service_ranking=None, idp_url=None, idp_cert_alias=None, idp_http_redirect=None, service_provider_entity_id=None, assertion_consumer_service_url=None, sp_private_key_alias=None, key_store_password=None, default_redirect_url=None, user_id_attribute=None, use_encryption=None, create_user=None, add_group_memberships=None, group_membership_attribute=None, default_groups=None, name_id_format=None, synchronize_attributes=None, handle_logout=None, logout_url=None, clock_tolerance=None, digest_method=None, signature_method=None, user_intermediate_path=None, local_vars_configuration=None):  # noqa: E501
        """SamlConfigurationProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._path = None
        self._service_ranking = None
        self._idp_url = None
        self._idp_cert_alias = None
        self._idp_http_redirect = None
        self._service_provider_entity_id = None
        self._assertion_consumer_service_url = None
        self._sp_private_key_alias = None
        self._key_store_password = None
        self._default_redirect_url = None
        self._user_id_attribute = None
        self._use_encryption = None
        self._create_user = None
        self._add_group_memberships = None
        self._group_membership_attribute = None
        self._default_groups = None
        self._name_id_format = None
        self._synchronize_attributes = None
        self._handle_logout = None
        self._logout_url = None
        self._clock_tolerance = None
        self._digest_method = None
        self._signature_method = None
        self._user_intermediate_path = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if service_ranking is not None:
            self.service_ranking = service_ranking
        if idp_url is not None:
            self.idp_url = idp_url
        if idp_cert_alias is not None:
            self.idp_cert_alias = idp_cert_alias
        if idp_http_redirect is not None:
            self.idp_http_redirect = idp_http_redirect
        if service_provider_entity_id is not None:
            self.service_provider_entity_id = service_provider_entity_id
        if assertion_consumer_service_url is not None:
            self.assertion_consumer_service_url = assertion_consumer_service_url
        if sp_private_key_alias is not None:
            self.sp_private_key_alias = sp_private_key_alias
        if key_store_password is not None:
            self.key_store_password = key_store_password
        if default_redirect_url is not None:
            self.default_redirect_url = default_redirect_url
        if user_id_attribute is not None:
            self.user_id_attribute = user_id_attribute
        if use_encryption is not None:
            self.use_encryption = use_encryption
        if create_user is not None:
            self.create_user = create_user
        if add_group_memberships is not None:
            self.add_group_memberships = add_group_memberships
        if group_membership_attribute is not None:
            self.group_membership_attribute = group_membership_attribute
        if default_groups is not None:
            self.default_groups = default_groups
        if name_id_format is not None:
            self.name_id_format = name_id_format
        if synchronize_attributes is not None:
            self.synchronize_attributes = synchronize_attributes
        if handle_logout is not None:
            self.handle_logout = handle_logout
        if logout_url is not None:
            self.logout_url = logout_url
        if clock_tolerance is not None:
            self.clock_tolerance = clock_tolerance
        if digest_method is not None:
            self.digest_method = digest_method
        if signature_method is not None:
            self.signature_method = signature_method
        if user_intermediate_path is not None:
            self.user_intermediate_path = user_intermediate_path

    @property
    def path(self):
        """Gets the path of this SamlConfigurationProperties.  # noqa: E501


        :return: The path of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsArray
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SamlConfigurationProperties.


        :param path: The path of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsArray
        """

        self._path = path

    @property
    def service_ranking(self):
        """Gets the service_ranking of this SamlConfigurationProperties.  # noqa: E501


        :return: The service_ranking of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsLong
        """
        return self._service_ranking

    @service_ranking.setter
    def service_ranking(self, service_ranking):
        """Sets the service_ranking of this SamlConfigurationProperties.


        :param service_ranking: The service_ranking of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsLong
        """

        self._service_ranking = service_ranking

    @property
    def idp_url(self):
        """Gets the idp_url of this SamlConfigurationProperties.  # noqa: E501


        :return: The idp_url of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._idp_url

    @idp_url.setter
    def idp_url(self, idp_url):
        """Sets the idp_url of this SamlConfigurationProperties.


        :param idp_url: The idp_url of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._idp_url = idp_url

    @property
    def idp_cert_alias(self):
        """Gets the idp_cert_alias of this SamlConfigurationProperties.  # noqa: E501


        :return: The idp_cert_alias of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._idp_cert_alias

    @idp_cert_alias.setter
    def idp_cert_alias(self, idp_cert_alias):
        """Sets the idp_cert_alias of this SamlConfigurationProperties.


        :param idp_cert_alias: The idp_cert_alias of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._idp_cert_alias = idp_cert_alias

    @property
    def idp_http_redirect(self):
        """Gets the idp_http_redirect of this SamlConfigurationProperties.  # noqa: E501


        :return: The idp_http_redirect of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsBoolean
        """
        return self._idp_http_redirect

    @idp_http_redirect.setter
    def idp_http_redirect(self, idp_http_redirect):
        """Sets the idp_http_redirect of this SamlConfigurationProperties.


        :param idp_http_redirect: The idp_http_redirect of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsBoolean
        """

        self._idp_http_redirect = idp_http_redirect

    @property
    def service_provider_entity_id(self):
        """Gets the service_provider_entity_id of this SamlConfigurationProperties.  # noqa: E501


        :return: The service_provider_entity_id of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._service_provider_entity_id

    @service_provider_entity_id.setter
    def service_provider_entity_id(self, service_provider_entity_id):
        """Sets the service_provider_entity_id of this SamlConfigurationProperties.


        :param service_provider_entity_id: The service_provider_entity_id of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._service_provider_entity_id = service_provider_entity_id

    @property
    def assertion_consumer_service_url(self):
        """Gets the assertion_consumer_service_url of this SamlConfigurationProperties.  # noqa: E501


        :return: The assertion_consumer_service_url of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._assertion_consumer_service_url

    @assertion_consumer_service_url.setter
    def assertion_consumer_service_url(self, assertion_consumer_service_url):
        """Sets the assertion_consumer_service_url of this SamlConfigurationProperties.


        :param assertion_consumer_service_url: The assertion_consumer_service_url of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._assertion_consumer_service_url = assertion_consumer_service_url

    @property
    def sp_private_key_alias(self):
        """Gets the sp_private_key_alias of this SamlConfigurationProperties.  # noqa: E501


        :return: The sp_private_key_alias of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._sp_private_key_alias

    @sp_private_key_alias.setter
    def sp_private_key_alias(self, sp_private_key_alias):
        """Sets the sp_private_key_alias of this SamlConfigurationProperties.


        :param sp_private_key_alias: The sp_private_key_alias of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._sp_private_key_alias = sp_private_key_alias

    @property
    def key_store_password(self):
        """Gets the key_store_password of this SamlConfigurationProperties.  # noqa: E501


        :return: The key_store_password of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._key_store_password

    @key_store_password.setter
    def key_store_password(self, key_store_password):
        """Sets the key_store_password of this SamlConfigurationProperties.


        :param key_store_password: The key_store_password of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._key_store_password = key_store_password

    @property
    def default_redirect_url(self):
        """Gets the default_redirect_url of this SamlConfigurationProperties.  # noqa: E501


        :return: The default_redirect_url of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._default_redirect_url

    @default_redirect_url.setter
    def default_redirect_url(self, default_redirect_url):
        """Sets the default_redirect_url of this SamlConfigurationProperties.


        :param default_redirect_url: The default_redirect_url of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._default_redirect_url = default_redirect_url

    @property
    def user_id_attribute(self):
        """Gets the user_id_attribute of this SamlConfigurationProperties.  # noqa: E501


        :return: The user_id_attribute of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._user_id_attribute

    @user_id_attribute.setter
    def user_id_attribute(self, user_id_attribute):
        """Sets the user_id_attribute of this SamlConfigurationProperties.


        :param user_id_attribute: The user_id_attribute of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._user_id_attribute = user_id_attribute

    @property
    def use_encryption(self):
        """Gets the use_encryption of this SamlConfigurationProperties.  # noqa: E501


        :return: The use_encryption of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsBoolean
        """
        return self._use_encryption

    @use_encryption.setter
    def use_encryption(self, use_encryption):
        """Sets the use_encryption of this SamlConfigurationProperties.


        :param use_encryption: The use_encryption of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsBoolean
        """

        self._use_encryption = use_encryption

    @property
    def create_user(self):
        """Gets the create_user of this SamlConfigurationProperties.  # noqa: E501


        :return: The create_user of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsBoolean
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this SamlConfigurationProperties.


        :param create_user: The create_user of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsBoolean
        """

        self._create_user = create_user

    @property
    def add_group_memberships(self):
        """Gets the add_group_memberships of this SamlConfigurationProperties.  # noqa: E501


        :return: The add_group_memberships of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsBoolean
        """
        return self._add_group_memberships

    @add_group_memberships.setter
    def add_group_memberships(self, add_group_memberships):
        """Sets the add_group_memberships of this SamlConfigurationProperties.


        :param add_group_memberships: The add_group_memberships of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsBoolean
        """

        self._add_group_memberships = add_group_memberships

    @property
    def group_membership_attribute(self):
        """Gets the group_membership_attribute of this SamlConfigurationProperties.  # noqa: E501


        :return: The group_membership_attribute of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._group_membership_attribute

    @group_membership_attribute.setter
    def group_membership_attribute(self, group_membership_attribute):
        """Sets the group_membership_attribute of this SamlConfigurationProperties.


        :param group_membership_attribute: The group_membership_attribute of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._group_membership_attribute = group_membership_attribute

    @property
    def default_groups(self):
        """Gets the default_groups of this SamlConfigurationProperties.  # noqa: E501


        :return: The default_groups of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsArray
        """
        return self._default_groups

    @default_groups.setter
    def default_groups(self, default_groups):
        """Sets the default_groups of this SamlConfigurationProperties.


        :param default_groups: The default_groups of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsArray
        """

        self._default_groups = default_groups

    @property
    def name_id_format(self):
        """Gets the name_id_format of this SamlConfigurationProperties.  # noqa: E501


        :return: The name_id_format of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._name_id_format

    @name_id_format.setter
    def name_id_format(self, name_id_format):
        """Sets the name_id_format of this SamlConfigurationProperties.


        :param name_id_format: The name_id_format of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._name_id_format = name_id_format

    @property
    def synchronize_attributes(self):
        """Gets the synchronize_attributes of this SamlConfigurationProperties.  # noqa: E501


        :return: The synchronize_attributes of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsArray
        """
        return self._synchronize_attributes

    @synchronize_attributes.setter
    def synchronize_attributes(self, synchronize_attributes):
        """Sets the synchronize_attributes of this SamlConfigurationProperties.


        :param synchronize_attributes: The synchronize_attributes of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsArray
        """

        self._synchronize_attributes = synchronize_attributes

    @property
    def handle_logout(self):
        """Gets the handle_logout of this SamlConfigurationProperties.  # noqa: E501


        :return: The handle_logout of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsBoolean
        """
        return self._handle_logout

    @handle_logout.setter
    def handle_logout(self, handle_logout):
        """Sets the handle_logout of this SamlConfigurationProperties.


        :param handle_logout: The handle_logout of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsBoolean
        """

        self._handle_logout = handle_logout

    @property
    def logout_url(self):
        """Gets the logout_url of this SamlConfigurationProperties.  # noqa: E501


        :return: The logout_url of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this SamlConfigurationProperties.


        :param logout_url: The logout_url of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._logout_url = logout_url

    @property
    def clock_tolerance(self):
        """Gets the clock_tolerance of this SamlConfigurationProperties.  # noqa: E501


        :return: The clock_tolerance of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsLong
        """
        return self._clock_tolerance

    @clock_tolerance.setter
    def clock_tolerance(self, clock_tolerance):
        """Sets the clock_tolerance of this SamlConfigurationProperties.


        :param clock_tolerance: The clock_tolerance of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsLong
        """

        self._clock_tolerance = clock_tolerance

    @property
    def digest_method(self):
        """Gets the digest_method of this SamlConfigurationProperties.  # noqa: E501


        :return: The digest_method of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._digest_method

    @digest_method.setter
    def digest_method(self, digest_method):
        """Sets the digest_method of this SamlConfigurationProperties.


        :param digest_method: The digest_method of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._digest_method = digest_method

    @property
    def signature_method(self):
        """Gets the signature_method of this SamlConfigurationProperties.  # noqa: E501


        :return: The signature_method of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._signature_method

    @signature_method.setter
    def signature_method(self, signature_method):
        """Sets the signature_method of this SamlConfigurationProperties.


        :param signature_method: The signature_method of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._signature_method = signature_method

    @property
    def user_intermediate_path(self):
        """Gets the user_intermediate_path of this SamlConfigurationProperties.  # noqa: E501


        :return: The user_intermediate_path of this SamlConfigurationProperties.  # noqa: E501
        :rtype: SamlConfigurationPropertyItemsString
        """
        return self._user_intermediate_path

    @user_intermediate_path.setter
    def user_intermediate_path(self, user_intermediate_path):
        """Sets the user_intermediate_path of this SamlConfigurationProperties.


        :param user_intermediate_path: The user_intermediate_path of this SamlConfigurationProperties.  # noqa: E501
        :type: SamlConfigurationPropertyItemsString
        """

        self._user_intermediate_path = user_intermediate_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlConfigurationProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SamlConfigurationProperties):
            return True

        return self.to_dict() != other.to_dict()
