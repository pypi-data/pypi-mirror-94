"""
    Adobe Experience Manager (AEM) API

    Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API  # noqa: E501

    The version of the OpenAPI document: 3.5.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from swaggeraem.api_client import ApiClient, Endpoint
from swaggeraem.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from swaggeraem.model.keystore_info import KeystoreInfo
from swaggeraem.model.truststore_info import TruststoreInfo


class SlingApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __delete_agent(
            self,
            runmode,
            name,
            **kwargs
        ):
            """delete_agent  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_agent(runmode, name, async_req=True)
            >>> result = thread.get()

            Args:
                runmode (str):
                name (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['runmode'] = \
                runmode
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.delete_agent = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/replication/agents.{runmode}/{name}',
                'operation_id': 'delete_agent',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'runmode',
                    'name',
                ],
                'required': [
                    'runmode',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'runmode':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'runmode': 'runmode',
                    'name': 'name',
                },
                'location_map': {
                    'runmode': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_agent
        )

        def __delete_node(
            self,
            path,
            name,
            **kwargs
        ):
            """delete_node  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_node(path, name, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):
                name (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['path'] = \
                path
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.delete_node = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/{path}/{name}',
                'operation_id': 'delete_node',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                    'name',
                ],
                'required': [
                    'path',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                    'name': 'name',
                },
                'location_map': {
                    'path': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_node
        )

        def __get_agent(
            self,
            runmode,
            name,
            **kwargs
        ):
            """get_agent  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_agent(runmode, name, async_req=True)
            >>> result = thread.get()

            Args:
                runmode (str):
                name (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['runmode'] = \
                runmode
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_agent = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/replication/agents.{runmode}/{name}',
                'operation_id': 'get_agent',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'runmode',
                    'name',
                ],
                'required': [
                    'runmode',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'runmode':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'runmode': 'runmode',
                    'name': 'name',
                },
                'location_map': {
                    'runmode': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_agent
        )

        def __get_agents(
            self,
            runmode,
            **kwargs
        ):
            """get_agents  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_agents(runmode, async_req=True)
            >>> result = thread.get()

            Args:
                runmode (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['runmode'] = \
                runmode
            return self.call_with_http_info(**kwargs)

        self.get_agents = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/replication/agents.{runmode}.-1.json',
                'operation_id': 'get_agents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'runmode',
                ],
                'required': [
                    'runmode',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'runmode':
                        (str,),
                },
                'attribute_map': {
                    'runmode': 'runmode',
                },
                'location_map': {
                    'runmode': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_agents
        )

        def __get_authorizable_keystore(
            self,
            intermediate_path,
            authorizable_id,
            **kwargs
        ):
            """get_authorizable_keystore  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_authorizable_keystore(intermediate_path, authorizable_id, async_req=True)
            >>> result = thread.get()

            Args:
                intermediate_path (str):
                authorizable_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                KeystoreInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['intermediate_path'] = \
                intermediate_path
            kwargs['authorizable_id'] = \
                authorizable_id
            return self.call_with_http_info(**kwargs)

        self.get_authorizable_keystore = Endpoint(
            settings={
                'response_type': (KeystoreInfo,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/{intermediatePath}/{authorizableId}.ks.json',
                'operation_id': 'get_authorizable_keystore',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'intermediate_path',
                    'authorizable_id',
                ],
                'required': [
                    'intermediate_path',
                    'authorizable_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'intermediate_path':
                        (str,),
                    'authorizable_id':
                        (str,),
                },
                'attribute_map': {
                    'intermediate_path': 'intermediatePath',
                    'authorizable_id': 'authorizableId',
                },
                'location_map': {
                    'intermediate_path': 'path',
                    'authorizable_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_authorizable_keystore
        )

        def __get_keystore(
            self,
            intermediate_path,
            authorizable_id,
            **kwargs
        ):
            """get_keystore  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_keystore(intermediate_path, authorizable_id, async_req=True)
            >>> result = thread.get()

            Args:
                intermediate_path (str):
                authorizable_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['intermediate_path'] = \
                intermediate_path
            kwargs['authorizable_id'] = \
                authorizable_id
            return self.call_with_http_info(**kwargs)

        self.get_keystore = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/{intermediatePath}/{authorizableId}/keystore/store.p12',
                'operation_id': 'get_keystore',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'intermediate_path',
                    'authorizable_id',
                ],
                'required': [
                    'intermediate_path',
                    'authorizable_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'intermediate_path':
                        (str,),
                    'authorizable_id':
                        (str,),
                },
                'attribute_map': {
                    'intermediate_path': 'intermediatePath',
                    'authorizable_id': 'authorizableId',
                },
                'location_map': {
                    'intermediate_path': 'path',
                    'authorizable_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_keystore
        )

        def __get_node(
            self,
            path,
            name,
            **kwargs
        ):
            """get_node  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_node(path, name, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):
                name (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['path'] = \
                path
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_node = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/{path}/{name}',
                'operation_id': 'get_node',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                    'name',
                ],
                'required': [
                    'path',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                    'name': 'name',
                },
                'location_map': {
                    'path': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_node
        )

        def __get_package(
            self,
            group,
            name,
            version,
            **kwargs
        ):
            """get_package  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_package(group, name, version, async_req=True)
            >>> result = thread.get()

            Args:
                group (str):
                name (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['name'] = \
                name
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_package = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/packages/{group}/{name}-{version}.zip',
                'operation_id': 'get_package',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'name',
                    'version',
                ],
                'required': [
                    'group',
                    'name',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'name': 'name',
                    'version': 'version',
                },
                'location_map': {
                    'group': 'path',
                    'name': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_package
        )

        def __get_package_filter(
            self,
            group,
            name,
            version,
            **kwargs
        ):
            """get_package_filter  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_package_filter(group, name, version, async_req=True)
            >>> result = thread.get()

            Args:
                group (str):
                name (str):
                version (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['name'] = \
                name
            kwargs['version'] = \
                version
            return self.call_with_http_info(**kwargs)

        self.get_package_filter = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json',
                'operation_id': 'get_package_filter',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'name',
                    'version',
                ],
                'required': [
                    'group',
                    'name',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'name': 'name',
                    'version': 'version',
                },
                'location_map': {
                    'group': 'path',
                    'name': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_package_filter
        )

        def __get_query(
            self,
            path,
            p_limit,
            _1_property,
            _1_property_value,
            **kwargs
        ):
            """get_query  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_query(path, p_limit, _1_property, _1_property_value, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):
                p_limit (float):
                _1_property (str):
                _1_property_value (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['path'] = \
                path
            kwargs['p_limit'] = \
                p_limit
            kwargs['_1_property'] = \
                _1_property
            kwargs['_1_property_value'] = \
                _1_property_value
            return self.call_with_http_info(**kwargs)

        self.get_query = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/bin/querybuilder.json',
                'operation_id': 'get_query',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                    'p_limit',
                    '_1_property',
                    '_1_property_value',
                ],
                'required': [
                    'path',
                    'p_limit',
                    '_1_property',
                    '_1_property_value',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                    'p_limit':
                        (float,),
                    '_1_property':
                        (str,),
                    '_1_property_value':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                    'p_limit': 'p.limit',
                    '_1_property': '1_property',
                    '_1_property_value': '1_property.value',
                },
                'location_map': {
                    'path': 'query',
                    'p_limit': 'query',
                    '_1_property': 'query',
                    '_1_property_value': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_query
        )

        def __get_truststore(
            self,
            **kwargs
        ):
            """get_truststore  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_truststore(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_truststore = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/truststore/truststore.p12',
                'operation_id': 'get_truststore',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_truststore
        )

        def __get_truststore_info(
            self,
            **kwargs
        ):
            """get_truststore_info  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_truststore_info(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TruststoreInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_truststore_info = Endpoint(
            settings={
                'response_type': (TruststoreInfo,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/libs/granite/security/truststore.json',
                'operation_id': 'get_truststore_info',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_truststore_info
        )

        def __post_agent(
            self,
            runmode,
            name,
            **kwargs
        ):
            """post_agent  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_agent(runmode, name, async_req=True)
            >>> result = thread.get()

            Args:
                runmode (str):
                name (str):

            Keyword Args:
                jcrcontent_cqdistribute (bool): [optional]
                jcrcontent_cqdistribute_type_hint (str): [optional]
                jcrcontent_cqname (str): [optional]
                jcrcontent_cqtemplate (str): [optional]
                jcrcontent_enabled (bool): [optional]
                jcrcontent_jcrdescription (str): [optional]
                jcrcontent_jcrlast_modified (str): [optional]
                jcrcontent_jcrlast_modified_by (str): [optional]
                jcrcontent_jcrmixin_types (str): [optional]
                jcrcontent_jcrtitle (str): [optional]
                jcrcontent_log_level (str): [optional]
                jcrcontent_no_status_update (bool): [optional]
                jcrcontent_no_versioning (bool): [optional]
                jcrcontent_protocol_connect_timeout (float): [optional]
                jcrcontent_protocol_http_connection_closed (bool): [optional]
                jcrcontent_protocol_http_expired (str): [optional]
                jcrcontent_protocol_http_headers ([str]): [optional]
                jcrcontent_protocol_http_headers_type_hint (str): [optional]
                jcrcontent_protocol_http_method (str): [optional]
                jcrcontent_protocol_https_relaxed (bool): [optional]
                jcrcontent_protocol_interface (str): [optional]
                jcrcontent_protocol_socket_timeout (float): [optional]
                jcrcontent_protocol_version (str): [optional]
                jcrcontent_proxy_ntlm_domain (str): [optional]
                jcrcontent_proxy_ntlm_host (str): [optional]
                jcrcontent_proxy_host (str): [optional]
                jcrcontent_proxy_password (str): [optional]
                jcrcontent_proxy_port (float): [optional]
                jcrcontent_proxy_user (str): [optional]
                jcrcontent_queue_batch_max_size (float): [optional]
                jcrcontent_queue_batch_mode (str): [optional]
                jcrcontent_queue_batch_wait_time (float): [optional]
                jcrcontent_retry_delay (str): [optional]
                jcrcontent_reverse_replication (bool): [optional]
                jcrcontent_serialization_type (str): [optional]
                jcrcontent_slingresource_type (str): [optional]
                jcrcontent_ssl (str): [optional]
                jcrcontent_transport_ntlm_domain (str): [optional]
                jcrcontent_transport_ntlm_host (str): [optional]
                jcrcontent_transport_password (str): [optional]
                jcrcontent_transport_uri (str): [optional]
                jcrcontent_transport_user (str): [optional]
                jcrcontent_trigger_distribute (bool): [optional]
                jcrcontent_trigger_modified (bool): [optional]
                jcrcontent_trigger_on_off_time (bool): [optional]
                jcrcontent_trigger_receive (bool): [optional]
                jcrcontent_trigger_specific (bool): [optional]
                jcrcontent_user_id (str): [optional]
                jcrprimary_type (str): [optional]
                operation (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['runmode'] = \
                runmode
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.post_agent = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/replication/agents.{runmode}/{name}',
                'operation_id': 'post_agent',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'runmode',
                    'name',
                    'jcrcontent_cqdistribute',
                    'jcrcontent_cqdistribute_type_hint',
                    'jcrcontent_cqname',
                    'jcrcontent_cqtemplate',
                    'jcrcontent_enabled',
                    'jcrcontent_jcrdescription',
                    'jcrcontent_jcrlast_modified',
                    'jcrcontent_jcrlast_modified_by',
                    'jcrcontent_jcrmixin_types',
                    'jcrcontent_jcrtitle',
                    'jcrcontent_log_level',
                    'jcrcontent_no_status_update',
                    'jcrcontent_no_versioning',
                    'jcrcontent_protocol_connect_timeout',
                    'jcrcontent_protocol_http_connection_closed',
                    'jcrcontent_protocol_http_expired',
                    'jcrcontent_protocol_http_headers',
                    'jcrcontent_protocol_http_headers_type_hint',
                    'jcrcontent_protocol_http_method',
                    'jcrcontent_protocol_https_relaxed',
                    'jcrcontent_protocol_interface',
                    'jcrcontent_protocol_socket_timeout',
                    'jcrcontent_protocol_version',
                    'jcrcontent_proxy_ntlm_domain',
                    'jcrcontent_proxy_ntlm_host',
                    'jcrcontent_proxy_host',
                    'jcrcontent_proxy_password',
                    'jcrcontent_proxy_port',
                    'jcrcontent_proxy_user',
                    'jcrcontent_queue_batch_max_size',
                    'jcrcontent_queue_batch_mode',
                    'jcrcontent_queue_batch_wait_time',
                    'jcrcontent_retry_delay',
                    'jcrcontent_reverse_replication',
                    'jcrcontent_serialization_type',
                    'jcrcontent_slingresource_type',
                    'jcrcontent_ssl',
                    'jcrcontent_transport_ntlm_domain',
                    'jcrcontent_transport_ntlm_host',
                    'jcrcontent_transport_password',
                    'jcrcontent_transport_uri',
                    'jcrcontent_transport_user',
                    'jcrcontent_trigger_distribute',
                    'jcrcontent_trigger_modified',
                    'jcrcontent_trigger_on_off_time',
                    'jcrcontent_trigger_receive',
                    'jcrcontent_trigger_specific',
                    'jcrcontent_user_id',
                    'jcrprimary_type',
                    'operation',
                ],
                'required': [
                    'runmode',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'runmode':
                        (str,),
                    'name':
                        (str,),
                    'jcrcontent_cqdistribute':
                        (bool,),
                    'jcrcontent_cqdistribute_type_hint':
                        (str,),
                    'jcrcontent_cqname':
                        (str,),
                    'jcrcontent_cqtemplate':
                        (str,),
                    'jcrcontent_enabled':
                        (bool,),
                    'jcrcontent_jcrdescription':
                        (str,),
                    'jcrcontent_jcrlast_modified':
                        (str,),
                    'jcrcontent_jcrlast_modified_by':
                        (str,),
                    'jcrcontent_jcrmixin_types':
                        (str,),
                    'jcrcontent_jcrtitle':
                        (str,),
                    'jcrcontent_log_level':
                        (str,),
                    'jcrcontent_no_status_update':
                        (bool,),
                    'jcrcontent_no_versioning':
                        (bool,),
                    'jcrcontent_protocol_connect_timeout':
                        (float,),
                    'jcrcontent_protocol_http_connection_closed':
                        (bool,),
                    'jcrcontent_protocol_http_expired':
                        (str,),
                    'jcrcontent_protocol_http_headers':
                        ([str],),
                    'jcrcontent_protocol_http_headers_type_hint':
                        (str,),
                    'jcrcontent_protocol_http_method':
                        (str,),
                    'jcrcontent_protocol_https_relaxed':
                        (bool,),
                    'jcrcontent_protocol_interface':
                        (str,),
                    'jcrcontent_protocol_socket_timeout':
                        (float,),
                    'jcrcontent_protocol_version':
                        (str,),
                    'jcrcontent_proxy_ntlm_domain':
                        (str,),
                    'jcrcontent_proxy_ntlm_host':
                        (str,),
                    'jcrcontent_proxy_host':
                        (str,),
                    'jcrcontent_proxy_password':
                        (str,),
                    'jcrcontent_proxy_port':
                        (float,),
                    'jcrcontent_proxy_user':
                        (str,),
                    'jcrcontent_queue_batch_max_size':
                        (float,),
                    'jcrcontent_queue_batch_mode':
                        (str,),
                    'jcrcontent_queue_batch_wait_time':
                        (float,),
                    'jcrcontent_retry_delay':
                        (str,),
                    'jcrcontent_reverse_replication':
                        (bool,),
                    'jcrcontent_serialization_type':
                        (str,),
                    'jcrcontent_slingresource_type':
                        (str,),
                    'jcrcontent_ssl':
                        (str,),
                    'jcrcontent_transport_ntlm_domain':
                        (str,),
                    'jcrcontent_transport_ntlm_host':
                        (str,),
                    'jcrcontent_transport_password':
                        (str,),
                    'jcrcontent_transport_uri':
                        (str,),
                    'jcrcontent_transport_user':
                        (str,),
                    'jcrcontent_trigger_distribute':
                        (bool,),
                    'jcrcontent_trigger_modified':
                        (bool,),
                    'jcrcontent_trigger_on_off_time':
                        (bool,),
                    'jcrcontent_trigger_receive':
                        (bool,),
                    'jcrcontent_trigger_specific':
                        (bool,),
                    'jcrcontent_user_id':
                        (str,),
                    'jcrprimary_type':
                        (str,),
                    'operation':
                        (str,),
                },
                'attribute_map': {
                    'runmode': 'runmode',
                    'name': 'name',
                    'jcrcontent_cqdistribute': 'jcr:content/cq:distribute',
                    'jcrcontent_cqdistribute_type_hint': 'jcr:content/cq:distribute@TypeHint',
                    'jcrcontent_cqname': 'jcr:content/cq:name',
                    'jcrcontent_cqtemplate': 'jcr:content/cq:template',
                    'jcrcontent_enabled': 'jcr:content/enabled',
                    'jcrcontent_jcrdescription': 'jcr:content/jcr:description',
                    'jcrcontent_jcrlast_modified': 'jcr:content/jcr:lastModified',
                    'jcrcontent_jcrlast_modified_by': 'jcr:content/jcr:lastModifiedBy',
                    'jcrcontent_jcrmixin_types': 'jcr:content/jcr:mixinTypes',
                    'jcrcontent_jcrtitle': 'jcr:content/jcr:title',
                    'jcrcontent_log_level': 'jcr:content/logLevel',
                    'jcrcontent_no_status_update': 'jcr:content/noStatusUpdate',
                    'jcrcontent_no_versioning': 'jcr:content/noVersioning',
                    'jcrcontent_protocol_connect_timeout': 'jcr:content/protocolConnectTimeout',
                    'jcrcontent_protocol_http_connection_closed': 'jcr:content/protocolHTTPConnectionClosed',
                    'jcrcontent_protocol_http_expired': 'jcr:content/protocolHTTPExpired',
                    'jcrcontent_protocol_http_headers': 'jcr:content/protocolHTTPHeaders',
                    'jcrcontent_protocol_http_headers_type_hint': 'jcr:content/protocolHTTPHeaders@TypeHint',
                    'jcrcontent_protocol_http_method': 'jcr:content/protocolHTTPMethod',
                    'jcrcontent_protocol_https_relaxed': 'jcr:content/protocolHTTPSRelaxed',
                    'jcrcontent_protocol_interface': 'jcr:content/protocolInterface',
                    'jcrcontent_protocol_socket_timeout': 'jcr:content/protocolSocketTimeout',
                    'jcrcontent_protocol_version': 'jcr:content/protocolVersion',
                    'jcrcontent_proxy_ntlm_domain': 'jcr:content/proxyNTLMDomain',
                    'jcrcontent_proxy_ntlm_host': 'jcr:content/proxyNTLMHost',
                    'jcrcontent_proxy_host': 'jcr:content/proxyHost',
                    'jcrcontent_proxy_password': 'jcr:content/proxyPassword',
                    'jcrcontent_proxy_port': 'jcr:content/proxyPort',
                    'jcrcontent_proxy_user': 'jcr:content/proxyUser',
                    'jcrcontent_queue_batch_max_size': 'jcr:content/queueBatchMaxSize',
                    'jcrcontent_queue_batch_mode': 'jcr:content/queueBatchMode',
                    'jcrcontent_queue_batch_wait_time': 'jcr:content/queueBatchWaitTime',
                    'jcrcontent_retry_delay': 'jcr:content/retryDelay',
                    'jcrcontent_reverse_replication': 'jcr:content/reverseReplication',
                    'jcrcontent_serialization_type': 'jcr:content/serializationType',
                    'jcrcontent_slingresource_type': 'jcr:content/sling:resourceType',
                    'jcrcontent_ssl': 'jcr:content/ssl',
                    'jcrcontent_transport_ntlm_domain': 'jcr:content/transportNTLMDomain',
                    'jcrcontent_transport_ntlm_host': 'jcr:content/transportNTLMHost',
                    'jcrcontent_transport_password': 'jcr:content/transportPassword',
                    'jcrcontent_transport_uri': 'jcr:content/transportUri',
                    'jcrcontent_transport_user': 'jcr:content/transportUser',
                    'jcrcontent_trigger_distribute': 'jcr:content/triggerDistribute',
                    'jcrcontent_trigger_modified': 'jcr:content/triggerModified',
                    'jcrcontent_trigger_on_off_time': 'jcr:content/triggerOnOffTime',
                    'jcrcontent_trigger_receive': 'jcr:content/triggerReceive',
                    'jcrcontent_trigger_specific': 'jcr:content/triggerSpecific',
                    'jcrcontent_user_id': 'jcr:content/userId',
                    'jcrprimary_type': 'jcr:primaryType',
                    'operation': ':operation',
                },
                'location_map': {
                    'runmode': 'path',
                    'name': 'path',
                    'jcrcontent_cqdistribute': 'query',
                    'jcrcontent_cqdistribute_type_hint': 'query',
                    'jcrcontent_cqname': 'query',
                    'jcrcontent_cqtemplate': 'query',
                    'jcrcontent_enabled': 'query',
                    'jcrcontent_jcrdescription': 'query',
                    'jcrcontent_jcrlast_modified': 'query',
                    'jcrcontent_jcrlast_modified_by': 'query',
                    'jcrcontent_jcrmixin_types': 'query',
                    'jcrcontent_jcrtitle': 'query',
                    'jcrcontent_log_level': 'query',
                    'jcrcontent_no_status_update': 'query',
                    'jcrcontent_no_versioning': 'query',
                    'jcrcontent_protocol_connect_timeout': 'query',
                    'jcrcontent_protocol_http_connection_closed': 'query',
                    'jcrcontent_protocol_http_expired': 'query',
                    'jcrcontent_protocol_http_headers': 'query',
                    'jcrcontent_protocol_http_headers_type_hint': 'query',
                    'jcrcontent_protocol_http_method': 'query',
                    'jcrcontent_protocol_https_relaxed': 'query',
                    'jcrcontent_protocol_interface': 'query',
                    'jcrcontent_protocol_socket_timeout': 'query',
                    'jcrcontent_protocol_version': 'query',
                    'jcrcontent_proxy_ntlm_domain': 'query',
                    'jcrcontent_proxy_ntlm_host': 'query',
                    'jcrcontent_proxy_host': 'query',
                    'jcrcontent_proxy_password': 'query',
                    'jcrcontent_proxy_port': 'query',
                    'jcrcontent_proxy_user': 'query',
                    'jcrcontent_queue_batch_max_size': 'query',
                    'jcrcontent_queue_batch_mode': 'query',
                    'jcrcontent_queue_batch_wait_time': 'query',
                    'jcrcontent_retry_delay': 'query',
                    'jcrcontent_reverse_replication': 'query',
                    'jcrcontent_serialization_type': 'query',
                    'jcrcontent_slingresource_type': 'query',
                    'jcrcontent_ssl': 'query',
                    'jcrcontent_transport_ntlm_domain': 'query',
                    'jcrcontent_transport_ntlm_host': 'query',
                    'jcrcontent_transport_password': 'query',
                    'jcrcontent_transport_uri': 'query',
                    'jcrcontent_transport_user': 'query',
                    'jcrcontent_trigger_distribute': 'query',
                    'jcrcontent_trigger_modified': 'query',
                    'jcrcontent_trigger_on_off_time': 'query',
                    'jcrcontent_trigger_receive': 'query',
                    'jcrcontent_trigger_specific': 'query',
                    'jcrcontent_user_id': 'query',
                    'jcrprimary_type': 'query',
                    'operation': 'query',
                },
                'collection_format_map': {
                    'jcrcontent_protocol_http_headers': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_agent
        )

        def __post_authorizable_keystore(
            self,
            intermediate_path,
            authorizable_id,
            **kwargs
        ):
            """post_authorizable_keystore  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_authorizable_keystore(intermediate_path, authorizable_id, async_req=True)
            >>> result = thread.get()

            Args:
                intermediate_path (str):
                authorizable_id (str):

            Keyword Args:
                operation (str): [optional]
                current_password (str): [optional]
                new_password (str): [optional]
                re_password (str): [optional]
                key_password (str): [optional]
                key_store_pass (str): [optional]
                alias (str): [optional]
                new_alias (str): [optional]
                remove_alias (str): [optional]
                cert_chain (file_type): [optional]
                pk (file_type): [optional]
                key_store (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                KeystoreInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['intermediate_path'] = \
                intermediate_path
            kwargs['authorizable_id'] = \
                authorizable_id
            return self.call_with_http_info(**kwargs)

        self.post_authorizable_keystore = Endpoint(
            settings={
                'response_type': (KeystoreInfo,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/{intermediatePath}/{authorizableId}.ks.html',
                'operation_id': 'post_authorizable_keystore',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'intermediate_path',
                    'authorizable_id',
                    'operation',
                    'current_password',
                    'new_password',
                    're_password',
                    'key_password',
                    'key_store_pass',
                    'alias',
                    'new_alias',
                    'remove_alias',
                    'cert_chain',
                    'pk',
                    'key_store',
                ],
                'required': [
                    'intermediate_path',
                    'authorizable_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'intermediate_path':
                        (str,),
                    'authorizable_id':
                        (str,),
                    'operation':
                        (str,),
                    'current_password':
                        (str,),
                    'new_password':
                        (str,),
                    're_password':
                        (str,),
                    'key_password':
                        (str,),
                    'key_store_pass':
                        (str,),
                    'alias':
                        (str,),
                    'new_alias':
                        (str,),
                    'remove_alias':
                        (str,),
                    'cert_chain':
                        (file_type,),
                    'pk':
                        (file_type,),
                    'key_store':
                        (file_type,),
                },
                'attribute_map': {
                    'intermediate_path': 'intermediatePath',
                    'authorizable_id': 'authorizableId',
                    'operation': ':operation',
                    'current_password': 'currentPassword',
                    'new_password': 'newPassword',
                    're_password': 'rePassword',
                    'key_password': 'keyPassword',
                    'key_store_pass': 'keyStorePass',
                    'alias': 'alias',
                    'new_alias': 'newAlias',
                    'remove_alias': 'removeAlias',
                    'cert_chain': 'cert-chain',
                    'pk': 'pk',
                    'key_store': 'keyStore',
                },
                'location_map': {
                    'intermediate_path': 'path',
                    'authorizable_id': 'path',
                    'operation': 'query',
                    'current_password': 'query',
                    'new_password': 'query',
                    're_password': 'query',
                    'key_password': 'query',
                    'key_store_pass': 'query',
                    'alias': 'query',
                    'new_alias': 'query',
                    'remove_alias': 'query',
                    'cert_chain': 'form',
                    'pk': 'form',
                    'key_store': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__post_authorizable_keystore
        )

        def __post_authorizables(
            self,
            authorizable_id,
            intermediate_path,
            **kwargs
        ):
            """post_authorizables  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_authorizables(authorizable_id, intermediate_path, async_req=True)
            >>> result = thread.get()

            Args:
                authorizable_id (str):
                intermediate_path (str):

            Keyword Args:
                create_user (str): [optional]
                create_group (str): [optional]
                reppassword (str): [optional]
                profile_given_name (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['authorizable_id'] = \
                authorizable_id
            kwargs['intermediate_path'] = \
                intermediate_path
            return self.call_with_http_info(**kwargs)

        self.post_authorizables = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/libs/granite/security/post/authorizables',
                'operation_id': 'post_authorizables',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'authorizable_id',
                    'intermediate_path',
                    'create_user',
                    'create_group',
                    'reppassword',
                    'profile_given_name',
                ],
                'required': [
                    'authorizable_id',
                    'intermediate_path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'authorizable_id':
                        (str,),
                    'intermediate_path':
                        (str,),
                    'create_user':
                        (str,),
                    'create_group':
                        (str,),
                    'reppassword':
                        (str,),
                    'profile_given_name':
                        (str,),
                },
                'attribute_map': {
                    'authorizable_id': 'authorizableId',
                    'intermediate_path': 'intermediatePath',
                    'create_user': 'createUser',
                    'create_group': 'createGroup',
                    'reppassword': 'rep:password',
                    'profile_given_name': 'profile/givenName',
                },
                'location_map': {
                    'authorizable_id': 'query',
                    'intermediate_path': 'query',
                    'create_user': 'query',
                    'create_group': 'query',
                    'reppassword': 'query',
                    'profile_given_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_authorizables
        )

        def __post_config_adobe_granite_saml_authentication_handler(
            self,
            **kwargs
        ):
            """post_config_adobe_granite_saml_authentication_handler  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_adobe_granite_saml_authentication_handler(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                key_store_password (str): [optional]
                key_store_password_type_hint (str): [optional]
                service_ranking (int): [optional]
                service_ranking_type_hint (str): [optional]
                idp_http_redirect (bool): [optional]
                idp_http_redirect_type_hint (str): [optional]
                create_user (bool): [optional]
                create_user_type_hint (str): [optional]
                default_redirect_url (str): [optional]
                default_redirect_url_type_hint (str): [optional]
                user_id_attribute (str): [optional]
                user_id_attribute_type_hint (str): [optional]
                default_groups ([str]): [optional]
                default_groups_type_hint (str): [optional]
                idp_cert_alias (str): [optional]
                idp_cert_alias_type_hint (str): [optional]
                add_group_memberships (bool): [optional]
                add_group_memberships_type_hint (str): [optional]
                path ([str]): [optional]
                path_type_hint (str): [optional]
                synchronize_attributes ([str]): [optional]
                synchronize_attributes_type_hint (str): [optional]
                clock_tolerance (int): [optional]
                clock_tolerance_type_hint (str): [optional]
                group_membership_attribute (str): [optional]
                group_membership_attribute_type_hint (str): [optional]
                idp_url (str): [optional]
                idp_url_type_hint (str): [optional]
                logout_url (str): [optional]
                logout_url_type_hint (str): [optional]
                service_provider_entity_id (str): [optional]
                service_provider_entity_id_type_hint (str): [optional]
                assertion_consumer_service_url (str): [optional]
                assertion_consumer_service_url_type_hint (str): [optional]
                handle_logout (bool): [optional]
                handle_logout_type_hint (str): [optional]
                sp_private_key_alias (str): [optional]
                sp_private_key_alias_type_hint (str): [optional]
                use_encryption (bool): [optional]
                use_encryption_type_hint (str): [optional]
                name_id_format (str): [optional]
                name_id_format_type_hint (str): [optional]
                digest_method (str): [optional]
                digest_method_type_hint (str): [optional]
                signature_method (str): [optional]
                signature_method_type_hint (str): [optional]
                user_intermediate_path (str): [optional]
                user_intermediate_path_type_hint (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_config_adobe_granite_saml_authentication_handler = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config',
                'operation_id': 'post_config_adobe_granite_saml_authentication_handler',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'key_store_password',
                    'key_store_password_type_hint',
                    'service_ranking',
                    'service_ranking_type_hint',
                    'idp_http_redirect',
                    'idp_http_redirect_type_hint',
                    'create_user',
                    'create_user_type_hint',
                    'default_redirect_url',
                    'default_redirect_url_type_hint',
                    'user_id_attribute',
                    'user_id_attribute_type_hint',
                    'default_groups',
                    'default_groups_type_hint',
                    'idp_cert_alias',
                    'idp_cert_alias_type_hint',
                    'add_group_memberships',
                    'add_group_memberships_type_hint',
                    'path',
                    'path_type_hint',
                    'synchronize_attributes',
                    'synchronize_attributes_type_hint',
                    'clock_tolerance',
                    'clock_tolerance_type_hint',
                    'group_membership_attribute',
                    'group_membership_attribute_type_hint',
                    'idp_url',
                    'idp_url_type_hint',
                    'logout_url',
                    'logout_url_type_hint',
                    'service_provider_entity_id',
                    'service_provider_entity_id_type_hint',
                    'assertion_consumer_service_url',
                    'assertion_consumer_service_url_type_hint',
                    'handle_logout',
                    'handle_logout_type_hint',
                    'sp_private_key_alias',
                    'sp_private_key_alias_type_hint',
                    'use_encryption',
                    'use_encryption_type_hint',
                    'name_id_format',
                    'name_id_format_type_hint',
                    'digest_method',
                    'digest_method_type_hint',
                    'signature_method',
                    'signature_method_type_hint',
                    'user_intermediate_path',
                    'user_intermediate_path_type_hint',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key_store_password':
                        (str,),
                    'key_store_password_type_hint':
                        (str,),
                    'service_ranking':
                        (int,),
                    'service_ranking_type_hint':
                        (str,),
                    'idp_http_redirect':
                        (bool,),
                    'idp_http_redirect_type_hint':
                        (str,),
                    'create_user':
                        (bool,),
                    'create_user_type_hint':
                        (str,),
                    'default_redirect_url':
                        (str,),
                    'default_redirect_url_type_hint':
                        (str,),
                    'user_id_attribute':
                        (str,),
                    'user_id_attribute_type_hint':
                        (str,),
                    'default_groups':
                        ([str],),
                    'default_groups_type_hint':
                        (str,),
                    'idp_cert_alias':
                        (str,),
                    'idp_cert_alias_type_hint':
                        (str,),
                    'add_group_memberships':
                        (bool,),
                    'add_group_memberships_type_hint':
                        (str,),
                    'path':
                        ([str],),
                    'path_type_hint':
                        (str,),
                    'synchronize_attributes':
                        ([str],),
                    'synchronize_attributes_type_hint':
                        (str,),
                    'clock_tolerance':
                        (int,),
                    'clock_tolerance_type_hint':
                        (str,),
                    'group_membership_attribute':
                        (str,),
                    'group_membership_attribute_type_hint':
                        (str,),
                    'idp_url':
                        (str,),
                    'idp_url_type_hint':
                        (str,),
                    'logout_url':
                        (str,),
                    'logout_url_type_hint':
                        (str,),
                    'service_provider_entity_id':
                        (str,),
                    'service_provider_entity_id_type_hint':
                        (str,),
                    'assertion_consumer_service_url':
                        (str,),
                    'assertion_consumer_service_url_type_hint':
                        (str,),
                    'handle_logout':
                        (bool,),
                    'handle_logout_type_hint':
                        (str,),
                    'sp_private_key_alias':
                        (str,),
                    'sp_private_key_alias_type_hint':
                        (str,),
                    'use_encryption':
                        (bool,),
                    'use_encryption_type_hint':
                        (str,),
                    'name_id_format':
                        (str,),
                    'name_id_format_type_hint':
                        (str,),
                    'digest_method':
                        (str,),
                    'digest_method_type_hint':
                        (str,),
                    'signature_method':
                        (str,),
                    'signature_method_type_hint':
                        (str,),
                    'user_intermediate_path':
                        (str,),
                    'user_intermediate_path_type_hint':
                        (str,),
                },
                'attribute_map': {
                    'key_store_password': 'keyStorePassword',
                    'key_store_password_type_hint': 'keyStorePassword@TypeHint',
                    'service_ranking': 'service.ranking',
                    'service_ranking_type_hint': 'service.ranking@TypeHint',
                    'idp_http_redirect': 'idpHttpRedirect',
                    'idp_http_redirect_type_hint': 'idpHttpRedirect@TypeHint',
                    'create_user': 'createUser',
                    'create_user_type_hint': 'createUser@TypeHint',
                    'default_redirect_url': 'defaultRedirectUrl',
                    'default_redirect_url_type_hint': 'defaultRedirectUrl@TypeHint',
                    'user_id_attribute': 'userIDAttribute',
                    'user_id_attribute_type_hint': 'userIDAttribute@TypeHint',
                    'default_groups': 'defaultGroups',
                    'default_groups_type_hint': 'defaultGroups@TypeHint',
                    'idp_cert_alias': 'idpCertAlias',
                    'idp_cert_alias_type_hint': 'idpCertAlias@TypeHint',
                    'add_group_memberships': 'addGroupMemberships',
                    'add_group_memberships_type_hint': 'addGroupMemberships@TypeHint',
                    'path': 'path',
                    'path_type_hint': 'path@TypeHint',
                    'synchronize_attributes': 'synchronizeAttributes',
                    'synchronize_attributes_type_hint': 'synchronizeAttributes@TypeHint',
                    'clock_tolerance': 'clockTolerance',
                    'clock_tolerance_type_hint': 'clockTolerance@TypeHint',
                    'group_membership_attribute': 'groupMembershipAttribute',
                    'group_membership_attribute_type_hint': 'groupMembershipAttribute@TypeHint',
                    'idp_url': 'idpUrl',
                    'idp_url_type_hint': 'idpUrl@TypeHint',
                    'logout_url': 'logoutUrl',
                    'logout_url_type_hint': 'logoutUrl@TypeHint',
                    'service_provider_entity_id': 'serviceProviderEntityId',
                    'service_provider_entity_id_type_hint': 'serviceProviderEntityId@TypeHint',
                    'assertion_consumer_service_url': 'assertionConsumerServiceURL',
                    'assertion_consumer_service_url_type_hint': 'assertionConsumerServiceURL@TypeHint',
                    'handle_logout': 'handleLogout',
                    'handle_logout_type_hint': 'handleLogout@TypeHint',
                    'sp_private_key_alias': 'spPrivateKeyAlias',
                    'sp_private_key_alias_type_hint': 'spPrivateKeyAlias@TypeHint',
                    'use_encryption': 'useEncryption',
                    'use_encryption_type_hint': 'useEncryption@TypeHint',
                    'name_id_format': 'nameIdFormat',
                    'name_id_format_type_hint': 'nameIdFormat@TypeHint',
                    'digest_method': 'digestMethod',
                    'digest_method_type_hint': 'digestMethod@TypeHint',
                    'signature_method': 'signatureMethod',
                    'signature_method_type_hint': 'signatureMethod@TypeHint',
                    'user_intermediate_path': 'userIntermediatePath',
                    'user_intermediate_path_type_hint': 'userIntermediatePath@TypeHint',
                },
                'location_map': {
                    'key_store_password': 'query',
                    'key_store_password_type_hint': 'query',
                    'service_ranking': 'query',
                    'service_ranking_type_hint': 'query',
                    'idp_http_redirect': 'query',
                    'idp_http_redirect_type_hint': 'query',
                    'create_user': 'query',
                    'create_user_type_hint': 'query',
                    'default_redirect_url': 'query',
                    'default_redirect_url_type_hint': 'query',
                    'user_id_attribute': 'query',
                    'user_id_attribute_type_hint': 'query',
                    'default_groups': 'query',
                    'default_groups_type_hint': 'query',
                    'idp_cert_alias': 'query',
                    'idp_cert_alias_type_hint': 'query',
                    'add_group_memberships': 'query',
                    'add_group_memberships_type_hint': 'query',
                    'path': 'query',
                    'path_type_hint': 'query',
                    'synchronize_attributes': 'query',
                    'synchronize_attributes_type_hint': 'query',
                    'clock_tolerance': 'query',
                    'clock_tolerance_type_hint': 'query',
                    'group_membership_attribute': 'query',
                    'group_membership_attribute_type_hint': 'query',
                    'idp_url': 'query',
                    'idp_url_type_hint': 'query',
                    'logout_url': 'query',
                    'logout_url_type_hint': 'query',
                    'service_provider_entity_id': 'query',
                    'service_provider_entity_id_type_hint': 'query',
                    'assertion_consumer_service_url': 'query',
                    'assertion_consumer_service_url_type_hint': 'query',
                    'handle_logout': 'query',
                    'handle_logout_type_hint': 'query',
                    'sp_private_key_alias': 'query',
                    'sp_private_key_alias_type_hint': 'query',
                    'use_encryption': 'query',
                    'use_encryption_type_hint': 'query',
                    'name_id_format': 'query',
                    'name_id_format_type_hint': 'query',
                    'digest_method': 'query',
                    'digest_method_type_hint': 'query',
                    'signature_method': 'query',
                    'signature_method_type_hint': 'query',
                    'user_intermediate_path': 'query',
                    'user_intermediate_path_type_hint': 'query',
                },
                'collection_format_map': {
                    'default_groups': 'multi',
                    'path': 'multi',
                    'synchronize_attributes': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_adobe_granite_saml_authentication_handler
        )

        def __post_config_apache_felix_jetty_based_http_service(
            self,
            **kwargs
        ):
            """post_config_apache_felix_jetty_based_http_service  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_apache_felix_jetty_based_http_service(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                org_apache_felix_https_nio (bool): [optional]
                org_apache_felix_https_nio_type_hint (str): [optional]
                org_apache_felix_https_keystore (str): [optional]
                org_apache_felix_https_keystore_type_hint (str): [optional]
                org_apache_felix_https_keystore_password (str): [optional]
                org_apache_felix_https_keystore_password_type_hint (str): [optional]
                org_apache_felix_https_keystore_key (str): [optional]
                org_apache_felix_https_keystore_key_type_hint (str): [optional]
                org_apache_felix_https_keystore_key_password (str): [optional]
                org_apache_felix_https_keystore_key_password_type_hint (str): [optional]
                org_apache_felix_https_truststore (str): [optional]
                org_apache_felix_https_truststore_type_hint (str): [optional]
                org_apache_felix_https_truststore_password (str): [optional]
                org_apache_felix_https_truststore_password_type_hint (str): [optional]
                org_apache_felix_https_clientcertificate (str): [optional]
                org_apache_felix_https_clientcertificate_type_hint (str): [optional]
                org_apache_felix_https_enable (bool): [optional]
                org_apache_felix_https_enable_type_hint (str): [optional]
                org_osgi_service_http_port_secure (str): [optional]
                org_osgi_service_http_port_secure_type_hint (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_config_apache_felix_jetty_based_http_service = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/org.apache.felix.http',
                'operation_id': 'post_config_apache_felix_jetty_based_http_service',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_apache_felix_https_nio',
                    'org_apache_felix_https_nio_type_hint',
                    'org_apache_felix_https_keystore',
                    'org_apache_felix_https_keystore_type_hint',
                    'org_apache_felix_https_keystore_password',
                    'org_apache_felix_https_keystore_password_type_hint',
                    'org_apache_felix_https_keystore_key',
                    'org_apache_felix_https_keystore_key_type_hint',
                    'org_apache_felix_https_keystore_key_password',
                    'org_apache_felix_https_keystore_key_password_type_hint',
                    'org_apache_felix_https_truststore',
                    'org_apache_felix_https_truststore_type_hint',
                    'org_apache_felix_https_truststore_password',
                    'org_apache_felix_https_truststore_password_type_hint',
                    'org_apache_felix_https_clientcertificate',
                    'org_apache_felix_https_clientcertificate_type_hint',
                    'org_apache_felix_https_enable',
                    'org_apache_felix_https_enable_type_hint',
                    'org_osgi_service_http_port_secure',
                    'org_osgi_service_http_port_secure_type_hint',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_apache_felix_https_nio':
                        (bool,),
                    'org_apache_felix_https_nio_type_hint':
                        (str,),
                    'org_apache_felix_https_keystore':
                        (str,),
                    'org_apache_felix_https_keystore_type_hint':
                        (str,),
                    'org_apache_felix_https_keystore_password':
                        (str,),
                    'org_apache_felix_https_keystore_password_type_hint':
                        (str,),
                    'org_apache_felix_https_keystore_key':
                        (str,),
                    'org_apache_felix_https_keystore_key_type_hint':
                        (str,),
                    'org_apache_felix_https_keystore_key_password':
                        (str,),
                    'org_apache_felix_https_keystore_key_password_type_hint':
                        (str,),
                    'org_apache_felix_https_truststore':
                        (str,),
                    'org_apache_felix_https_truststore_type_hint':
                        (str,),
                    'org_apache_felix_https_truststore_password':
                        (str,),
                    'org_apache_felix_https_truststore_password_type_hint':
                        (str,),
                    'org_apache_felix_https_clientcertificate':
                        (str,),
                    'org_apache_felix_https_clientcertificate_type_hint':
                        (str,),
                    'org_apache_felix_https_enable':
                        (bool,),
                    'org_apache_felix_https_enable_type_hint':
                        (str,),
                    'org_osgi_service_http_port_secure':
                        (str,),
                    'org_osgi_service_http_port_secure_type_hint':
                        (str,),
                },
                'attribute_map': {
                    'org_apache_felix_https_nio': 'org.apache.felix.https.nio',
                    'org_apache_felix_https_nio_type_hint': 'org.apache.felix.https.nio@TypeHint',
                    'org_apache_felix_https_keystore': 'org.apache.felix.https.keystore',
                    'org_apache_felix_https_keystore_type_hint': 'org.apache.felix.https.keystore@TypeHint',
                    'org_apache_felix_https_keystore_password': 'org.apache.felix.https.keystore.password',
                    'org_apache_felix_https_keystore_password_type_hint': 'org.apache.felix.https.keystore.password@TypeHint',
                    'org_apache_felix_https_keystore_key': 'org.apache.felix.https.keystore.key',
                    'org_apache_felix_https_keystore_key_type_hint': 'org.apache.felix.https.keystore.key@TypeHint',
                    'org_apache_felix_https_keystore_key_password': 'org.apache.felix.https.keystore.key.password',
                    'org_apache_felix_https_keystore_key_password_type_hint': 'org.apache.felix.https.keystore.key.password@TypeHint',
                    'org_apache_felix_https_truststore': 'org.apache.felix.https.truststore',
                    'org_apache_felix_https_truststore_type_hint': 'org.apache.felix.https.truststore@TypeHint',
                    'org_apache_felix_https_truststore_password': 'org.apache.felix.https.truststore.password',
                    'org_apache_felix_https_truststore_password_type_hint': 'org.apache.felix.https.truststore.password@TypeHint',
                    'org_apache_felix_https_clientcertificate': 'org.apache.felix.https.clientcertificate',
                    'org_apache_felix_https_clientcertificate_type_hint': 'org.apache.felix.https.clientcertificate@TypeHint',
                    'org_apache_felix_https_enable': 'org.apache.felix.https.enable',
                    'org_apache_felix_https_enable_type_hint': 'org.apache.felix.https.enable@TypeHint',
                    'org_osgi_service_http_port_secure': 'org.osgi.service.http.port.secure',
                    'org_osgi_service_http_port_secure_type_hint': 'org.osgi.service.http.port.secure@TypeHint',
                },
                'location_map': {
                    'org_apache_felix_https_nio': 'query',
                    'org_apache_felix_https_nio_type_hint': 'query',
                    'org_apache_felix_https_keystore': 'query',
                    'org_apache_felix_https_keystore_type_hint': 'query',
                    'org_apache_felix_https_keystore_password': 'query',
                    'org_apache_felix_https_keystore_password_type_hint': 'query',
                    'org_apache_felix_https_keystore_key': 'query',
                    'org_apache_felix_https_keystore_key_type_hint': 'query',
                    'org_apache_felix_https_keystore_key_password': 'query',
                    'org_apache_felix_https_keystore_key_password_type_hint': 'query',
                    'org_apache_felix_https_truststore': 'query',
                    'org_apache_felix_https_truststore_type_hint': 'query',
                    'org_apache_felix_https_truststore_password': 'query',
                    'org_apache_felix_https_truststore_password_type_hint': 'query',
                    'org_apache_felix_https_clientcertificate': 'query',
                    'org_apache_felix_https_clientcertificate_type_hint': 'query',
                    'org_apache_felix_https_enable': 'query',
                    'org_apache_felix_https_enable_type_hint': 'query',
                    'org_osgi_service_http_port_secure': 'query',
                    'org_osgi_service_http_port_secure_type_hint': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_apache_felix_jetty_based_http_service
        )

        def __post_config_apache_http_components_proxy_configuration(
            self,
            **kwargs
        ):
            """post_config_apache_http_components_proxy_configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_apache_http_components_proxy_configuration(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                proxy_host (str): [optional]
                proxy_host_type_hint (str): [optional]
                proxy_port (int): [optional]
                proxy_port_type_hint (str): [optional]
                proxy_exceptions ([str]): [optional]
                proxy_exceptions_type_hint (str): [optional]
                proxy_enabled (bool): [optional]
                proxy_enabled_type_hint (str): [optional]
                proxy_user (str): [optional]
                proxy_user_type_hint (str): [optional]
                proxy_password (str): [optional]
                proxy_password_type_hint (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_config_apache_http_components_proxy_configuration = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/org.apache.http.proxyconfigurator.config',
                'operation_id': 'post_config_apache_http_components_proxy_configuration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'proxy_host',
                    'proxy_host_type_hint',
                    'proxy_port',
                    'proxy_port_type_hint',
                    'proxy_exceptions',
                    'proxy_exceptions_type_hint',
                    'proxy_enabled',
                    'proxy_enabled_type_hint',
                    'proxy_user',
                    'proxy_user_type_hint',
                    'proxy_password',
                    'proxy_password_type_hint',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'proxy_host':
                        (str,),
                    'proxy_host_type_hint':
                        (str,),
                    'proxy_port':
                        (int,),
                    'proxy_port_type_hint':
                        (str,),
                    'proxy_exceptions':
                        ([str],),
                    'proxy_exceptions_type_hint':
                        (str,),
                    'proxy_enabled':
                        (bool,),
                    'proxy_enabled_type_hint':
                        (str,),
                    'proxy_user':
                        (str,),
                    'proxy_user_type_hint':
                        (str,),
                    'proxy_password':
                        (str,),
                    'proxy_password_type_hint':
                        (str,),
                },
                'attribute_map': {
                    'proxy_host': 'proxy.host',
                    'proxy_host_type_hint': 'proxy.host@TypeHint',
                    'proxy_port': 'proxy.port',
                    'proxy_port_type_hint': 'proxy.port@TypeHint',
                    'proxy_exceptions': 'proxy.exceptions',
                    'proxy_exceptions_type_hint': 'proxy.exceptions@TypeHint',
                    'proxy_enabled': 'proxy.enabled',
                    'proxy_enabled_type_hint': 'proxy.enabled@TypeHint',
                    'proxy_user': 'proxy.user',
                    'proxy_user_type_hint': 'proxy.user@TypeHint',
                    'proxy_password': 'proxy.password',
                    'proxy_password_type_hint': 'proxy.password@TypeHint',
                },
                'location_map': {
                    'proxy_host': 'query',
                    'proxy_host_type_hint': 'query',
                    'proxy_port': 'query',
                    'proxy_port_type_hint': 'query',
                    'proxy_exceptions': 'query',
                    'proxy_exceptions_type_hint': 'query',
                    'proxy_enabled': 'query',
                    'proxy_enabled_type_hint': 'query',
                    'proxy_user': 'query',
                    'proxy_user_type_hint': 'query',
                    'proxy_password': 'query',
                    'proxy_password_type_hint': 'query',
                },
                'collection_format_map': {
                    'proxy_exceptions': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_apache_http_components_proxy_configuration
        )

        def __post_config_apache_sling_dav_ex_servlet(
            self,
            **kwargs
        ):
            """post_config_apache_sling_dav_ex_servlet  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_apache_sling_dav_ex_servlet(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                alias (str): [optional]
                alias_type_hint (str): [optional]
                dav_create_absolute_uri (bool): [optional]
                dav_create_absolute_uri_type_hint (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_config_apache_sling_dav_ex_servlet = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet',
                'operation_id': 'post_config_apache_sling_dav_ex_servlet',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'alias',
                    'alias_type_hint',
                    'dav_create_absolute_uri',
                    'dav_create_absolute_uri_type_hint',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'alias_type_hint':
                        (str,),
                    'dav_create_absolute_uri':
                        (bool,),
                    'dav_create_absolute_uri_type_hint':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'alias_type_hint': 'alias@TypeHint',
                    'dav_create_absolute_uri': 'dav.create-absolute-uri',
                    'dav_create_absolute_uri_type_hint': 'dav.create-absolute-uri@TypeHint',
                },
                'location_map': {
                    'alias': 'query',
                    'alias_type_hint': 'query',
                    'dav_create_absolute_uri': 'query',
                    'dav_create_absolute_uri_type_hint': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_apache_sling_dav_ex_servlet
        )

        def __post_config_apache_sling_get_servlet(
            self,
            **kwargs
        ):
            """post_config_apache_sling_get_servlet  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_apache_sling_get_servlet(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                json_maximumresults (str): [optional]
                json_maximumresults_type_hint (str): [optional]
                enable_html (bool): [optional]
                enable_html_type_hint (str): [optional]
                enable_txt (bool): [optional]
                enable_txt_type_hint (str): [optional]
                enable_xml (bool): [optional]
                enable_xml_type_hint (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_config_apache_sling_get_servlet = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet',
                'operation_id': 'post_config_apache_sling_get_servlet',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'json_maximumresults',
                    'json_maximumresults_type_hint',
                    'enable_html',
                    'enable_html_type_hint',
                    'enable_txt',
                    'enable_txt_type_hint',
                    'enable_xml',
                    'enable_xml_type_hint',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'json_maximumresults':
                        (str,),
                    'json_maximumresults_type_hint':
                        (str,),
                    'enable_html':
                        (bool,),
                    'enable_html_type_hint':
                        (str,),
                    'enable_txt':
                        (bool,),
                    'enable_txt_type_hint':
                        (str,),
                    'enable_xml':
                        (bool,),
                    'enable_xml_type_hint':
                        (str,),
                },
                'attribute_map': {
                    'json_maximumresults': 'json.maximumresults',
                    'json_maximumresults_type_hint': 'json.maximumresults@TypeHint',
                    'enable_html': 'enable.html',
                    'enable_html_type_hint': 'enable.html@TypeHint',
                    'enable_txt': 'enable.txt',
                    'enable_txt_type_hint': 'enable.txt@TypeHint',
                    'enable_xml': 'enable.xml',
                    'enable_xml_type_hint': 'enable.xml@TypeHint',
                },
                'location_map': {
                    'json_maximumresults': 'query',
                    'json_maximumresults_type_hint': 'query',
                    'enable_html': 'query',
                    'enable_html_type_hint': 'query',
                    'enable_txt': 'query',
                    'enable_txt_type_hint': 'query',
                    'enable_xml': 'query',
                    'enable_xml_type_hint': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_apache_sling_get_servlet
        )

        def __post_config_apache_sling_referrer_filter(
            self,
            **kwargs
        ):
            """post_config_apache_sling_referrer_filter  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_apache_sling_referrer_filter(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                allow_empty (bool): [optional]
                allow_empty_type_hint (str): [optional]
                allow_hosts (str): [optional]
                allow_hosts_type_hint (str): [optional]
                allow_hosts_regexp (str): [optional]
                allow_hosts_regexp_type_hint (str): [optional]
                filter_methods (str): [optional]
                filter_methods_type_hint (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_config_apache_sling_referrer_filter = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter',
                'operation_id': 'post_config_apache_sling_referrer_filter',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_empty',
                    'allow_empty_type_hint',
                    'allow_hosts',
                    'allow_hosts_type_hint',
                    'allow_hosts_regexp',
                    'allow_hosts_regexp_type_hint',
                    'filter_methods',
                    'filter_methods_type_hint',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_empty':
                        (bool,),
                    'allow_empty_type_hint':
                        (str,),
                    'allow_hosts':
                        (str,),
                    'allow_hosts_type_hint':
                        (str,),
                    'allow_hosts_regexp':
                        (str,),
                    'allow_hosts_regexp_type_hint':
                        (str,),
                    'filter_methods':
                        (str,),
                    'filter_methods_type_hint':
                        (str,),
                },
                'attribute_map': {
                    'allow_empty': 'allow.empty',
                    'allow_empty_type_hint': 'allow.empty@TypeHint',
                    'allow_hosts': 'allow.hosts',
                    'allow_hosts_type_hint': 'allow.hosts@TypeHint',
                    'allow_hosts_regexp': 'allow.hosts.regexp',
                    'allow_hosts_regexp_type_hint': 'allow.hosts.regexp@TypeHint',
                    'filter_methods': 'filter.methods',
                    'filter_methods_type_hint': 'filter.methods@TypeHint',
                },
                'location_map': {
                    'allow_empty': 'query',
                    'allow_empty_type_hint': 'query',
                    'allow_hosts': 'query',
                    'allow_hosts_type_hint': 'query',
                    'allow_hosts_regexp': 'query',
                    'allow_hosts_regexp_type_hint': 'query',
                    'filter_methods': 'query',
                    'filter_methods_type_hint': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_apache_sling_referrer_filter
        )

        def __post_config_property(
            self,
            config_node_name,
            **kwargs
        ):
            """post_config_property  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_property(config_node_name, async_req=True)
            >>> result = thread.get()

            Args:
                config_node_name (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['config_node_name'] = \
                config_node_name
            return self.call_with_http_info(**kwargs)

        self.post_config_property = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/{configNodeName}',
                'operation_id': 'post_config_property',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'config_node_name',
                ],
                'required': [
                    'config_node_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'config_node_name':
                        (str,),
                },
                'attribute_map': {
                    'config_node_name': 'configNodeName',
                },
                'location_map': {
                    'config_node_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_property
        )

        def __post_node(
            self,
            path,
            name,
            **kwargs
        ):
            """post_node  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_node(path, name, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):
                name (str):

            Keyword Args:
                operation (str): [optional]
                delete_authorizable (str): [optional]
                file (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['path'] = \
                path
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.post_node = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/{path}/{name}',
                'operation_id': 'post_node',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                    'name',
                    'operation',
                    'delete_authorizable',
                    'file',
                ],
                'required': [
                    'path',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                    'name':
                        (str,),
                    'operation':
                        (str,),
                    'delete_authorizable':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'path': 'path',
                    'name': 'name',
                    'operation': ':operation',
                    'delete_authorizable': 'deleteAuthorizable',
                    'file': 'file',
                },
                'location_map': {
                    'path': 'path',
                    'name': 'path',
                    'operation': 'query',
                    'delete_authorizable': 'query',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__post_node
        )

        def __post_node_rw(
            self,
            path,
            name,
            **kwargs
        ):
            """post_node_rw  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_node_rw(path, name, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):
                name (str):

            Keyword Args:
                add_members (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['path'] = \
                path
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.post_node_rw = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/{path}/{name}.rw.html',
                'operation_id': 'post_node_rw',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                    'name',
                    'add_members',
                ],
                'required': [
                    'path',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                    'name':
                        (str,),
                    'add_members':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                    'name': 'name',
                    'add_members': 'addMembers',
                },
                'location_map': {
                    'path': 'path',
                    'name': 'path',
                    'add_members': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_node_rw
        )

        def __post_path(
            self,
            path,
            jcrprimary_type,
            name,
            **kwargs
        ):
            """post_path  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_path(path, jcrprimary_type, name, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):
                jcrprimary_type (str):
                name (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['path'] = \
                path
            kwargs['jcrprimary_type'] = \
                jcrprimary_type
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.post_path = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/{path}/',
                'operation_id': 'post_path',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                    'jcrprimary_type',
                    'name',
                ],
                'required': [
                    'path',
                    'jcrprimary_type',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                    'jcrprimary_type':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                    'jcrprimary_type': 'jcr:primaryType',
                    'name': ':name',
                },
                'location_map': {
                    'path': 'path',
                    'jcrprimary_type': 'query',
                    'name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_path
        )

        def __post_query(
            self,
            path,
            p_limit,
            _1_property,
            _1_property_value,
            **kwargs
        ):
            """post_query  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_query(path, p_limit, _1_property, _1_property_value, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):
                p_limit (float):
                _1_property (str):
                _1_property_value (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['path'] = \
                path
            kwargs['p_limit'] = \
                p_limit
            kwargs['_1_property'] = \
                _1_property
            kwargs['_1_property_value'] = \
                _1_property_value
            return self.call_with_http_info(**kwargs)

        self.post_query = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/bin/querybuilder.json',
                'operation_id': 'post_query',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'path',
                    'p_limit',
                    '_1_property',
                    '_1_property_value',
                ],
                'required': [
                    'path',
                    'p_limit',
                    '_1_property',
                    '_1_property_value',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                    'p_limit':
                        (float,),
                    '_1_property':
                        (str,),
                    '_1_property_value':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                    'p_limit': 'p.limit',
                    '_1_property': '1_property',
                    '_1_property_value': '1_property.value',
                },
                'location_map': {
                    'path': 'query',
                    'p_limit': 'query',
                    '_1_property': 'query',
                    '_1_property_value': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_query
        )

        def __post_tree_activation(
            self,
            ignoredeactivated,
            onlymodified,
            path,
            **kwargs
        ):
            """post_tree_activation  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_tree_activation(ignoredeactivated, onlymodified, path, async_req=True)
            >>> result = thread.get()

            Args:
                ignoredeactivated (bool):
                onlymodified (bool):
                path (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['ignoredeactivated'] = \
                ignoredeactivated
            kwargs['onlymodified'] = \
                onlymodified
            kwargs['path'] = \
                path
            return self.call_with_http_info(**kwargs)

        self.post_tree_activation = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/replication/treeactivation.html',
                'operation_id': 'post_tree_activation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ignoredeactivated',
                    'onlymodified',
                    'path',
                ],
                'required': [
                    'ignoredeactivated',
                    'onlymodified',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ignoredeactivated':
                        (bool,),
                    'onlymodified':
                        (bool,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'ignoredeactivated': 'ignoredeactivated',
                    'onlymodified': 'onlymodified',
                    'path': 'path',
                },
                'location_map': {
                    'ignoredeactivated': 'query',
                    'onlymodified': 'query',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_tree_activation
        )

        def __post_truststore(
            self,
            **kwargs
        ):
            """post_truststore  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_truststore(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                operation (str): [optional]
                new_password (str): [optional]
                re_password (str): [optional]
                key_store_type (str): [optional]
                remove_alias (str): [optional]
                certificate (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_truststore = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/libs/granite/security/post/truststore',
                'operation_id': 'post_truststore',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'operation',
                    'new_password',
                    're_password',
                    'key_store_type',
                    'remove_alias',
                    'certificate',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'operation':
                        (str,),
                    'new_password':
                        (str,),
                    're_password':
                        (str,),
                    'key_store_type':
                        (str,),
                    'remove_alias':
                        (str,),
                    'certificate':
                        (file_type,),
                },
                'attribute_map': {
                    'operation': ':operation',
                    'new_password': 'newPassword',
                    're_password': 'rePassword',
                    'key_store_type': 'keyStoreType',
                    'remove_alias': 'removeAlias',
                    'certificate': 'certificate',
                },
                'location_map': {
                    'operation': 'query',
                    'new_password': 'query',
                    're_password': 'query',
                    'key_store_type': 'query',
                    'remove_alias': 'query',
                    'certificate': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__post_truststore
        )

        def __post_truststore_pkcs12(
            self,
            **kwargs
        ):
            """post_truststore_pkcs12  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_truststore_pkcs12(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                truststore_p12 (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_truststore_pkcs12 = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/etc/truststore',
                'operation_id': 'post_truststore_pkcs12',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'truststore_p12',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'truststore_p12':
                        (file_type,),
                },
                'attribute_map': {
                    'truststore_p12': 'truststore.p12',
                },
                'location_map': {
                    'truststore_p12': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__post_truststore_pkcs12
        )
