"""
    Adobe Experience Manager (AEM) API

    Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API  # noqa: E501

    The version of the OpenAPI document: 3.5.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from swaggeraem.api_client import ApiClient, Endpoint
from swaggeraem.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class CustomApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_aem_health_check(
            self,
            **kwargs
        ):
            """get_aem_health_check  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_aem_health_check(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                tags (str): [optional]
                combine_tags_or (bool): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_aem_health_check = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/system/health',
                'operation_id': 'get_aem_health_check',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tags',
                    'combine_tags_or',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tags':
                        (str,),
                    'combine_tags_or':
                        (bool,),
                },
                'attribute_map': {
                    'tags': 'tags',
                    'combine_tags_or': 'combineTagsOr',
                },
                'location_map': {
                    'tags': 'query',
                    'combine_tags_or': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_aem_health_check
        )

        def __post_config_aem_health_check_servlet(
            self,
            **kwargs
        ):
            """post_config_aem_health_check_servlet  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_aem_health_check_servlet(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                bundles_ignored ([str]): [optional]
                bundles_ignored_type_hint (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_config_aem_health_check_servlet = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck',
                'operation_id': 'post_config_aem_health_check_servlet',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bundles_ignored',
                    'bundles_ignored_type_hint',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bundles_ignored':
                        ([str],),
                    'bundles_ignored_type_hint':
                        (str,),
                },
                'attribute_map': {
                    'bundles_ignored': 'bundles.ignored',
                    'bundles_ignored_type_hint': 'bundles.ignored@TypeHint',
                },
                'location_map': {
                    'bundles_ignored': 'query',
                    'bundles_ignored_type_hint': 'query',
                },
                'collection_format_map': {
                    'bundles_ignored': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_aem_health_check_servlet
        )

        def __post_config_aem_password_reset(
            self,
            **kwargs
        ):
            """post_config_aem_password_reset  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_config_aem_password_reset(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                pwdreset_authorizables ([str]): [optional]
                pwdreset_authorizables_type_hint (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_config_aem_password_reset = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/apps/system/config/com.shinesolutions.aem.passwordreset.Activator',
                'operation_id': 'post_config_aem_password_reset',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pwdreset_authorizables',
                    'pwdreset_authorizables_type_hint',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pwdreset_authorizables':
                        ([str],),
                    'pwdreset_authorizables_type_hint':
                        (str,),
                },
                'attribute_map': {
                    'pwdreset_authorizables': 'pwdreset.authorizables',
                    'pwdreset_authorizables_type_hint': 'pwdreset.authorizables@TypeHint',
                },
                'location_map': {
                    'pwdreset_authorizables': 'query',
                    'pwdreset_authorizables_type_hint': 'query',
                },
                'collection_format_map': {
                    'pwdreset_authorizables': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_config_aem_password_reset
        )
