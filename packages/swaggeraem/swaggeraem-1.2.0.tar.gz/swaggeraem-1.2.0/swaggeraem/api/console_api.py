"""
    Adobe Experience Manager (AEM) API

    Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API  # noqa: E501

    The version of the OpenAPI document: 3.5.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from swaggeraem.api_client import ApiClient, Endpoint
from swaggeraem.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from swaggeraem.model.saml_configuration_info import SamlConfigurationInfo


class ConsoleApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_aem_product_info(
            self,
            **kwargs
        ):
            """get_aem_product_info  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_aem_product_info(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [str]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_aem_product_info = Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/system/console/status-productinfo.json',
                'operation_id': 'get_aem_product_info',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_aem_product_info
        )

        def __get_config_mgr(
            self,
            **kwargs
        ):
            """get_config_mgr  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_config_mgr(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_config_mgr = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/system/console/configMgr',
                'operation_id': 'get_config_mgr',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_config_mgr
        )

        def __post_bundle(
            self,
            name,
            action,
            **kwargs
        ):
            """post_bundle  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_bundle(name, action, async_req=True)
            >>> result = thread.get()

            Args:
                name (str):
                action (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['name'] = \
                name
            kwargs['action'] = \
                action
            return self.call_with_http_info(**kwargs)

        self.post_bundle = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/system/console/bundles/{name}',
                'operation_id': 'post_bundle',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'action',
                ],
                'required': [
                    'name',
                    'action',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'action':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'action': 'action',
                },
                'location_map': {
                    'name': 'path',
                    'action': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_bundle
        )

        def __post_jmx_repository(
            self,
            action,
            **kwargs
        ):
            """post_jmx_repository  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_jmx_repository(action, async_req=True)
            >>> result = thread.get()

            Args:
                action (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['action'] = \
                action
            return self.call_with_http_info(**kwargs)

        self.post_jmx_repository = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}',
                'operation_id': 'post_jmx_repository',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'action',
                ],
                'required': [
                    'action',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'action':
                        (str,),
                },
                'attribute_map': {
                    'action': 'action',
                },
                'location_map': {
                    'action': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_jmx_repository
        )

        def __post_saml_configuration(
            self,
            **kwargs
        ):
            """post_saml_configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_saml_configuration(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                post (bool): [optional]
                apply (bool): [optional]
                delete (bool): [optional]
                action (str): [optional]
                location (str): [optional]
                path ([str]): [optional]
                service_ranking (int): [optional]
                idp_url (str): [optional]
                idp_cert_alias (str): [optional]
                idp_http_redirect (bool): [optional]
                service_provider_entity_id (str): [optional]
                assertion_consumer_service_url (str): [optional]
                sp_private_key_alias (str): [optional]
                key_store_password (str): [optional]
                default_redirect_url (str): [optional]
                user_id_attribute (str): [optional]
                use_encryption (bool): [optional]
                create_user (bool): [optional]
                add_group_memberships (bool): [optional]
                group_membership_attribute (str): [optional]
                default_groups ([str]): [optional]
                name_id_format (str): [optional]
                synchronize_attributes ([str]): [optional]
                handle_logout (bool): [optional]
                logout_url (str): [optional]
                clock_tolerance (int): [optional]
                digest_method (str): [optional]
                signature_method (str): [optional]
                user_intermediate_path (str): [optional]
                propertylist ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SamlConfigurationInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_saml_configuration = Endpoint(
            settings={
                'response_type': (SamlConfigurationInfo,),
                'auth': [
                    'aemAuth'
                ],
                'endpoint_path': '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler',
                'operation_id': 'post_saml_configuration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'post',
                    'apply',
                    'delete',
                    'action',
                    'location',
                    'path',
                    'service_ranking',
                    'idp_url',
                    'idp_cert_alias',
                    'idp_http_redirect',
                    'service_provider_entity_id',
                    'assertion_consumer_service_url',
                    'sp_private_key_alias',
                    'key_store_password',
                    'default_redirect_url',
                    'user_id_attribute',
                    'use_encryption',
                    'create_user',
                    'add_group_memberships',
                    'group_membership_attribute',
                    'default_groups',
                    'name_id_format',
                    'synchronize_attributes',
                    'handle_logout',
                    'logout_url',
                    'clock_tolerance',
                    'digest_method',
                    'signature_method',
                    'user_intermediate_path',
                    'propertylist',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'post':
                        (bool,),
                    'apply':
                        (bool,),
                    'delete':
                        (bool,),
                    'action':
                        (str,),
                    'location':
                        (str,),
                    'path':
                        ([str],),
                    'service_ranking':
                        (int,),
                    'idp_url':
                        (str,),
                    'idp_cert_alias':
                        (str,),
                    'idp_http_redirect':
                        (bool,),
                    'service_provider_entity_id':
                        (str,),
                    'assertion_consumer_service_url':
                        (str,),
                    'sp_private_key_alias':
                        (str,),
                    'key_store_password':
                        (str,),
                    'default_redirect_url':
                        (str,),
                    'user_id_attribute':
                        (str,),
                    'use_encryption':
                        (bool,),
                    'create_user':
                        (bool,),
                    'add_group_memberships':
                        (bool,),
                    'group_membership_attribute':
                        (str,),
                    'default_groups':
                        ([str],),
                    'name_id_format':
                        (str,),
                    'synchronize_attributes':
                        ([str],),
                    'handle_logout':
                        (bool,),
                    'logout_url':
                        (str,),
                    'clock_tolerance':
                        (int,),
                    'digest_method':
                        (str,),
                    'signature_method':
                        (str,),
                    'user_intermediate_path':
                        (str,),
                    'propertylist':
                        ([str],),
                },
                'attribute_map': {
                    'post': 'post',
                    'apply': 'apply',
                    'delete': 'delete',
                    'action': 'action',
                    'location': '$location',
                    'path': 'path',
                    'service_ranking': 'service.ranking',
                    'idp_url': 'idpUrl',
                    'idp_cert_alias': 'idpCertAlias',
                    'idp_http_redirect': 'idpHttpRedirect',
                    'service_provider_entity_id': 'serviceProviderEntityId',
                    'assertion_consumer_service_url': 'assertionConsumerServiceURL',
                    'sp_private_key_alias': 'spPrivateKeyAlias',
                    'key_store_password': 'keyStorePassword',
                    'default_redirect_url': 'defaultRedirectUrl',
                    'user_id_attribute': 'userIDAttribute',
                    'use_encryption': 'useEncryption',
                    'create_user': 'createUser',
                    'add_group_memberships': 'addGroupMemberships',
                    'group_membership_attribute': 'groupMembershipAttribute',
                    'default_groups': 'defaultGroups',
                    'name_id_format': 'nameIdFormat',
                    'synchronize_attributes': 'synchronizeAttributes',
                    'handle_logout': 'handleLogout',
                    'logout_url': 'logoutUrl',
                    'clock_tolerance': 'clockTolerance',
                    'digest_method': 'digestMethod',
                    'signature_method': 'signatureMethod',
                    'user_intermediate_path': 'userIntermediatePath',
                    'propertylist': 'propertylist',
                },
                'location_map': {
                    'post': 'query',
                    'apply': 'query',
                    'delete': 'query',
                    'action': 'query',
                    'location': 'query',
                    'path': 'query',
                    'service_ranking': 'query',
                    'idp_url': 'query',
                    'idp_cert_alias': 'query',
                    'idp_http_redirect': 'query',
                    'service_provider_entity_id': 'query',
                    'assertion_consumer_service_url': 'query',
                    'sp_private_key_alias': 'query',
                    'key_store_password': 'query',
                    'default_redirect_url': 'query',
                    'user_id_attribute': 'query',
                    'use_encryption': 'query',
                    'create_user': 'query',
                    'add_group_memberships': 'query',
                    'group_membership_attribute': 'query',
                    'default_groups': 'query',
                    'name_id_format': 'query',
                    'synchronize_attributes': 'query',
                    'handle_logout': 'query',
                    'logout_url': 'query',
                    'clock_tolerance': 'query',
                    'digest_method': 'query',
                    'signature_method': 'query',
                    'user_intermediate_path': 'query',
                    'propertylist': 'query',
                },
                'collection_format_map': {
                    'path': 'multi',
                    'default_groups': 'multi',
                    'synchronize_attributes': 'multi',
                    'propertylist': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_saml_configuration
        )
