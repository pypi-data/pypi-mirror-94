[tool.poetry]
name = "flake8_assert_check"
version = "0.1"
description = "Plugin for flake8 that checks for asserts in tests."
authors = [
  "netqa GmbH <contact@netqa.de>",
]

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.dev-dependencies]
pre-commit = "2.10.0"
pytest = "6.2.2"
pytest-cov = "2.11.1"
pytest-mock = "3.3.1"
pytest-watch = "4.2.0"
pytest-testmon = "1.0.3"
pytest-randomly = "3.5.0"
hypothesis = "5.43.3"
mypy = "0.790"
towncrier = "19.2"
taskipy = "1.5.1"
aiohttp-theme = "0.1.6"
sphinx = "3.3.1"
sphinxcontrib-spelling = { version="7.1.0", markers = "sys_platform != 'win32'" }
sphinx-autobuild = "2020.9.1"
tomlkit = "0.7.0"
publiqa-ci-release = "0.1.0"

[[tool.poetry.source]]
name = "netqa-dev"
url = "https://pypi.devnet.netqa.de/netqa/dev/+simple"
secondary = true

[tool.taskipy.tasks]
setup = "poetry install && python devops/setup.py && pre-commit install -t pre-commit -t commit-msg --install-hooks && git submodule update --init --recursive"
test = "pytest --cov=flake8_assert_check --cov-branch --cov-report=term-missing --cov-fail-under=100 --doctest-modules"
test-watch = '''pytest-watch --runner="pytest --doctest-modules --testmon" --onfail="notify-send --urgency=low -i error 'Tests Failed'" --onpass="notify-send --urgency=low -i info 'Tests passed'"'''
lint = "pre-commit run --all-files"
docs-links = "sphinx-build -EWanb linkcheck doc/ build/"
docs-spelling = "sphinx-build -EWanb spelling doc/ build/"
docs-build = "sphinx-build -Eanb html doc/ build/"
docs-dev = "sphinx-autobuild doc/ build/"
docs = "task docs-links && task docs-spelling && task docs-build"
release = "release"

[tool.towncrier]
package = "flake8_assert_check"
directory="newsfragments"
filename = "CHANGELOG.rst"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true
force_grid_wrap = 0
line_length = 88
extra_standard_library = ["graphlib"]
known_third_party = ["_pytest", "attr", "click", "hypothesis", "pluggy", "py", "pytest", "pytest_mock", "setuptools", "setuptools_scm", "tomlkit", "pydantic", "glom", "sentry_sdk"]
known_first_party = ["publiqa", "flake8_assert_check"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "return NotImplemented",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "if sys.version_info",
]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:.*which is reset between function calls but not between test cases generated.*:hypothesis.errors.HypothesisDeprecationWarning:",
]
junit_family = "xunit2"
testpaths = [
    "tests",
]

[build-system]
requires = ["poetry-core>=1.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
"flake8.extension" = "FCA=flake8_assert_check:Plugin"
