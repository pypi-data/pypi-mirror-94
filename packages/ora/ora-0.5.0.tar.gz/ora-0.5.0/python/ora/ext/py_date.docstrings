#-*- python -*-

type = """
A calendar date.

In a specific location, a calendar date corresponds to a period usually, but
not always, 24 hours long.  A calendar date by itself does not represent any
specific time or interval of time.

An object of this date class can represent any date between %2$s and %3$s,
inclusive.

# Constructor

Construct a `%1$s` instance with any of these:

- An instance of `%1$s`.
- An instance of another date type.
- The strings `\"MIN\"` or `\"MAX\"`.
- An ISO-8859-formatted date string, e.g. `\"1989-12-31\"`.
- Two arguments or a two-element sequence (year, ordinal day).
- Two arguments or a three-element sequence (year, month, day).
- A YYYYMMDD-encoded integer.
- With no arguments; the value is `INVALID`.

The following all construct the same date:

  >>> %1$s(2004, 11, 2)
  %1$s(2004, 11, 2)
  >>> %1$s([2004, 11, 2])
  %1$s(2004, 11, 2)
  >>> %1$s(%1$s(2004, 11, 2))
  %1$s(2004, 11, 2)
  >>> %1$s(2004, 307)
  %1$s(2004, 11, 2)
  >>> %1$s([2004, 307])
  %1$s(2004, 11, 2)
  >>> %1$s(20041102)
  %1$s(2004, 11, 2)
  >>> %1$s(\"2004-11-02\")
  %1$s(2004, 11, 2)

Call `ora.today()` to get the current date in a time zone.

# Exceptions

Methods may raise these exceptions:

- `TypeError`: The number of arguments is wrong, or an arguments could not
  be converted to the right type.
- `ValueError`: An argument's value is invalid, e.g. month number 15.
- `OverflowError`: The method produced a date that is out of range for
  `%1$s`.

@cvar MIN
  The earliest date representable by this class.

    >>> Date.MIN - 1
    Traceback (most recent call last):
      ...
    OverflowError: date not in range

@cvar MAX
  The latest date representable by this class.

    >>> Date.MAX + 1
    Traceback (most recent call last):
      ...
    OverflowError: date not in range

@cvar INVALID
  A special value indicating an invalid date.  

  Operations that fail to produce a date, or produce a date that is not
  representable by this class, may return this value.

@cvar MISSING
  A special value indicating a missing date.

"""

datenum = """
The _datenum_ of this date.

  >>> Date(2004, 11, 2).datenum
  731886

"""

day = """
The day of the month.
"""

from_datenum = """
Constructs a date from a _datenum_.

  >>> Date.from_datenum(731886)
  Date(2004, Nov, 2)

@signature
  from_datenum(datenum)

"""

from_iso_date = """
Constructs a date from an ISO-formatted date string.

  >>> Date.from_iso_date(\"2014-11-02\")
  Date(2014, Nov, 2)

@signature
  from_iso_date(iso_date)

"""

from_offset = """
Constructs a date from an offset.

The offset is an implementation detail of the type.

@signature
  from_offset(offset)
@raise ValueError
  `offset` is not a valid offset.

"""
from_ordinal_date = """

Constructs a date from an ordinal date.

  >>> Date.from_ordinal_date(2000, 1)
  Date(2000, Jan, 1)
  >>> Date.from_ordinal_date(2004, 307)
  Date(2004, Nov, 2)

The year and ordinal may also be given as a two-element sequence.

  >>> Date.from_ordinal_date([2004, 307])
  Date(2004, Nov, 2)

@signature
  from_ordinal_date(year, ordinal)
@param ordinal
  The one-indexed day ordinal within the year.

"""

from_week_date = """
Constructs a date from an ISO-8601 week date.

  >>> Date.from_week_date(2004, 45, Tue)
  Date(2004, Nov, 2)

The components may also be given as a three-element sequence.

  >>> Date.from_week_date([2004, 45, Tue])
  Date(2004, Nov, 2)

:warning: The week year is not the same as the ordinary year; see 
`ora.date`.

@signature
  from_week_date(week_year, week, weekday)

"""

from_ymd = """
Constructs a date from a year, month, and day.

  >>> Date.from_ymd(2004, Nov, 2)
  Date(2004, Nov, 2)

The components may also be given as a three-element sequence.

  >>> Date.from_ymd([2004, Nov, 2])
  Date(2004, Nov, 2)

@signature
  from_ymd(year, month, day)

"""

from_ymdi = """
Constructs a date from a _YMDI_ (YYYYMMDD-encoded integer).

  >>> Date.from_ymdi(20041102)
  Date(2004, Nov, 2)

@signature
  from_ymdi(ymdi)
@type ymdi
  `int`

"""

invalid = """
True if this is `INVALID`.
"""

missing = """
True if this is `MISSING`.
"""

month = """
The calendar month of which this date is part.
"""

offset = """
The type-specific offset used as the internal representation of this date.
"""

ordinal = """
The ordinal date: the 1-indexed day of the year.
"""

ordinal_date = """
A (year, ordinal) object representing the ordinal date.
"""

std = """
The date as a Python standard library `datetime.date`.
"""

valid = """
True if this date is not `MISSING` or `INVALID`.
"""

week = """
The week number of the ISO-8601 week date.
"""

week_date = """
A (week_year, week, weekday) object containing the ISO-8601 week date.
"""

week_year = """
The year of the ISO-8601 week date.

Note that this is not necessarily the same as the ordinary `year`.
"""

weekday = """
The day of the week.
"""

year = """
The year.

This is the year of the conventional (year, month, day) representation,
not of the ISO-8601 week date representation.
"""

ymdi = """
The date as a _YMDI_ (YYYYMMDD-encoded integer).
"""

ymd = """
An object containing the (year, month, day) date components.
"""

