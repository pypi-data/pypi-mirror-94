#-*- python -*-

type = """
A time of day.

An object of this daytime class can represent a time of day with approximately
%2$.1e second precision.

The conventional daytime representation uses `int` hours in [0, 59], `int`
minutes in [0, 59], and `float` seconds in [0, 60).

# Constructor

Construct a `%1$s` instance with any of these:

- An instance of `%1$s`.
- An instance of another daytime type.
- The hour, minute, and second parts, as three arguments or a sequence.
- The hour and minute, as two arguments or a sequence.
- A double value, as _seconds since midnight_ (SSM).
- With no arguments, which constructs the value is `INVALID`.

@cvar DENOMINATOR
  One divided by the resolution in seconds.
@cvar RESOLUTION
  The approximate time resolution in seconds.
@cvar MIN
  The earliest daytime representable by this class.

    >>> Daytime.MIN - Daytime.RESOLUTION
    Traceback (most recent call last):
      ...
    OverflowError: daytime not in range

@cvar MAX
  The latest daytime representable by this class.

    >>> Daytime.MAX + Daytime.RESOLUTION
    Traceback (most recent call last):
      ...
    OverflowError: daytime not in range

@cvar MIDNIGHT
  The daytime representing midnight, the start of the day.

@cvar INVALID
  A special value indicating an invalid daytime.  

  Operations that fail to produce a daytime, or produce a daytime that is not
  representable by this class, may return this value.

@cvar MISSING
  A special value indicating a missing daytime.
"""

from_daytick = """
Constructs a daytime from _dayticks_.

  >>> Daytime.from_daytick(6333186975989760000)
  Daytime(12, 30, 0.000000000000000)

@signature
  from_daytick(daytick)
@see
  `ora.daytime`.
"""

from_hms = """
Constructs a daytime from hour, minute, and second.

May be called with two or three arguments.
  >>> Daytime.from_hms(12, 30)
  Daytime(12, 30, 0.000000000000000)
  >>> Daytime.from_hms(12, 30, 10)
  Daytime(12, 30, 10.000000000000000)
  >>> Daytime.from_hms(12, 30, 45.6)
  Daytime(12, 30, 45.600000000000000)

May also be called with a three-element sequence.

  >>> Daytime.from_hms([12, 30, 45.6])
  Daytime(12, 30, 45.600000000000000)

@signature
  from_hms(hour, minute, second=0)

"""

from_hmsf = """
Constructs a daytime from a _HMSF_ (HHMMSS.xxx-encoded value).

  >>> Daytime.from_hmsf(123456.78)
  Daytime(12, 34, 56.7800000000000000)

@signature
  from_hmsf(hmsf)
"""

from_ssm = """
Constructs a daytime from _seconds since midnight_ (SSM).

  >>> Daytime.from_ssm(12 * 60 * 60)
  Daytime(12, 0, 0.000000000000000)
  >>> Daytime.from_ssm(12345.678)
  Daytime(3, 25, 45.677999999999880)

@signature
  from_ssm(ssm: float)
@see
  `ora.daytime`.

"""

daytick = """
The _daytick_, the number of 2**-47 second ticks since midnight.

  >>> Daytime(0, 0, 0).daytick
  0
  >>> Daytime(0, 0, 1).daytick
  140737488355328

"""

hms = """
The hour, minute, and second components.

The value is a three-element sequence; the components may also be accessed as
attributes.

  >>> daytime = Daytime(12, 30, 45)
  >>> daytime.hms
  HmsDaytime(hour=12, minute=30, second=45.0)
  >>> h, m, s = daytime.hms

"""

hour = """
The hour of the hour, minute, second representation.

  >>> Daytime.MIDNIGHT.hour
  0
  >>> Daytime.MAX.hour
  23

"""

invalid = """
True if this is `INVALID`.
"""

minute = """
The minute of the hour, minute, second representation.

  >>> Daytime.MIDNIGHT.minute
  0
  >>> Daytime.MAX.minute
  59

"""

missing = """
True if this is `MISSING`.
"""

second = """
The second of the hour, minute, second representation.

  >>> Daytime.MIDNIGHT.second
  0
  >>> Daytime.MAX.second
  59

"""

offset = """
"""

std = """
The daytime as a Python standard library `datetime.time`.
"""

ssm = """
The _seconds since midnight_ (SSM) representation.

The value is a `float`.

  >>> Daytime.MIDNIGHT.ssm
  0.0
  >>> round(Daytime.MAX.ssm, 2)
  86400.0

"""

valid = """
True if not `MISSING` or `INVALID`.
"""

