# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


def swig_import_helper():
    import importlib
    pkg = __name__.rpartition('.')[0]
    mname = '.'.join((pkg, 'libwallycore')).lstrip('.')
    try:
        return importlib.import_module(mname)
    except ImportError:
        return importlib.import_module('libwallycore')
libwallycore = swig_import_helper()
del swig_import_helper

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

WALLY_OK = libwallycore.WALLY_OK
WALLY_ERROR = libwallycore.WALLY_ERROR
WALLY_EINVAL = libwallycore.WALLY_EINVAL
WALLY_ENOMEM = libwallycore.WALLY_ENOMEM

def init(flags):
    return libwallycore.init(flags)
init = libwallycore.init

def cleanup(flags):
    return libwallycore.cleanup(flags)
cleanup = libwallycore.cleanup

def bzero(bytes, bytes_len):
    return libwallycore.bzero(bytes, bytes_len)
bzero = libwallycore.bzero

def free_string(str):
    return libwallycore.free_string(str)
free_string = libwallycore.free_string
WALLY_SECP_RANDOMIZE_LEN = libwallycore.WALLY_SECP_RANDOMIZE_LEN

def secp_randomize(bytes):
    return libwallycore.secp_randomize(bytes)
secp_randomize = libwallycore.secp_randomize

def hex_from_bytes(bytes):
    return libwallycore.hex_from_bytes(bytes)
hex_from_bytes = libwallycore.hex_from_bytes

def hex_to_bytes(hex, bytes_out):
    return libwallycore.hex_to_bytes(hex, bytes_out)
hex_to_bytes = libwallycore.hex_to_bytes
BASE58_FLAG_CHECKSUM = libwallycore.BASE58_FLAG_CHECKSUM
BASE58_CHECKSUM_LEN = libwallycore.BASE58_CHECKSUM_LEN

def base58_from_bytes(bytes, flags):
    return libwallycore.base58_from_bytes(bytes, flags)
base58_from_bytes = libwallycore.base58_from_bytes

def base58_to_bytes(str_in, flags, bytes_out):
    return libwallycore.base58_to_bytes(str_in, flags, bytes_out)
base58_to_bytes = libwallycore.base58_to_bytes

def base58_get_length(str_in):
    return libwallycore.base58_get_length(str_in)
base58_get_length = libwallycore.base58_get_length

def base64_from_bytes(bytes, flags):
    return libwallycore.base64_from_bytes(bytes, flags)
base64_from_bytes = libwallycore.base64_from_bytes

def base64_to_bytes(str_in, flags, bytes_out):
    return libwallycore.base64_to_bytes(str_in, flags, bytes_out)
base64_to_bytes = libwallycore.base64_to_bytes

def base64_get_maximum_length(str_in, flags):
    return libwallycore.base64_get_maximum_length(str_in, flags)
base64_get_maximum_length = libwallycore.base64_get_maximum_length

def is_elements_build():
    return libwallycore.is_elements_build()
is_elements_build = libwallycore.is_elements_build
WALLY_WIF_FLAG_COMPRESSED = libwallycore.WALLY_WIF_FLAG_COMPRESSED
WALLY_WIF_FLAG_UNCOMPRESSED = libwallycore.WALLY_WIF_FLAG_UNCOMPRESSED
WALLY_CA_PREFIX_LIQUID = libwallycore.WALLY_CA_PREFIX_LIQUID
WALLY_CA_PREFIX_LIQUID_REGTEST = libwallycore.WALLY_CA_PREFIX_LIQUID_REGTEST
WALLY_NETWORK_BITCOIN_MAINNET = libwallycore.WALLY_NETWORK_BITCOIN_MAINNET
WALLY_NETWORK_BITCOIN_TESTNET = libwallycore.WALLY_NETWORK_BITCOIN_TESTNET
WALLY_NETWORK_LIQUID = libwallycore.WALLY_NETWORK_LIQUID
WALLY_NETWORK_LIQUID_REGTEST = libwallycore.WALLY_NETWORK_LIQUID_REGTEST
WALLY_ADDRESS_TYPE_P2PKH = libwallycore.WALLY_ADDRESS_TYPE_P2PKH
WALLY_ADDRESS_TYPE_P2SH_P2WPKH = libwallycore.WALLY_ADDRESS_TYPE_P2SH_P2WPKH
WALLY_ADDRESS_TYPE_P2WPKH = libwallycore.WALLY_ADDRESS_TYPE_P2WPKH
WALLY_ADDRESS_VERSION_P2PKH_MAINNET = libwallycore.WALLY_ADDRESS_VERSION_P2PKH_MAINNET
WALLY_ADDRESS_VERSION_P2PKH_TESTNET = libwallycore.WALLY_ADDRESS_VERSION_P2PKH_TESTNET
WALLY_ADDRESS_VERSION_P2PKH_LIQUID = libwallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID
WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST = libwallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST
WALLY_ADDRESS_VERSION_P2SH_MAINNET = libwallycore.WALLY_ADDRESS_VERSION_P2SH_MAINNET
WALLY_ADDRESS_VERSION_P2SH_TESTNET = libwallycore.WALLY_ADDRESS_VERSION_P2SH_TESTNET
WALLY_ADDRESS_VERSION_P2SH_LIQUID = libwallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID
WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST = libwallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST
WALLY_ADDRESS_VERSION_WIF_MAINNET = libwallycore.WALLY_ADDRESS_VERSION_WIF_MAINNET
WALLY_ADDRESS_VERSION_WIF_TESTNET = libwallycore.WALLY_ADDRESS_VERSION_WIF_TESTNET

def addr_segwit_from_bytes(bytes, addr_family, flags):
    return libwallycore.addr_segwit_from_bytes(bytes, addr_family, flags)
addr_segwit_from_bytes = libwallycore.addr_segwit_from_bytes

def addr_segwit_to_bytes(addr, addr_family, flags, bytes_out):
    return libwallycore.addr_segwit_to_bytes(addr, addr_family, flags, bytes_out)
addr_segwit_to_bytes = libwallycore.addr_segwit_to_bytes

def address_to_scriptpubkey(addr, network, bytes_out):
    return libwallycore.address_to_scriptpubkey(addr, network, bytes_out)
address_to_scriptpubkey = libwallycore.address_to_scriptpubkey

def scriptpubkey_to_address(scriptpubkey, network):
    return libwallycore.scriptpubkey_to_address(scriptpubkey, network)
scriptpubkey_to_address = libwallycore.scriptpubkey_to_address

def wif_from_bytes(priv_key, prefix, flags):
    return libwallycore.wif_from_bytes(priv_key, prefix, flags)
wif_from_bytes = libwallycore.wif_from_bytes

def wif_to_bytes(wif, prefix, flags, bytes_out):
    return libwallycore.wif_to_bytes(wif, prefix, flags, bytes_out)
wif_to_bytes = libwallycore.wif_to_bytes

def wif_is_uncompressed(wif):
    return libwallycore.wif_is_uncompressed(wif)
wif_is_uncompressed = libwallycore.wif_is_uncompressed

def wif_to_public_key(wif, prefix, bytes_out):
    return libwallycore.wif_to_public_key(wif, prefix, bytes_out)
wif_to_public_key = libwallycore.wif_to_public_key

def bip32_key_to_address(hdkey, flags, version):
    return libwallycore.bip32_key_to_address(hdkey, flags, version)
bip32_key_to_address = libwallycore.bip32_key_to_address

def bip32_key_to_addr_segwit(hdkey, addr_family, flags):
    return libwallycore.bip32_key_to_addr_segwit(hdkey, addr_family, flags)
bip32_key_to_addr_segwit = libwallycore.bip32_key_to_addr_segwit

def wif_to_address(wif, prefix, version):
    return libwallycore.wif_to_address(wif, prefix, version)
wif_to_address = libwallycore.wif_to_address

def confidential_addr_to_addr(address, prefix):
    return libwallycore.confidential_addr_to_addr(address, prefix)
confidential_addr_to_addr = libwallycore.confidential_addr_to_addr

def confidential_addr_to_ec_public_key(address, prefix, bytes_out):
    return libwallycore.confidential_addr_to_ec_public_key(address, prefix, bytes_out)
confidential_addr_to_ec_public_key = libwallycore.confidential_addr_to_ec_public_key

def confidential_addr_from_addr(address, prefix, pub_key):
    return libwallycore.confidential_addr_from_addr(address, prefix, pub_key)
confidential_addr_from_addr = libwallycore.confidential_addr_from_addr

def confidential_addr_to_addr_segwit(address, confidential_addr_family, addr_family):
    return libwallycore.confidential_addr_to_addr_segwit(address, confidential_addr_family, addr_family)
confidential_addr_to_addr_segwit = libwallycore.confidential_addr_to_addr_segwit

def confidential_addr_segwit_to_ec_public_key(address, confidential_addr_family, bytes_out):
    return libwallycore.confidential_addr_segwit_to_ec_public_key(address, confidential_addr_family, bytes_out)
confidential_addr_segwit_to_ec_public_key = libwallycore.confidential_addr_segwit_to_ec_public_key

def confidential_addr_from_addr_segwit(address, addr_family, confidential_addr_family, pub_key):
    return libwallycore.confidential_addr_from_addr_segwit(address, addr_family, confidential_addr_family, pub_key)
confidential_addr_from_addr_segwit = libwallycore.confidential_addr_from_addr_segwit
WALLY_HOST_COMMITMENT_LEN = libwallycore.WALLY_HOST_COMMITMENT_LEN

def ae_host_commit_from_bytes(entropy, flags, bytes_out):
    return libwallycore.ae_host_commit_from_bytes(entropy, flags, bytes_out)
ae_host_commit_from_bytes = libwallycore.ae_host_commit_from_bytes

def ae_signer_commit_from_bytes(priv_key, bytes, commitment, flags, s2c_opening_out):
    return libwallycore.ae_signer_commit_from_bytes(priv_key, bytes, commitment, flags, s2c_opening_out)
ae_signer_commit_from_bytes = libwallycore.ae_signer_commit_from_bytes

def ae_sig_from_bytes(priv_key, bytes, entropy, flags, bytes_out):
    return libwallycore.ae_sig_from_bytes(priv_key, bytes, entropy, flags, bytes_out)
ae_sig_from_bytes = libwallycore.ae_sig_from_bytes

def ae_verify(pub_key, bytes, entropy, s2c_opening, flags, sig):
    return libwallycore.ae_verify(pub_key, bytes, entropy, s2c_opening, flags, sig)
ae_verify = libwallycore.ae_verify
BIP32_ENTROPY_LEN_128 = libwallycore.BIP32_ENTROPY_LEN_128
BIP32_ENTROPY_LEN_256 = libwallycore.BIP32_ENTROPY_LEN_256
BIP32_ENTROPY_LEN_512 = libwallycore.BIP32_ENTROPY_LEN_512
BIP32_KEY_FINGERPRINT_LEN = libwallycore.BIP32_KEY_FINGERPRINT_LEN
BIP32_SERIALIZED_LEN = libwallycore.BIP32_SERIALIZED_LEN
BIP32_INITIAL_HARDENED_CHILD = libwallycore.BIP32_INITIAL_HARDENED_CHILD
BIP32_FLAG_KEY_PRIVATE = libwallycore.BIP32_FLAG_KEY_PRIVATE
BIP32_FLAG_KEY_PUBLIC = libwallycore.BIP32_FLAG_KEY_PUBLIC
BIP32_FLAG_SKIP_HASH = libwallycore.BIP32_FLAG_SKIP_HASH
BIP32_FLAG_KEY_TWEAK_SUM = libwallycore.BIP32_FLAG_KEY_TWEAK_SUM
BIP32_VER_MAIN_PUBLIC = libwallycore.BIP32_VER_MAIN_PUBLIC
BIP32_VER_MAIN_PRIVATE = libwallycore.BIP32_VER_MAIN_PRIVATE
BIP32_VER_TEST_PUBLIC = libwallycore.BIP32_VER_TEST_PUBLIC
BIP32_VER_TEST_PRIVATE = libwallycore.BIP32_VER_TEST_PRIVATE

def bip32_key_free(hdkey):
    return libwallycore.bip32_key_free(hdkey)
bip32_key_free = libwallycore.bip32_key_free

def bip32_key_init(version, depth, child_num, chain_code, pub_key, priv_key, hash160, parent160):
    return libwallycore.bip32_key_init(version, depth, child_num, chain_code, pub_key, priv_key, hash160, parent160)
bip32_key_init = libwallycore.bip32_key_init

def bip32_key_from_seed(bytes, version, flags):
    return libwallycore.bip32_key_from_seed(bytes, version, flags)
bip32_key_from_seed = libwallycore.bip32_key_from_seed

def bip32_key_serialize(hdkey, flags, bytes_out):
    return libwallycore.bip32_key_serialize(hdkey, flags, bytes_out)
bip32_key_serialize = libwallycore.bip32_key_serialize

def bip32_key_unserialize(bytes):
    return libwallycore.bip32_key_unserialize(bytes)
bip32_key_unserialize = libwallycore.bip32_key_unserialize

def bip32_key_from_parent(hdkey, child_num, flags):
    return libwallycore.bip32_key_from_parent(hdkey, child_num, flags)
bip32_key_from_parent = libwallycore.bip32_key_from_parent

def bip32_key_from_parent_path(hdkey, child_path, flags):
    return libwallycore.bip32_key_from_parent_path(hdkey, child_path, flags)
bip32_key_from_parent_path = libwallycore.bip32_key_from_parent_path

def bip32_key_with_tweak_from_parent_path(hdkey, child_path, flags):
    return libwallycore.bip32_key_with_tweak_from_parent_path(hdkey, child_path, flags)
bip32_key_with_tweak_from_parent_path = libwallycore.bip32_key_with_tweak_from_parent_path

def bip32_key_to_base58(hdkey, flags):
    return libwallycore.bip32_key_to_base58(hdkey, flags)
bip32_key_to_base58 = libwallycore.bip32_key_to_base58

def bip32_key_from_base58(base58):
    return libwallycore.bip32_key_from_base58(base58)
bip32_key_from_base58 = libwallycore.bip32_key_from_base58

def bip32_key_strip_private_key(hdkey):
    return libwallycore.bip32_key_strip_private_key(hdkey)
bip32_key_strip_private_key = libwallycore.bip32_key_strip_private_key

def bip32_key_get_fingerprint(hdkey, bytes_out):
    return libwallycore.bip32_key_get_fingerprint(hdkey, bytes_out)
bip32_key_get_fingerprint = libwallycore.bip32_key_get_fingerprint
LIBWALLY_CORE_BIP32_INT_H = libwallycore.LIBWALLY_CORE_BIP32_INT_H

def bip32_key_get_chain_code(hdkey, bytes_out):
    return libwallycore.bip32_key_get_chain_code(hdkey, bytes_out)
bip32_key_get_chain_code = libwallycore.bip32_key_get_chain_code

def bip32_key_get_parent160(hdkey, bytes_out):
    return libwallycore.bip32_key_get_parent160(hdkey, bytes_out)
bip32_key_get_parent160 = libwallycore.bip32_key_get_parent160

def bip32_key_get_priv_key(hdkey, bytes_out):
    return libwallycore.bip32_key_get_priv_key(hdkey, bytes_out)
bip32_key_get_priv_key = libwallycore.bip32_key_get_priv_key

def bip32_key_get_hash160(hdkey, bytes_out):
    return libwallycore.bip32_key_get_hash160(hdkey, bytes_out)
bip32_key_get_hash160 = libwallycore.bip32_key_get_hash160

def bip32_key_get_pub_key(hdkey, bytes_out):
    return libwallycore.bip32_key_get_pub_key(hdkey, bytes_out)
bip32_key_get_pub_key = libwallycore.bip32_key_get_pub_key

def bip32_key_get_pub_key_tweak_sum(hdkey, bytes_out):
    return libwallycore.bip32_key_get_pub_key_tweak_sum(hdkey, bytes_out)
bip32_key_get_pub_key_tweak_sum = libwallycore.bip32_key_get_pub_key_tweak_sum

def bip32_key_get_depth(hdkey):
    return libwallycore.bip32_key_get_depth(hdkey)
bip32_key_get_depth = libwallycore.bip32_key_get_depth

def bip32_key_get_child_num(hdkey):
    return libwallycore.bip32_key_get_child_num(hdkey)
bip32_key_get_child_num = libwallycore.bip32_key_get_child_num

def bip32_key_get_version(hdkey):
    return libwallycore.bip32_key_get_version(hdkey)
bip32_key_get_version = libwallycore.bip32_key_get_version
BIP38_KEY_MAINNET = libwallycore.BIP38_KEY_MAINNET
BIP38_KEY_TESTNET = libwallycore.BIP38_KEY_TESTNET
BIP38_KEY_COMPRESSED = libwallycore.BIP38_KEY_COMPRESSED
BIP38_KEY_EC_MULT = libwallycore.BIP38_KEY_EC_MULT
BIP38_KEY_QUICK_CHECK = libwallycore.BIP38_KEY_QUICK_CHECK
BIP38_KEY_RAW_MODE = libwallycore.BIP38_KEY_RAW_MODE
BIP38_KEY_SWAP_ORDER = libwallycore.BIP38_KEY_SWAP_ORDER
BIP38_SERIALIZED_LEN = libwallycore.BIP38_SERIALIZED_LEN

def bip38_raw_from_private_key(bytes, arg2, flags, bytes_out):
    return libwallycore.bip38_raw_from_private_key(bytes, arg2, flags, bytes_out)
bip38_raw_from_private_key = libwallycore.bip38_raw_from_private_key

def bip38_from_private_key(bytes, arg2, flags):
    return libwallycore.bip38_from_private_key(bytes, arg2, flags)
bip38_from_private_key = libwallycore.bip38_from_private_key

def bip38_raw_to_private_key(bytes, arg2, flags, bytes_out):
    return libwallycore.bip38_raw_to_private_key(bytes, arg2, flags, bytes_out)
bip38_raw_to_private_key = libwallycore.bip38_raw_to_private_key

def bip38_to_private_key(bip38, arg2, flags, bytes_out):
    return libwallycore.bip38_to_private_key(bip38, arg2, flags, bytes_out)
bip38_to_private_key = libwallycore.bip38_to_private_key

def bip38_raw_get_flags(bytes):
    return libwallycore.bip38_raw_get_flags(bytes)
bip38_raw_get_flags = libwallycore.bip38_raw_get_flags

def bip38_get_flags(bip38):
    return libwallycore.bip38_get_flags(bip38)
bip38_get_flags = libwallycore.bip38_get_flags
BIP39_ENTROPY_LEN_128 = libwallycore.BIP39_ENTROPY_LEN_128
BIP39_ENTROPY_LEN_160 = libwallycore.BIP39_ENTROPY_LEN_160
BIP39_ENTROPY_LEN_192 = libwallycore.BIP39_ENTROPY_LEN_192
BIP39_ENTROPY_LEN_224 = libwallycore.BIP39_ENTROPY_LEN_224
BIP39_ENTROPY_LEN_256 = libwallycore.BIP39_ENTROPY_LEN_256
BIP39_ENTROPY_LEN_288 = libwallycore.BIP39_ENTROPY_LEN_288
BIP39_ENTROPY_LEN_320 = libwallycore.BIP39_ENTROPY_LEN_320
BIP39_SEED_LEN_512 = libwallycore.BIP39_SEED_LEN_512
BIP39_WORDLIST_LEN = libwallycore.BIP39_WORDLIST_LEN

def bip39_get_languages():
    return libwallycore.bip39_get_languages()
bip39_get_languages = libwallycore.bip39_get_languages

def bip39_get_wordlist(lang):
    return libwallycore.bip39_get_wordlist(lang)
bip39_get_wordlist = libwallycore.bip39_get_wordlist

def bip39_get_word(w, index):
    return libwallycore.bip39_get_word(w, index)
bip39_get_word = libwallycore.bip39_get_word

def bip39_mnemonic_from_bytes(w, bytes):
    return libwallycore.bip39_mnemonic_from_bytes(w, bytes)
bip39_mnemonic_from_bytes = libwallycore.bip39_mnemonic_from_bytes

def bip39_mnemonic_to_bytes(w, mnemonic, bytes_out):
    return libwallycore.bip39_mnemonic_to_bytes(w, mnemonic, bytes_out)
bip39_mnemonic_to_bytes = libwallycore.bip39_mnemonic_to_bytes

def bip39_mnemonic_validate(w, mnemonic):
    return libwallycore.bip39_mnemonic_validate(w, mnemonic)
bip39_mnemonic_validate = libwallycore.bip39_mnemonic_validate

def bip39_mnemonic_to_seed(mnemonic, passphrase, bytes_out):
    return libwallycore.bip39_mnemonic_to_seed(mnemonic, passphrase, bytes_out)
bip39_mnemonic_to_seed = libwallycore.bip39_mnemonic_to_seed

def scrypt(arg1, salt, cost, block_size, parallelism, bytes_out):
    return libwallycore.scrypt(arg1, salt, cost, block_size, parallelism, bytes_out)
scrypt = libwallycore.scrypt
AES_BLOCK_LEN = libwallycore.AES_BLOCK_LEN
AES_KEY_LEN_128 = libwallycore.AES_KEY_LEN_128
AES_KEY_LEN_192 = libwallycore.AES_KEY_LEN_192
AES_KEY_LEN_256 = libwallycore.AES_KEY_LEN_256
AES_FLAG_ENCRYPT = libwallycore.AES_FLAG_ENCRYPT
AES_FLAG_DECRYPT = libwallycore.AES_FLAG_DECRYPT

def aes(key, bytes, flags, bytes_out):
    return libwallycore.aes(key, bytes, flags, bytes_out)
aes = libwallycore.aes

def aes_cbc(key, iv, bytes, flags, bytes_out):
    return libwallycore.aes_cbc(key, iv, bytes, flags, bytes_out)
aes_cbc = libwallycore.aes_cbc
SHA256_LEN = libwallycore.SHA256_LEN
SHA512_LEN = libwallycore.SHA512_LEN

def sha256(bytes, bytes_out):
    return libwallycore.sha256(bytes, bytes_out)
sha256 = libwallycore.sha256

def sha256_midstate(bytes, bytes_out):
    return libwallycore.sha256_midstate(bytes, bytes_out)
sha256_midstate = libwallycore.sha256_midstate

def sha256d(bytes, bytes_out):
    return libwallycore.sha256d(bytes, bytes_out)
sha256d = libwallycore.sha256d

def sha512(bytes, bytes_out):
    return libwallycore.sha512(bytes, bytes_out)
sha512 = libwallycore.sha512
HASH160_LEN = libwallycore.HASH160_LEN

def hash160(bytes, bytes_out):
    return libwallycore.hash160(bytes, bytes_out)
hash160 = libwallycore.hash160
HMAC_SHA256_LEN = libwallycore.HMAC_SHA256_LEN
HMAC_SHA512_LEN = libwallycore.HMAC_SHA512_LEN

def hmac_sha256(key, bytes, bytes_out):
    return libwallycore.hmac_sha256(key, bytes, bytes_out)
hmac_sha256 = libwallycore.hmac_sha256

def hmac_sha512(key, bytes, bytes_out):
    return libwallycore.hmac_sha512(key, bytes, bytes_out)
hmac_sha512 = libwallycore.hmac_sha512
PBKDF2_HMAC_SHA256_LEN = libwallycore.PBKDF2_HMAC_SHA256_LEN
PBKDF2_HMAC_SHA512_LEN = libwallycore.PBKDF2_HMAC_SHA512_LEN

def pbkdf2_hmac_sha256(arg1, salt, flags, cost, bytes_out):
    return libwallycore.pbkdf2_hmac_sha256(arg1, salt, flags, cost, bytes_out)
pbkdf2_hmac_sha256 = libwallycore.pbkdf2_hmac_sha256

def pbkdf2_hmac_sha512(arg1, salt, flags, cost, bytes_out):
    return libwallycore.pbkdf2_hmac_sha512(arg1, salt, flags, cost, bytes_out)
pbkdf2_hmac_sha512 = libwallycore.pbkdf2_hmac_sha512
EC_PRIVATE_KEY_LEN = libwallycore.EC_PRIVATE_KEY_LEN
EC_PUBLIC_KEY_LEN = libwallycore.EC_PUBLIC_KEY_LEN
EC_PUBLIC_KEY_UNCOMPRESSED_LEN = libwallycore.EC_PUBLIC_KEY_UNCOMPRESSED_LEN
EC_MESSAGE_HASH_LEN = libwallycore.EC_MESSAGE_HASH_LEN
EC_SIGNATURE_LEN = libwallycore.EC_SIGNATURE_LEN
EC_SIGNATURE_RECOVERABLE_LEN = libwallycore.EC_SIGNATURE_RECOVERABLE_LEN
EC_SIGNATURE_DER_MAX_LEN = libwallycore.EC_SIGNATURE_DER_MAX_LEN
EC_SIGNATURE_DER_MAX_LOW_R_LEN = libwallycore.EC_SIGNATURE_DER_MAX_LOW_R_LEN
EC_FLAG_ECDSA = libwallycore.EC_FLAG_ECDSA
EC_FLAG_SCHNORR = libwallycore.EC_FLAG_SCHNORR
EC_FLAG_GRIND_R = libwallycore.EC_FLAG_GRIND_R
EC_FLAG_RECOVERABLE = libwallycore.EC_FLAG_RECOVERABLE
EC_FLAGS_ALL = libwallycore.EC_FLAGS_ALL

def ec_private_key_verify(priv_key):
    return libwallycore.ec_private_key_verify(priv_key)
ec_private_key_verify = libwallycore.ec_private_key_verify

def ec_public_key_verify(pub_key):
    return libwallycore.ec_public_key_verify(pub_key)
ec_public_key_verify = libwallycore.ec_public_key_verify

def ec_public_key_from_private_key(priv_key, bytes_out):
    return libwallycore.ec_public_key_from_private_key(priv_key, bytes_out)
ec_public_key_from_private_key = libwallycore.ec_public_key_from_private_key

def ec_public_key_decompress(pub_key, bytes_out):
    return libwallycore.ec_public_key_decompress(pub_key, bytes_out)
ec_public_key_decompress = libwallycore.ec_public_key_decompress

def ec_public_key_negate(pub_key, bytes_out):
    return libwallycore.ec_public_key_negate(pub_key, bytes_out)
ec_public_key_negate = libwallycore.ec_public_key_negate

def ec_sig_from_bytes(priv_key, bytes, flags, bytes_out):
    return libwallycore.ec_sig_from_bytes(priv_key, bytes, flags, bytes_out)
ec_sig_from_bytes = libwallycore.ec_sig_from_bytes

def ec_sig_normalize(sig, bytes_out):
    return libwallycore.ec_sig_normalize(sig, bytes_out)
ec_sig_normalize = libwallycore.ec_sig_normalize

def ec_sig_to_der(sig, bytes_out):
    return libwallycore.ec_sig_to_der(sig, bytes_out)
ec_sig_to_der = libwallycore.ec_sig_to_der

def ec_sig_from_der(bytes, bytes_out):
    return libwallycore.ec_sig_from_der(bytes, bytes_out)
ec_sig_from_der = libwallycore.ec_sig_from_der

def ec_sig_verify(pub_key, bytes, flags, sig):
    return libwallycore.ec_sig_verify(pub_key, bytes, flags, sig)
ec_sig_verify = libwallycore.ec_sig_verify

def ec_sig_to_public_key(bytes, sig, bytes_out):
    return libwallycore.ec_sig_to_public_key(bytes, sig, bytes_out)
ec_sig_to_public_key = libwallycore.ec_sig_to_public_key
BITCOIN_MESSAGE_MAX_LEN = libwallycore.BITCOIN_MESSAGE_MAX_LEN
BITCOIN_MESSAGE_FLAG_HASH = libwallycore.BITCOIN_MESSAGE_FLAG_HASH

def format_bitcoin_message(bytes, flags, bytes_out):
    return libwallycore.format_bitcoin_message(bytes, flags, bytes_out)
format_bitcoin_message = libwallycore.format_bitcoin_message

def ecdh(pub_key, priv_key, bytes_out):
    return libwallycore.ecdh(pub_key, priv_key, bytes_out)
ecdh = libwallycore.ecdh
WALLY_S2C_DATA_LEN = libwallycore.WALLY_S2C_DATA_LEN
WALLY_S2C_OPENING_LEN = libwallycore.WALLY_S2C_OPENING_LEN

def s2c_sig_from_bytes(priv_key, bytes, s2c_data, flags, s2c_opening_out, bytes_out):
    return libwallycore.s2c_sig_from_bytes(priv_key, bytes, s2c_data, flags, s2c_opening_out, bytes_out)
s2c_sig_from_bytes = libwallycore.s2c_sig_from_bytes

def s2c_commitment_verify(sig, s2c_data, s2c_opening, flags):
    return libwallycore.s2c_commitment_verify(sig, s2c_data, s2c_opening, flags)
s2c_commitment_verify = libwallycore.s2c_commitment_verify
WALLY_SCRIPT_TYPE_UNKNOWN = libwallycore.WALLY_SCRIPT_TYPE_UNKNOWN
WALLY_SCRIPT_TYPE_OP_RETURN = libwallycore.WALLY_SCRIPT_TYPE_OP_RETURN
WALLY_SCRIPT_TYPE_P2PKH = libwallycore.WALLY_SCRIPT_TYPE_P2PKH
WALLY_SCRIPT_TYPE_P2SH = libwallycore.WALLY_SCRIPT_TYPE_P2SH
WALLY_SCRIPT_TYPE_P2WPKH = libwallycore.WALLY_SCRIPT_TYPE_P2WPKH
WALLY_SCRIPT_TYPE_P2WSH = libwallycore.WALLY_SCRIPT_TYPE_P2WSH
WALLY_SCRIPT_TYPE_MULTISIG = libwallycore.WALLY_SCRIPT_TYPE_MULTISIG
WALLY_SCRIPTPUBKEY_P2PKH_LEN = libwallycore.WALLY_SCRIPTPUBKEY_P2PKH_LEN
WALLY_SCRIPTPUBKEY_P2SH_LEN = libwallycore.WALLY_SCRIPTPUBKEY_P2SH_LEN
WALLY_SCRIPTPUBKEY_P2WPKH_LEN = libwallycore.WALLY_SCRIPTPUBKEY_P2WPKH_LEN
WALLY_SCRIPTPUBKEY_P2WSH_LEN = libwallycore.WALLY_SCRIPTPUBKEY_P2WSH_LEN
WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN = libwallycore.WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN
WALLY_MAX_OP_RETURN_LEN = libwallycore.WALLY_MAX_OP_RETURN_LEN
WALLY_SCRIPTSIG_P2PKH_MAX_LEN = libwallycore.WALLY_SCRIPTSIG_P2PKH_MAX_LEN
WALLY_WITNESSSCRIPT_MAX_LEN = libwallycore.WALLY_WITNESSSCRIPT_MAX_LEN
WALLY_SCRIPT_VARINT_MAX_SIZE = libwallycore.WALLY_SCRIPT_VARINT_MAX_SIZE
WALLY_SCRIPT_HASH160 = libwallycore.WALLY_SCRIPT_HASH160
WALLY_SCRIPT_SHA256 = libwallycore.WALLY_SCRIPT_SHA256
WALLY_SCRIPT_AS_PUSH = libwallycore.WALLY_SCRIPT_AS_PUSH
WALLY_SCRIPT_MULTISIG_SORTED = libwallycore.WALLY_SCRIPT_MULTISIG_SORTED
OP_0 = libwallycore.OP_0
OP_FALSE = libwallycore.OP_FALSE
OP_PUSHDATA1 = libwallycore.OP_PUSHDATA1
OP_PUSHDATA2 = libwallycore.OP_PUSHDATA2
OP_PUSHDATA4 = libwallycore.OP_PUSHDATA4
OP_1NEGATE = libwallycore.OP_1NEGATE
OP_RESERVED = libwallycore.OP_RESERVED
OP_1 = libwallycore.OP_1
OP_TRUE = libwallycore.OP_TRUE
OP_2 = libwallycore.OP_2
OP_3 = libwallycore.OP_3
OP_4 = libwallycore.OP_4
OP_5 = libwallycore.OP_5
OP_6 = libwallycore.OP_6
OP_7 = libwallycore.OP_7
OP_8 = libwallycore.OP_8
OP_9 = libwallycore.OP_9
OP_10 = libwallycore.OP_10
OP_11 = libwallycore.OP_11
OP_12 = libwallycore.OP_12
OP_13 = libwallycore.OP_13
OP_14 = libwallycore.OP_14
OP_15 = libwallycore.OP_15
OP_16 = libwallycore.OP_16
OP_NOP = libwallycore.OP_NOP
OP_VER = libwallycore.OP_VER
OP_IF = libwallycore.OP_IF
OP_NOTIF = libwallycore.OP_NOTIF
OP_VERIF = libwallycore.OP_VERIF
OP_VERNOTIF = libwallycore.OP_VERNOTIF
OP_ELSE = libwallycore.OP_ELSE
OP_ENDIF = libwallycore.OP_ENDIF
OP_VERIFY = libwallycore.OP_VERIFY
OP_RETURN = libwallycore.OP_RETURN
OP_TOALTSTACK = libwallycore.OP_TOALTSTACK
OP_FROMALTSTACK = libwallycore.OP_FROMALTSTACK
OP_2DROP = libwallycore.OP_2DROP
OP_2DUP = libwallycore.OP_2DUP
OP_3DUP = libwallycore.OP_3DUP
OP_2OVER = libwallycore.OP_2OVER
OP_2ROT = libwallycore.OP_2ROT
OP_2SWAP = libwallycore.OP_2SWAP
OP_IFDUP = libwallycore.OP_IFDUP
OP_DEPTH = libwallycore.OP_DEPTH
OP_DROP = libwallycore.OP_DROP
OP_DUP = libwallycore.OP_DUP
OP_NIP = libwallycore.OP_NIP
OP_OVER = libwallycore.OP_OVER
OP_PICK = libwallycore.OP_PICK
OP_ROLL = libwallycore.OP_ROLL
OP_ROT = libwallycore.OP_ROT
OP_SWAP = libwallycore.OP_SWAP
OP_TUCK = libwallycore.OP_TUCK
OP_CAT = libwallycore.OP_CAT
OP_SUBSTR = libwallycore.OP_SUBSTR
OP_LEFT = libwallycore.OP_LEFT
OP_RIGHT = libwallycore.OP_RIGHT
OP_SIZE = libwallycore.OP_SIZE
OP_INVERT = libwallycore.OP_INVERT
OP_AND = libwallycore.OP_AND
OP_OR = libwallycore.OP_OR
OP_XOR = libwallycore.OP_XOR
OP_EQUAL = libwallycore.OP_EQUAL
OP_EQUALVERIFY = libwallycore.OP_EQUALVERIFY
OP_RESERVED1 = libwallycore.OP_RESERVED1
OP_RESERVED2 = libwallycore.OP_RESERVED2
OP_1ADD = libwallycore.OP_1ADD
OP_1SUB = libwallycore.OP_1SUB
OP_2MUL = libwallycore.OP_2MUL
OP_2DIV = libwallycore.OP_2DIV
OP_NEGATE = libwallycore.OP_NEGATE
OP_ABS = libwallycore.OP_ABS
OP_NOT = libwallycore.OP_NOT
OP_0NOTEQUAL = libwallycore.OP_0NOTEQUAL
OP_ADD = libwallycore.OP_ADD
OP_SUB = libwallycore.OP_SUB
OP_MUL = libwallycore.OP_MUL
OP_DIV = libwallycore.OP_DIV
OP_MOD = libwallycore.OP_MOD
OP_LSHIFT = libwallycore.OP_LSHIFT
OP_RSHIFT = libwallycore.OP_RSHIFT
OP_BOOLAND = libwallycore.OP_BOOLAND
OP_BOOLOR = libwallycore.OP_BOOLOR
OP_NUMEQUAL = libwallycore.OP_NUMEQUAL
OP_NUMEQUALVERIFY = libwallycore.OP_NUMEQUALVERIFY
OP_NUMNOTEQUAL = libwallycore.OP_NUMNOTEQUAL
OP_LESSTHAN = libwallycore.OP_LESSTHAN
OP_GREATERTHAN = libwallycore.OP_GREATERTHAN
OP_LESSTHANOREQUAL = libwallycore.OP_LESSTHANOREQUAL
OP_GREATERTHANOREQUAL = libwallycore.OP_GREATERTHANOREQUAL
OP_MIN = libwallycore.OP_MIN
OP_MAX = libwallycore.OP_MAX
OP_WITHIN = libwallycore.OP_WITHIN
OP_RIPEMD160 = libwallycore.OP_RIPEMD160
OP_SHA1 = libwallycore.OP_SHA1
OP_SHA256 = libwallycore.OP_SHA256
OP_HASH160 = libwallycore.OP_HASH160
OP_HASH256 = libwallycore.OP_HASH256
OP_CODESEPARATOR = libwallycore.OP_CODESEPARATOR
OP_CHECKSIG = libwallycore.OP_CHECKSIG
OP_CHECKSIGVERIFY = libwallycore.OP_CHECKSIGVERIFY
OP_CHECKMULTISIG = libwallycore.OP_CHECKMULTISIG
OP_CHECKMULTISIGVERIFY = libwallycore.OP_CHECKMULTISIGVERIFY
OP_NOP1 = libwallycore.OP_NOP1
OP_CHECKLOCKTIMEVERIFY = libwallycore.OP_CHECKLOCKTIMEVERIFY
OP_NOP2 = libwallycore.OP_NOP2
OP_CHECKSEQUENCEVERIFY = libwallycore.OP_CHECKSEQUENCEVERIFY
OP_NOP3 = libwallycore.OP_NOP3
OP_NOP4 = libwallycore.OP_NOP4
OP_NOP5 = libwallycore.OP_NOP5
OP_NOP6 = libwallycore.OP_NOP6
OP_NOP7 = libwallycore.OP_NOP7
OP_NOP8 = libwallycore.OP_NOP8
OP_NOP9 = libwallycore.OP_NOP9
OP_NOP10 = libwallycore.OP_NOP10
OP_INVALIDOPCODE = libwallycore.OP_INVALIDOPCODE

def scriptpubkey_get_type(bytes):
    return libwallycore.scriptpubkey_get_type(bytes)
scriptpubkey_get_type = libwallycore.scriptpubkey_get_type

def scriptpubkey_p2pkh_from_bytes(bytes, flags, bytes_out):
    return libwallycore.scriptpubkey_p2pkh_from_bytes(bytes, flags, bytes_out)
scriptpubkey_p2pkh_from_bytes = libwallycore.scriptpubkey_p2pkh_from_bytes

def scriptsig_p2pkh_from_sig(pub_key, sig, sighash, bytes_out):
    return libwallycore.scriptsig_p2pkh_from_sig(pub_key, sig, sighash, bytes_out)
scriptsig_p2pkh_from_sig = libwallycore.scriptsig_p2pkh_from_sig

def witness_p2wpkh_from_sig(pub_key, sig, sighash, witness):
    return libwallycore.witness_p2wpkh_from_sig(pub_key, sig, sighash, witness)
witness_p2wpkh_from_sig = libwallycore.witness_p2wpkh_from_sig

def scriptsig_p2pkh_from_der(pub_key, sig, bytes_out):
    return libwallycore.scriptsig_p2pkh_from_der(pub_key, sig, bytes_out)
scriptsig_p2pkh_from_der = libwallycore.scriptsig_p2pkh_from_der

def witness_p2wpkh_from_der(pub_key, sig, witness):
    return libwallycore.witness_p2wpkh_from_der(pub_key, sig, witness)
witness_p2wpkh_from_der = libwallycore.witness_p2wpkh_from_der

def scriptpubkey_op_return_from_bytes(bytes, flags, bytes_out):
    return libwallycore.scriptpubkey_op_return_from_bytes(bytes, flags, bytes_out)
scriptpubkey_op_return_from_bytes = libwallycore.scriptpubkey_op_return_from_bytes

def scriptpubkey_p2sh_from_bytes(bytes, flags, bytes_out):
    return libwallycore.scriptpubkey_p2sh_from_bytes(bytes, flags, bytes_out)
scriptpubkey_p2sh_from_bytes = libwallycore.scriptpubkey_p2sh_from_bytes

def scriptpubkey_multisig_from_bytes(bytes, threshold, flags, bytes_out):
    return libwallycore.scriptpubkey_multisig_from_bytes(bytes, threshold, flags, bytes_out)
scriptpubkey_multisig_from_bytes = libwallycore.scriptpubkey_multisig_from_bytes

def scriptsig_multisig_from_bytes(script, bytes, sighash, flags, bytes_out):
    return libwallycore.scriptsig_multisig_from_bytes(script, bytes, sighash, flags, bytes_out)
scriptsig_multisig_from_bytes = libwallycore.scriptsig_multisig_from_bytes

def witness_multisig_from_bytes(script, bytes, sighash, flags, witness):
    return libwallycore.witness_multisig_from_bytes(script, bytes, sighash, flags, witness)
witness_multisig_from_bytes = libwallycore.witness_multisig_from_bytes

def scriptpubkey_csv_2of2_then_1_from_bytes(bytes, csv_blocks, flags, bytes_out):
    return libwallycore.scriptpubkey_csv_2of2_then_1_from_bytes(bytes, csv_blocks, flags, bytes_out)
scriptpubkey_csv_2of2_then_1_from_bytes = libwallycore.scriptpubkey_csv_2of2_then_1_from_bytes

def scriptpubkey_csv_2of2_then_1_from_bytes_opt(bytes, csv_blocks, flags, bytes_out):
    return libwallycore.scriptpubkey_csv_2of2_then_1_from_bytes_opt(bytes, csv_blocks, flags, bytes_out)
scriptpubkey_csv_2of2_then_1_from_bytes_opt = libwallycore.scriptpubkey_csv_2of2_then_1_from_bytes_opt

def scriptpubkey_csv_2of3_then_2_from_bytes(bytes, csv_blocks, flags, bytes_out):
    return libwallycore.scriptpubkey_csv_2of3_then_2_from_bytes(bytes, csv_blocks, flags, bytes_out)
scriptpubkey_csv_2of3_then_2_from_bytes = libwallycore.scriptpubkey_csv_2of3_then_2_from_bytes

def script_push_from_bytes(bytes, flags, bytes_out):
    return libwallycore.script_push_from_bytes(bytes, flags, bytes_out)
script_push_from_bytes = libwallycore.script_push_from_bytes

def varint_get_length(value):
    return libwallycore.varint_get_length(value)
varint_get_length = libwallycore.varint_get_length

def varint_to_bytes(value, bytes_out):
    return libwallycore.varint_to_bytes(value, bytes_out)
varint_to_bytes = libwallycore.varint_to_bytes

def varbuff_get_length(bytes):
    return libwallycore.varbuff_get_length(bytes)
varbuff_get_length = libwallycore.varbuff_get_length

def varbuff_to_bytes(bytes, bytes_out):
    return libwallycore.varbuff_to_bytes(bytes, bytes_out)
varbuff_to_bytes = libwallycore.varbuff_to_bytes

def witness_program_from_bytes(bytes, flags, bytes_out):
    return libwallycore.witness_program_from_bytes(bytes, flags, bytes_out)
witness_program_from_bytes = libwallycore.witness_program_from_bytes

def elements_pegout_script_size(genesis_blockhash_len, mainchain_script_len, sub_pubkey_len, whitelistproof_len):
    return libwallycore.elements_pegout_script_size(genesis_blockhash_len, mainchain_script_len, sub_pubkey_len, whitelistproof_len)
elements_pegout_script_size = libwallycore.elements_pegout_script_size

def elements_pegout_script_from_bytes(genesis_blockhash, mainchain_script, sub_pubkey, whitelistproof, flags, bytes_out):
    return libwallycore.elements_pegout_script_from_bytes(genesis_blockhash, mainchain_script, sub_pubkey, whitelistproof, flags, bytes_out)
elements_pegout_script_from_bytes = libwallycore.elements_pegout_script_from_bytes

def elements_pegin_contract_script_from_bytes(redeem_script, script, flags, bytes_out):
    return libwallycore.elements_pegin_contract_script_from_bytes(redeem_script, script, flags, bytes_out)
elements_pegin_contract_script_from_bytes = libwallycore.elements_pegin_contract_script_from_bytes
WALLY_PSBT_HIGHEST_VERSION = libwallycore.WALLY_PSBT_HIGHEST_VERSION
WALLY_PSBT_FLAG_NON_FINAL = libwallycore.WALLY_PSBT_FLAG_NON_FINAL
PSBT_PROPRIETARY_TYPE = libwallycore.PSBT_PROPRIETARY_TYPE

def map_init(allocation_len):
    return libwallycore.map_init(allocation_len)
map_init = libwallycore.map_init

def map_free(map_in):
    return libwallycore.map_free(map_in)
map_free = libwallycore.map_free

def map_find(map_in, key):
    return libwallycore.map_find(map_in, key)
map_find = libwallycore.map_find

def map_add(map_in, key, value):
    return libwallycore.map_add(map_in, key, value)
map_add = libwallycore.map_add

def map_add_keypath_item(map_in, pub_key, fingerprint, child_path):
    return libwallycore.map_add_keypath_item(map_in, pub_key, fingerprint, child_path)
map_add_keypath_item = libwallycore.map_add_keypath_item

def map_sort(map_in, flags):
    return libwallycore.map_sort(map_in, flags)
map_sort = libwallycore.map_sort

def psbt_init(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len):
    return libwallycore.psbt_init(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len)
psbt_init = libwallycore.psbt_init

def psbt_free(psbt):
    return libwallycore.psbt_free(psbt)
psbt_free = libwallycore.psbt_free

def psbt_is_finalized(psbt):
    return libwallycore.psbt_is_finalized(psbt)
psbt_is_finalized = libwallycore.psbt_is_finalized

def psbt_set_global_tx(psbt, tx):
    return libwallycore.psbt_set_global_tx(psbt, tx)
psbt_set_global_tx = libwallycore.psbt_set_global_tx

def psbt_add_input_at(psbt, index, flags, input):
    return libwallycore.psbt_add_input_at(psbt, index, flags, input)
psbt_add_input_at = libwallycore.psbt_add_input_at

def psbt_remove_input(psbt, index):
    return libwallycore.psbt_remove_input(psbt, index)
psbt_remove_input = libwallycore.psbt_remove_input

def psbt_add_output_at(psbt, index, flags, output):
    return libwallycore.psbt_add_output_at(psbt, index, flags, output)
psbt_add_output_at = libwallycore.psbt_add_output_at

def psbt_remove_output(psbt, index):
    return libwallycore.psbt_remove_output(psbt, index)
psbt_remove_output = libwallycore.psbt_remove_output

def psbt_from_bytes(bytes):
    return libwallycore.psbt_from_bytes(bytes)
psbt_from_bytes = libwallycore.psbt_from_bytes

def psbt_get_length(psbt, flags):
    return libwallycore.psbt_get_length(psbt, flags)
psbt_get_length = libwallycore.psbt_get_length

def psbt_to_bytes(psbt, flags, bytes_out):
    return libwallycore.psbt_to_bytes(psbt, flags, bytes_out)
psbt_to_bytes = libwallycore.psbt_to_bytes

def psbt_from_base64(base64):
    return libwallycore.psbt_from_base64(base64)
psbt_from_base64 = libwallycore.psbt_from_base64

def psbt_to_base64(psbt, flags):
    return libwallycore.psbt_to_base64(psbt, flags)
psbt_to_base64 = libwallycore.psbt_to_base64

def psbt_combine(psbt, src):
    return libwallycore.psbt_combine(psbt, src)
psbt_combine = libwallycore.psbt_combine

def psbt_clone(psbt, flags):
    return libwallycore.psbt_clone(psbt, flags)
psbt_clone = libwallycore.psbt_clone

def psbt_sign(psbt, key, flags):
    return libwallycore.psbt_sign(psbt, key, flags)
psbt_sign = libwallycore.psbt_sign

def psbt_finalize(psbt):
    return libwallycore.psbt_finalize(psbt)
psbt_finalize = libwallycore.psbt_finalize

def psbt_extract(psbt):
    return libwallycore.psbt_extract(psbt)
psbt_extract = libwallycore.psbt_extract

def psbt_is_elements(psbt):
    return libwallycore.psbt_is_elements(psbt)
psbt_is_elements = libwallycore.psbt_is_elements

def psbt_elements_init(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len):
    return libwallycore.psbt_elements_init(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len)
psbt_elements_init = libwallycore.psbt_elements_init
LIBWALLY_CORE_PSBT_INT_H = libwallycore.LIBWALLY_CORE_PSBT_INT_H

def psbt_get_global_tx(psbt):
    return libwallycore.psbt_get_global_tx(psbt)
psbt_get_global_tx = libwallycore.psbt_get_global_tx

def psbt_get_version(psbt):
    return libwallycore.psbt_get_version(psbt)
psbt_get_version = libwallycore.psbt_get_version

def psbt_get_num_inputs(psbt):
    return libwallycore.psbt_get_num_inputs(psbt)
psbt_get_num_inputs = libwallycore.psbt_get_num_inputs

def psbt_get_num_outputs(psbt):
    return libwallycore.psbt_get_num_outputs(psbt)
psbt_get_num_outputs = libwallycore.psbt_get_num_outputs

def psbt_get_input_utxo(psbt, index):
    return libwallycore.psbt_get_input_utxo(psbt, index)
psbt_get_input_utxo = libwallycore.psbt_get_input_utxo

def psbt_get_input_witness_utxo(psbt, index):
    return libwallycore.psbt_get_input_witness_utxo(psbt, index)
psbt_get_input_witness_utxo = libwallycore.psbt_get_input_witness_utxo

def psbt_get_input_redeem_script(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_redeem_script(psbt, index, bytes_out)
psbt_get_input_redeem_script = libwallycore.psbt_get_input_redeem_script

def psbt_get_input_redeem_script_len(psbt, index):
    return libwallycore.psbt_get_input_redeem_script_len(psbt, index)
psbt_get_input_redeem_script_len = libwallycore.psbt_get_input_redeem_script_len

def psbt_get_input_witness_script(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_witness_script(psbt, index, bytes_out)
psbt_get_input_witness_script = libwallycore.psbt_get_input_witness_script

def psbt_get_input_witness_script_len(psbt, index):
    return libwallycore.psbt_get_input_witness_script_len(psbt, index)
psbt_get_input_witness_script_len = libwallycore.psbt_get_input_witness_script_len

def psbt_get_input_final_scriptsig(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_final_scriptsig(psbt, index, bytes_out)
psbt_get_input_final_scriptsig = libwallycore.psbt_get_input_final_scriptsig

def psbt_get_input_final_scriptsig_len(psbt, index):
    return libwallycore.psbt_get_input_final_scriptsig_len(psbt, index)
psbt_get_input_final_scriptsig_len = libwallycore.psbt_get_input_final_scriptsig_len

def psbt_get_input_final_witness(psbt, index):
    return libwallycore.psbt_get_input_final_witness(psbt, index)
psbt_get_input_final_witness = libwallycore.psbt_get_input_final_witness

def psbt_get_input_keypaths_size(psbt, index):
    return libwallycore.psbt_get_input_keypaths_size(psbt, index)
psbt_get_input_keypaths_size = libwallycore.psbt_get_input_keypaths_size

def psbt_find_input_keypath(psbt, index, key):
    return libwallycore.psbt_find_input_keypath(psbt, index, key)
psbt_find_input_keypath = libwallycore.psbt_find_input_keypath

def psbt_get_input_keypath(psbt, index, subindex, bytes_out):
    return libwallycore.psbt_get_input_keypath(psbt, index, subindex, bytes_out)
psbt_get_input_keypath = libwallycore.psbt_get_input_keypath

def psbt_get_input_keypath_len(psbt, index, subindex):
    return libwallycore.psbt_get_input_keypath_len(psbt, index, subindex)
psbt_get_input_keypath_len = libwallycore.psbt_get_input_keypath_len

def psbt_get_input_signatures_size(psbt, index):
    return libwallycore.psbt_get_input_signatures_size(psbt, index)
psbt_get_input_signatures_size = libwallycore.psbt_get_input_signatures_size

def psbt_find_input_signature(psbt, index, pub_key):
    return libwallycore.psbt_find_input_signature(psbt, index, pub_key)
psbt_find_input_signature = libwallycore.psbt_find_input_signature

def psbt_get_input_signature(psbt, index, subindex, bytes_out):
    return libwallycore.psbt_get_input_signature(psbt, index, subindex, bytes_out)
psbt_get_input_signature = libwallycore.psbt_get_input_signature

def psbt_get_input_signature_len(psbt, index, subindex):
    return libwallycore.psbt_get_input_signature_len(psbt, index, subindex)
psbt_get_input_signature_len = libwallycore.psbt_get_input_signature_len

def psbt_get_input_unknowns_size(psbt, index):
    return libwallycore.psbt_get_input_unknowns_size(psbt, index)
psbt_get_input_unknowns_size = libwallycore.psbt_get_input_unknowns_size

def psbt_find_input_unknown(psbt, index, key):
    return libwallycore.psbt_find_input_unknown(psbt, index, key)
psbt_find_input_unknown = libwallycore.psbt_find_input_unknown

def psbt_get_input_unknown(psbt, index, subindex, bytes_out):
    return libwallycore.psbt_get_input_unknown(psbt, index, subindex, bytes_out)
psbt_get_input_unknown = libwallycore.psbt_get_input_unknown

def psbt_get_input_unknown_len(psbt, index, subindex):
    return libwallycore.psbt_get_input_unknown_len(psbt, index, subindex)
psbt_get_input_unknown_len = libwallycore.psbt_get_input_unknown_len

def psbt_get_input_sighash(psbt, index):
    return libwallycore.psbt_get_input_sighash(psbt, index)
psbt_get_input_sighash = libwallycore.psbt_get_input_sighash

def psbt_set_input_utxo(psbt, index, utxo):
    return libwallycore.psbt_set_input_utxo(psbt, index, utxo)
psbt_set_input_utxo = libwallycore.psbt_set_input_utxo

def psbt_set_input_witness_utxo(psbt, index, witness_utxo):
    return libwallycore.psbt_set_input_witness_utxo(psbt, index, witness_utxo)
psbt_set_input_witness_utxo = libwallycore.psbt_set_input_witness_utxo

def psbt_set_input_redeem_script(psbt, index, script):
    return libwallycore.psbt_set_input_redeem_script(psbt, index, script)
psbt_set_input_redeem_script = libwallycore.psbt_set_input_redeem_script

def psbt_set_input_witness_script(psbt, index, script):
    return libwallycore.psbt_set_input_witness_script(psbt, index, script)
psbt_set_input_witness_script = libwallycore.psbt_set_input_witness_script

def psbt_set_input_final_scriptsig(psbt, index, script):
    return libwallycore.psbt_set_input_final_scriptsig(psbt, index, script)
psbt_set_input_final_scriptsig = libwallycore.psbt_set_input_final_scriptsig

def psbt_set_input_final_witness(psbt, index, final_witness):
    return libwallycore.psbt_set_input_final_witness(psbt, index, final_witness)
psbt_set_input_final_witness = libwallycore.psbt_set_input_final_witness

def psbt_set_input_keypaths(psbt, index, map_in):
    return libwallycore.psbt_set_input_keypaths(psbt, index, map_in)
psbt_set_input_keypaths = libwallycore.psbt_set_input_keypaths

def psbt_set_input_signatures(psbt, index, map_in):
    return libwallycore.psbt_set_input_signatures(psbt, index, map_in)
psbt_set_input_signatures = libwallycore.psbt_set_input_signatures

def psbt_set_input_unknowns(psbt, index, map_in):
    return libwallycore.psbt_set_input_unknowns(psbt, index, map_in)
psbt_set_input_unknowns = libwallycore.psbt_set_input_unknowns

def psbt_set_input_sighash(psbt, index, sighash):
    return libwallycore.psbt_set_input_sighash(psbt, index, sighash)
psbt_set_input_sighash = libwallycore.psbt_set_input_sighash

def psbt_get_input_value(psbt, index):
    return libwallycore.psbt_get_input_value(psbt, index)
psbt_get_input_value = libwallycore.psbt_get_input_value

def psbt_has_input_value(psbt, index):
    return libwallycore.psbt_has_input_value(psbt, index)
psbt_has_input_value = libwallycore.psbt_has_input_value

def psbt_get_input_vbf(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_vbf(psbt, index, bytes_out)
psbt_get_input_vbf = libwallycore.psbt_get_input_vbf

def psbt_get_input_vbf_len(psbt, index):
    return libwallycore.psbt_get_input_vbf_len(psbt, index)
psbt_get_input_vbf_len = libwallycore.psbt_get_input_vbf_len

def psbt_get_input_asset(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_asset(psbt, index, bytes_out)
psbt_get_input_asset = libwallycore.psbt_get_input_asset

def psbt_get_input_asset_len(psbt, index):
    return libwallycore.psbt_get_input_asset_len(psbt, index)
psbt_get_input_asset_len = libwallycore.psbt_get_input_asset_len

def psbt_get_input_abf(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_abf(psbt, index, bytes_out)
psbt_get_input_abf = libwallycore.psbt_get_input_abf

def psbt_get_input_abf_len(psbt, index):
    return libwallycore.psbt_get_input_abf_len(psbt, index)
psbt_get_input_abf_len = libwallycore.psbt_get_input_abf_len

def psbt_get_input_pegin_tx(psbt, index):
    return libwallycore.psbt_get_input_pegin_tx(psbt, index)
psbt_get_input_pegin_tx = libwallycore.psbt_get_input_pegin_tx

def psbt_get_input_txoutproof(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_txoutproof(psbt, index, bytes_out)
psbt_get_input_txoutproof = libwallycore.psbt_get_input_txoutproof

def psbt_get_input_txoutproof_len(psbt, index):
    return libwallycore.psbt_get_input_txoutproof_len(psbt, index)
psbt_get_input_txoutproof_len = libwallycore.psbt_get_input_txoutproof_len

def psbt_get_input_genesis_blockhash(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_genesis_blockhash(psbt, index, bytes_out)
psbt_get_input_genesis_blockhash = libwallycore.psbt_get_input_genesis_blockhash

def psbt_get_input_genesis_blockhash_len(psbt, index):
    return libwallycore.psbt_get_input_genesis_blockhash_len(psbt, index)
psbt_get_input_genesis_blockhash_len = libwallycore.psbt_get_input_genesis_blockhash_len

def psbt_get_input_claim_script(psbt, index, bytes_out):
    return libwallycore.psbt_get_input_claim_script(psbt, index, bytes_out)
psbt_get_input_claim_script = libwallycore.psbt_get_input_claim_script

def psbt_get_input_claim_script_len(psbt, index):
    return libwallycore.psbt_get_input_claim_script_len(psbt, index)
psbt_get_input_claim_script_len = libwallycore.psbt_get_input_claim_script_len

def psbt_set_input_value(psbt, index, value):
    return libwallycore.psbt_set_input_value(psbt, index, value)
psbt_set_input_value = libwallycore.psbt_set_input_value

def psbt_clear_input_value(psbt, index):
    return libwallycore.psbt_clear_input_value(psbt, index)
psbt_clear_input_value = libwallycore.psbt_clear_input_value

def psbt_set_input_vbf(psbt, index, vbf):
    return libwallycore.psbt_set_input_vbf(psbt, index, vbf)
psbt_set_input_vbf = libwallycore.psbt_set_input_vbf

def psbt_set_input_asset(psbt, index, asset):
    return libwallycore.psbt_set_input_asset(psbt, index, asset)
psbt_set_input_asset = libwallycore.psbt_set_input_asset

def psbt_set_input_abf(psbt, index, abf):
    return libwallycore.psbt_set_input_abf(psbt, index, abf)
psbt_set_input_abf = libwallycore.psbt_set_input_abf

def psbt_set_input_pegin_tx(psbt, index, pegin_tx):
    return libwallycore.psbt_set_input_pegin_tx(psbt, index, pegin_tx)
psbt_set_input_pegin_tx = libwallycore.psbt_set_input_pegin_tx

def psbt_set_input_txoutproof(psbt, index, proof):
    return libwallycore.psbt_set_input_txoutproof(psbt, index, proof)
psbt_set_input_txoutproof = libwallycore.psbt_set_input_txoutproof

def psbt_set_input_genesis_blockhash(psbt, index, genesis_blockhash):
    return libwallycore.psbt_set_input_genesis_blockhash(psbt, index, genesis_blockhash)
psbt_set_input_genesis_blockhash = libwallycore.psbt_set_input_genesis_blockhash

def psbt_set_input_claim_script(psbt, index, script):
    return libwallycore.psbt_set_input_claim_script(psbt, index, script)
psbt_set_input_claim_script = libwallycore.psbt_set_input_claim_script

def psbt_get_output_redeem_script(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_redeem_script(psbt, index, bytes_out)
psbt_get_output_redeem_script = libwallycore.psbt_get_output_redeem_script

def psbt_get_output_redeem_script_len(psbt, index):
    return libwallycore.psbt_get_output_redeem_script_len(psbt, index)
psbt_get_output_redeem_script_len = libwallycore.psbt_get_output_redeem_script_len

def psbt_get_output_witness_script(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_witness_script(psbt, index, bytes_out)
psbt_get_output_witness_script = libwallycore.psbt_get_output_witness_script

def psbt_get_output_witness_script_len(psbt, index):
    return libwallycore.psbt_get_output_witness_script_len(psbt, index)
psbt_get_output_witness_script_len = libwallycore.psbt_get_output_witness_script_len

def psbt_get_output_keypaths_size(psbt, index):
    return libwallycore.psbt_get_output_keypaths_size(psbt, index)
psbt_get_output_keypaths_size = libwallycore.psbt_get_output_keypaths_size

def psbt_find_output_keypath(psbt, index, key):
    return libwallycore.psbt_find_output_keypath(psbt, index, key)
psbt_find_output_keypath = libwallycore.psbt_find_output_keypath

def psbt_get_output_keypath(psbt, index, subindex, bytes_out):
    return libwallycore.psbt_get_output_keypath(psbt, index, subindex, bytes_out)
psbt_get_output_keypath = libwallycore.psbt_get_output_keypath

def psbt_get_output_keypath_len(psbt, index, subindex):
    return libwallycore.psbt_get_output_keypath_len(psbt, index, subindex)
psbt_get_output_keypath_len = libwallycore.psbt_get_output_keypath_len

def psbt_get_output_unknowns_size(psbt, index):
    return libwallycore.psbt_get_output_unknowns_size(psbt, index)
psbt_get_output_unknowns_size = libwallycore.psbt_get_output_unknowns_size

def psbt_find_output_unknown(psbt, index, key):
    return libwallycore.psbt_find_output_unknown(psbt, index, key)
psbt_find_output_unknown = libwallycore.psbt_find_output_unknown

def psbt_get_output_unknown(psbt, index, subindex, bytes_out):
    return libwallycore.psbt_get_output_unknown(psbt, index, subindex, bytes_out)
psbt_get_output_unknown = libwallycore.psbt_get_output_unknown

def psbt_get_output_unknown_len(psbt, index, subindex):
    return libwallycore.psbt_get_output_unknown_len(psbt, index, subindex)
psbt_get_output_unknown_len = libwallycore.psbt_get_output_unknown_len

def psbt_set_output_redeem_script(psbt, index, script):
    return libwallycore.psbt_set_output_redeem_script(psbt, index, script)
psbt_set_output_redeem_script = libwallycore.psbt_set_output_redeem_script

def psbt_set_output_witness_script(psbt, index, script):
    return libwallycore.psbt_set_output_witness_script(psbt, index, script)
psbt_set_output_witness_script = libwallycore.psbt_set_output_witness_script

def psbt_set_output_keypaths(psbt, index, map_in):
    return libwallycore.psbt_set_output_keypaths(psbt, index, map_in)
psbt_set_output_keypaths = libwallycore.psbt_set_output_keypaths

def psbt_set_output_unknowns(psbt, index, map_in):
    return libwallycore.psbt_set_output_unknowns(psbt, index, map_in)
psbt_set_output_unknowns = libwallycore.psbt_set_output_unknowns

def psbt_get_output_blinding_pubkey(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_blinding_pubkey(psbt, index, bytes_out)
psbt_get_output_blinding_pubkey = libwallycore.psbt_get_output_blinding_pubkey

def psbt_get_output_blinding_pubkey_len(psbt, index):
    return libwallycore.psbt_get_output_blinding_pubkey_len(psbt, index)
psbt_get_output_blinding_pubkey_len = libwallycore.psbt_get_output_blinding_pubkey_len

def psbt_get_output_value_commitment(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_value_commitment(psbt, index, bytes_out)
psbt_get_output_value_commitment = libwallycore.psbt_get_output_value_commitment

def psbt_get_output_value_commitment_len(psbt, index):
    return libwallycore.psbt_get_output_value_commitment_len(psbt, index)
psbt_get_output_value_commitment_len = libwallycore.psbt_get_output_value_commitment_len

def psbt_get_output_vbf(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_vbf(psbt, index, bytes_out)
psbt_get_output_vbf = libwallycore.psbt_get_output_vbf

def psbt_get_output_vbf_len(psbt, index):
    return libwallycore.psbt_get_output_vbf_len(psbt, index)
psbt_get_output_vbf_len = libwallycore.psbt_get_output_vbf_len

def psbt_get_output_asset_commitment(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_asset_commitment(psbt, index, bytes_out)
psbt_get_output_asset_commitment = libwallycore.psbt_get_output_asset_commitment

def psbt_get_output_asset_commitment_len(psbt, index):
    return libwallycore.psbt_get_output_asset_commitment_len(psbt, index)
psbt_get_output_asset_commitment_len = libwallycore.psbt_get_output_asset_commitment_len

def psbt_get_output_abf(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_abf(psbt, index, bytes_out)
psbt_get_output_abf = libwallycore.psbt_get_output_abf

def psbt_get_output_abf_len(psbt, index):
    return libwallycore.psbt_get_output_abf_len(psbt, index)
psbt_get_output_abf_len = libwallycore.psbt_get_output_abf_len

def psbt_get_output_nonce(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_nonce(psbt, index, bytes_out)
psbt_get_output_nonce = libwallycore.psbt_get_output_nonce

def psbt_get_output_nonce_len(psbt, index):
    return libwallycore.psbt_get_output_nonce_len(psbt, index)
psbt_get_output_nonce_len = libwallycore.psbt_get_output_nonce_len

def psbt_get_output_rangeproof(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_rangeproof(psbt, index, bytes_out)
psbt_get_output_rangeproof = libwallycore.psbt_get_output_rangeproof

def psbt_get_output_rangeproof_len(psbt, index):
    return libwallycore.psbt_get_output_rangeproof_len(psbt, index)
psbt_get_output_rangeproof_len = libwallycore.psbt_get_output_rangeproof_len

def psbt_get_output_surjectionproof(psbt, index, bytes_out):
    return libwallycore.psbt_get_output_surjectionproof(psbt, index, bytes_out)
psbt_get_output_surjectionproof = libwallycore.psbt_get_output_surjectionproof

def psbt_get_output_surjectionproof_len(psbt, index):
    return libwallycore.psbt_get_output_surjectionproof_len(psbt, index)
psbt_get_output_surjectionproof_len = libwallycore.psbt_get_output_surjectionproof_len

def psbt_set_output_blinding_pubkey(psbt, index, pub_key):
    return libwallycore.psbt_set_output_blinding_pubkey(psbt, index, pub_key)
psbt_set_output_blinding_pubkey = libwallycore.psbt_set_output_blinding_pubkey

def psbt_set_output_value_commitment(psbt, index, commitment):
    return libwallycore.psbt_set_output_value_commitment(psbt, index, commitment)
psbt_set_output_value_commitment = libwallycore.psbt_set_output_value_commitment

def psbt_set_output_vbf(psbt, index, vbf):
    return libwallycore.psbt_set_output_vbf(psbt, index, vbf)
psbt_set_output_vbf = libwallycore.psbt_set_output_vbf

def psbt_set_output_asset_commitment(psbt, index, commitment):
    return libwallycore.psbt_set_output_asset_commitment(psbt, index, commitment)
psbt_set_output_asset_commitment = libwallycore.psbt_set_output_asset_commitment

def psbt_set_output_abf(psbt, index, abf):
    return libwallycore.psbt_set_output_abf(psbt, index, abf)
psbt_set_output_abf = libwallycore.psbt_set_output_abf

def psbt_set_output_nonce(psbt, index, nonce):
    return libwallycore.psbt_set_output_nonce(psbt, index, nonce)
psbt_set_output_nonce = libwallycore.psbt_set_output_nonce

def psbt_set_output_rangeproof(psbt, index, proof):
    return libwallycore.psbt_set_output_rangeproof(psbt, index, proof)
psbt_set_output_rangeproof = libwallycore.psbt_set_output_rangeproof

def psbt_set_output_surjectionproof(psbt, index, proof):
    return libwallycore.psbt_set_output_surjectionproof(psbt, index, proof)
psbt_set_output_surjectionproof = libwallycore.psbt_set_output_surjectionproof

def symmetric_key_from_seed(bytes, bytes_out):
    return libwallycore.symmetric_key_from_seed(bytes, bytes_out)
symmetric_key_from_seed = libwallycore.symmetric_key_from_seed

def symmetric_key_from_parent(bytes, version, label, bytes_out):
    return libwallycore.symmetric_key_from_parent(bytes, version, label, bytes_out)
symmetric_key_from_parent = libwallycore.symmetric_key_from_parent
WALLY_TX_SEQUENCE_FINAL = libwallycore.WALLY_TX_SEQUENCE_FINAL
WALLY_TX_VERSION_1 = libwallycore.WALLY_TX_VERSION_1
WALLY_TX_VERSION_2 = libwallycore.WALLY_TX_VERSION_2
WALLY_TX_IS_ELEMENTS = libwallycore.WALLY_TX_IS_ELEMENTS
WALLY_TX_IS_ISSUANCE = libwallycore.WALLY_TX_IS_ISSUANCE
WALLY_TX_IS_PEGIN = libwallycore.WALLY_TX_IS_PEGIN
WALLY_TX_IS_COINBASE = libwallycore.WALLY_TX_IS_COINBASE
WALLY_SATOSHI_PER_BTC = libwallycore.WALLY_SATOSHI_PER_BTC
WALLY_BTC_MAX = libwallycore.WALLY_BTC_MAX
WALLY_TXHASH_LEN = libwallycore.WALLY_TXHASH_LEN
WALLY_TX_FLAG_USE_WITNESS = libwallycore.WALLY_TX_FLAG_USE_WITNESS
WALLY_TX_FLAG_USE_ELEMENTS = libwallycore.WALLY_TX_FLAG_USE_ELEMENTS
WALLY_TX_FLAG_ALLOW_PARTIAL = libwallycore.WALLY_TX_FLAG_ALLOW_PARTIAL
WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE = libwallycore.WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE
WALLY_TX_DUMMY_NULL = libwallycore.WALLY_TX_DUMMY_NULL
WALLY_TX_DUMMY_SIG = libwallycore.WALLY_TX_DUMMY_SIG
WALLY_TX_DUMMY_SIG_LOW_R = libwallycore.WALLY_TX_DUMMY_SIG_LOW_R
WALLY_SIGHASH_ALL = libwallycore.WALLY_SIGHASH_ALL
WALLY_SIGHASH_NONE = libwallycore.WALLY_SIGHASH_NONE
WALLY_SIGHASH_SINGLE = libwallycore.WALLY_SIGHASH_SINGLE
WALLY_SIGHASH_FORKID = libwallycore.WALLY_SIGHASH_FORKID
WALLY_SIGHASH_ANYONECANPAY = libwallycore.WALLY_SIGHASH_ANYONECANPAY
WALLY_TX_ASSET_CT_VALUE_PREFIX_A = libwallycore.WALLY_TX_ASSET_CT_VALUE_PREFIX_A
WALLY_TX_ASSET_CT_VALUE_PREFIX_B = libwallycore.WALLY_TX_ASSET_CT_VALUE_PREFIX_B
WALLY_TX_ASSET_CT_ASSET_PREFIX_A = libwallycore.WALLY_TX_ASSET_CT_ASSET_PREFIX_A
WALLY_TX_ASSET_CT_ASSET_PREFIX_B = libwallycore.WALLY_TX_ASSET_CT_ASSET_PREFIX_B
WALLY_TX_ASSET_CT_NONCE_PREFIX_A = libwallycore.WALLY_TX_ASSET_CT_NONCE_PREFIX_A
WALLY_TX_ASSET_CT_NONCE_PREFIX_B = libwallycore.WALLY_TX_ASSET_CT_NONCE_PREFIX_B
WALLY_TX_ASSET_TAG_LEN = libwallycore.WALLY_TX_ASSET_TAG_LEN
WALLY_TX_ASSET_CT_VALUE_LEN = libwallycore.WALLY_TX_ASSET_CT_VALUE_LEN
WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN = libwallycore.WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN
WALLY_TX_ASSET_CT_ASSET_LEN = libwallycore.WALLY_TX_ASSET_CT_ASSET_LEN
WALLY_TX_ASSET_CT_NONCE_LEN = libwallycore.WALLY_TX_ASSET_CT_NONCE_LEN
WALLY_TX_ASSET_CT_LEN = libwallycore.WALLY_TX_ASSET_CT_LEN
WALLY_TX_ISSUANCE_FLAG = libwallycore.WALLY_TX_ISSUANCE_FLAG
WALLY_TX_PEGIN_FLAG = libwallycore.WALLY_TX_PEGIN_FLAG
WALLY_TX_INDEX_MASK = libwallycore.WALLY_TX_INDEX_MASK

def tx_witness_stack_init(allocation_len):
    return libwallycore.tx_witness_stack_init(allocation_len)
tx_witness_stack_init = libwallycore.tx_witness_stack_init

def tx_witness_stack_clone(stack):
    return libwallycore.tx_witness_stack_clone(stack)
tx_witness_stack_clone = libwallycore.tx_witness_stack_clone

def tx_witness_stack_add(stack, witness):
    return libwallycore.tx_witness_stack_add(stack, witness)
tx_witness_stack_add = libwallycore.tx_witness_stack_add

def tx_witness_stack_add_dummy(stack, flags):
    return libwallycore.tx_witness_stack_add_dummy(stack, flags)
tx_witness_stack_add_dummy = libwallycore.tx_witness_stack_add_dummy

def tx_witness_stack_set(stack, index, witness):
    return libwallycore.tx_witness_stack_set(stack, index, witness)
tx_witness_stack_set = libwallycore.tx_witness_stack_set

def tx_witness_stack_set_dummy(stack, index, flags):
    return libwallycore.tx_witness_stack_set_dummy(stack, index, flags)
tx_witness_stack_set_dummy = libwallycore.tx_witness_stack_set_dummy

def tx_witness_stack_free(stack):
    return libwallycore.tx_witness_stack_free(stack)
tx_witness_stack_free = libwallycore.tx_witness_stack_free

def tx_input_init(txhash, utxo_index, sequence, script, witness):
    return libwallycore.tx_input_init(txhash, utxo_index, sequence, script, witness)
tx_input_init = libwallycore.tx_input_init

def tx_input_free(input):
    return libwallycore.tx_input_free(input)
tx_input_free = libwallycore.tx_input_free

def tx_output_init(satoshi, script):
    return libwallycore.tx_output_init(satoshi, script)
tx_output_init = libwallycore.tx_output_init

def tx_output_clone(tx_output_in):
    return libwallycore.tx_output_clone(tx_output_in)
tx_output_clone = libwallycore.tx_output_clone

def tx_output_free(output):
    return libwallycore.tx_output_free(output)
tx_output_free = libwallycore.tx_output_free

def tx_init(version, locktime, inputs_allocation_len, outputs_allocation_len):
    return libwallycore.tx_init(version, locktime, inputs_allocation_len, outputs_allocation_len)
tx_init = libwallycore.tx_init

def tx_clone_alloc(tx, flags):
    return libwallycore.tx_clone_alloc(tx, flags)
tx_clone_alloc = libwallycore.tx_clone_alloc

def tx_add_input(tx, input):
    return libwallycore.tx_add_input(tx, input)
tx_add_input = libwallycore.tx_add_input

def tx_add_input_at(tx, index, input):
    return libwallycore.tx_add_input_at(tx, index, input)
tx_add_input_at = libwallycore.tx_add_input_at

def tx_add_raw_input(tx, txhash, utxo_index, sequence, script, witness, flags):
    return libwallycore.tx_add_raw_input(tx, txhash, utxo_index, sequence, script, witness, flags)
tx_add_raw_input = libwallycore.tx_add_raw_input

def tx_add_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, flags):
    return libwallycore.tx_add_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, flags)
tx_add_raw_input_at = libwallycore.tx_add_raw_input_at

def tx_remove_input(tx, index):
    return libwallycore.tx_remove_input(tx, index)
tx_remove_input = libwallycore.tx_remove_input

def tx_set_input_script(tx, index, script):
    return libwallycore.tx_set_input_script(tx, index, script)
tx_set_input_script = libwallycore.tx_set_input_script

def tx_set_input_witness(tx, index, stack):
    return libwallycore.tx_set_input_witness(tx, index, stack)
tx_set_input_witness = libwallycore.tx_set_input_witness

def tx_add_output(tx, output):
    return libwallycore.tx_add_output(tx, output)
tx_add_output = libwallycore.tx_add_output

def tx_add_output_at(tx, index, output):
    return libwallycore.tx_add_output_at(tx, index, output)
tx_add_output_at = libwallycore.tx_add_output_at

def tx_add_raw_output(tx, satoshi, script, flags):
    return libwallycore.tx_add_raw_output(tx, satoshi, script, flags)
tx_add_raw_output = libwallycore.tx_add_raw_output

def tx_add_raw_output_at(tx, index, satoshi, script, flags):
    return libwallycore.tx_add_raw_output_at(tx, index, satoshi, script, flags)
tx_add_raw_output_at = libwallycore.tx_add_raw_output_at

def tx_remove_output(tx, index):
    return libwallycore.tx_remove_output(tx, index)
tx_remove_output = libwallycore.tx_remove_output

def tx_get_witness_count(tx):
    return libwallycore.tx_get_witness_count(tx)
tx_get_witness_count = libwallycore.tx_get_witness_count

def tx_free(tx):
    return libwallycore.tx_free(tx)
tx_free = libwallycore.tx_free

def tx_get_txid(tx, bytes_out):
    return libwallycore.tx_get_txid(tx, bytes_out)
tx_get_txid = libwallycore.tx_get_txid

def tx_get_length(tx, flags):
    return libwallycore.tx_get_length(tx, flags)
tx_get_length = libwallycore.tx_get_length

def tx_from_bytes(bytes, flags):
    return libwallycore.tx_from_bytes(bytes, flags)
tx_from_bytes = libwallycore.tx_from_bytes

def tx_from_hex(hex, flags):
    return libwallycore.tx_from_hex(hex, flags)
tx_from_hex = libwallycore.tx_from_hex

def tx_to_bytes(tx, flags, bytes_out):
    return libwallycore.tx_to_bytes(tx, flags, bytes_out)
tx_to_bytes = libwallycore.tx_to_bytes

def tx_to_hex(tx, flags):
    return libwallycore.tx_to_hex(tx, flags)
tx_to_hex = libwallycore.tx_to_hex

def tx_get_weight(tx):
    return libwallycore.tx_get_weight(tx)
tx_get_weight = libwallycore.tx_get_weight

def tx_get_vsize(tx):
    return libwallycore.tx_get_vsize(tx)
tx_get_vsize = libwallycore.tx_get_vsize

def tx_vsize_from_weight(weight):
    return libwallycore.tx_vsize_from_weight(weight)
tx_vsize_from_weight = libwallycore.tx_vsize_from_weight

def tx_get_total_output_satoshi(tx):
    return libwallycore.tx_get_total_output_satoshi(tx)
tx_get_total_output_satoshi = libwallycore.tx_get_total_output_satoshi

def tx_get_btc_signature_hash(tx, index, script, satoshi, sighash, flags, bytes_out):
    return libwallycore.tx_get_btc_signature_hash(tx, index, script, satoshi, sighash, flags, bytes_out)
tx_get_btc_signature_hash = libwallycore.tx_get_btc_signature_hash

def tx_get_signature_hash(tx, index, script, extra, extra_offset, satoshi, sighash, tx_sighash, flags, bytes_out):
    return libwallycore.tx_get_signature_hash(tx, index, script, extra, extra_offset, satoshi, sighash, tx_sighash, flags, bytes_out)
tx_get_signature_hash = libwallycore.tx_get_signature_hash

def tx_is_coinbase(tx):
    return libwallycore.tx_is_coinbase(tx)
tx_is_coinbase = libwallycore.tx_is_coinbase

def tx_elements_input_issuance_set(input, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof):
    return libwallycore.tx_elements_input_issuance_set(input, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof)
tx_elements_input_issuance_set = libwallycore.tx_elements_input_issuance_set

def tx_elements_input_issuance_free(input):
    return libwallycore.tx_elements_input_issuance_free(input)
tx_elements_input_issuance_free = libwallycore.tx_elements_input_issuance_free

def tx_elements_input_init(txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness):
    return libwallycore.tx_elements_input_init(txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness)
tx_elements_input_init = libwallycore.tx_elements_input_init

def tx_elements_input_is_pegin(input):
    return libwallycore.tx_elements_input_is_pegin(input)
tx_elements_input_is_pegin = libwallycore.tx_elements_input_is_pegin

def tx_elements_output_commitment_set(output, asset, value, nonce, surjectionproof, rangeproof):
    return libwallycore.tx_elements_output_commitment_set(output, asset, value, nonce, surjectionproof, rangeproof)
tx_elements_output_commitment_set = libwallycore.tx_elements_output_commitment_set

def tx_elements_output_commitment_free(output):
    return libwallycore.tx_elements_output_commitment_free(output)
tx_elements_output_commitment_free = libwallycore.tx_elements_output_commitment_free

def tx_elements_output_init(script, asset, value, nonce, surjectionproof, rangeproof):
    return libwallycore.tx_elements_output_init(script, asset, value, nonce, surjectionproof, rangeproof)
tx_elements_output_init = libwallycore.tx_elements_output_init

def tx_add_elements_raw_input(tx, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags):
    return libwallycore.tx_add_elements_raw_input(tx, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags)
tx_add_elements_raw_input = libwallycore.tx_add_elements_raw_input

def tx_add_elements_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags):
    return libwallycore.tx_add_elements_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags)
tx_add_elements_raw_input_at = libwallycore.tx_add_elements_raw_input_at

def tx_add_elements_raw_output(tx, script, asset, value, nonce, surjectionproof, rangeproof, flags):
    return libwallycore.tx_add_elements_raw_output(tx, script, asset, value, nonce, surjectionproof, rangeproof, flags)
tx_add_elements_raw_output = libwallycore.tx_add_elements_raw_output

def tx_add_elements_raw_output_at(tx, index, script, asset, value, nonce, surjectionproof, rangeproof, flags):
    return libwallycore.tx_add_elements_raw_output_at(tx, index, script, asset, value, nonce, surjectionproof, rangeproof, flags)
tx_add_elements_raw_output_at = libwallycore.tx_add_elements_raw_output_at

def tx_is_elements(tx):
    return libwallycore.tx_is_elements(tx)
tx_is_elements = libwallycore.tx_is_elements

def tx_confidential_value_from_satoshi(satoshi, bytes_out):
    return libwallycore.tx_confidential_value_from_satoshi(satoshi, bytes_out)
tx_confidential_value_from_satoshi = libwallycore.tx_confidential_value_from_satoshi

def tx_confidential_value_to_satoshi(value):
    return libwallycore.tx_confidential_value_to_satoshi(value)
tx_confidential_value_to_satoshi = libwallycore.tx_confidential_value_to_satoshi

def tx_get_elements_signature_hash(tx, index, script, value, sighash, flags, bytes_out):
    return libwallycore.tx_get_elements_signature_hash(tx, index, script, value, sighash, flags, bytes_out)
tx_get_elements_signature_hash = libwallycore.tx_get_elements_signature_hash

def tx_elements_issuance_generate_entropy(txhash, index, contract_hash, bytes_out):
    return libwallycore.tx_elements_issuance_generate_entropy(txhash, index, contract_hash, bytes_out)
tx_elements_issuance_generate_entropy = libwallycore.tx_elements_issuance_generate_entropy

def tx_elements_issuance_calculate_asset(entropy, bytes_out):
    return libwallycore.tx_elements_issuance_calculate_asset(entropy, bytes_out)
tx_elements_issuance_calculate_asset = libwallycore.tx_elements_issuance_calculate_asset

def tx_elements_issuance_calculate_reissuance_token(entropy, flags, bytes_out):
    return libwallycore.tx_elements_issuance_calculate_reissuance_token(entropy, flags, bytes_out)
tx_elements_issuance_calculate_reissuance_token = libwallycore.tx_elements_issuance_calculate_reissuance_token
LIBWALLY_CORE_TRANSACTION_INT_H = libwallycore.LIBWALLY_CORE_TRANSACTION_INT_H

def tx_input_get_txhash(tx_input_in, bytes_out):
    return libwallycore.tx_input_get_txhash(tx_input_in, bytes_out)
tx_input_get_txhash = libwallycore.tx_input_get_txhash

def tx_input_get_script(tx_input_in, bytes_out):
    return libwallycore.tx_input_get_script(tx_input_in, bytes_out)
tx_input_get_script = libwallycore.tx_input_get_script

def tx_input_get_script_len(tx_input_in):
    return libwallycore.tx_input_get_script_len(tx_input_in)
tx_input_get_script_len = libwallycore.tx_input_get_script_len

def tx_input_get_witness(tx_input_in, index, bytes_out):
    return libwallycore.tx_input_get_witness(tx_input_in, index, bytes_out)
tx_input_get_witness = libwallycore.tx_input_get_witness

def tx_input_get_witness_len(tx_input_in, index):
    return libwallycore.tx_input_get_witness_len(tx_input_in, index)
tx_input_get_witness_len = libwallycore.tx_input_get_witness_len

def tx_input_get_index(tx_input_in):
    return libwallycore.tx_input_get_index(tx_input_in)
tx_input_get_index = libwallycore.tx_input_get_index

def tx_input_get_sequence(tx_input_in):
    return libwallycore.tx_input_get_sequence(tx_input_in)
tx_input_get_sequence = libwallycore.tx_input_get_sequence

def tx_input_set_txhash(tx_input, txhash, len):
    return libwallycore.tx_input_set_txhash(tx_input, txhash, len)
tx_input_set_txhash = libwallycore.tx_input_set_txhash

def tx_input_set_script(tx_input, script):
    return libwallycore.tx_input_set_script(tx_input, script)
tx_input_set_script = libwallycore.tx_input_set_script

def tx_input_set_witness(tx_input, witness):
    return libwallycore.tx_input_set_witness(tx_input, witness)
tx_input_set_witness = libwallycore.tx_input_set_witness

def tx_input_set_index(tx_input, index):
    return libwallycore.tx_input_set_index(tx_input, index)
tx_input_set_index = libwallycore.tx_input_set_index

def tx_input_set_sequence(tx_input, sequence):
    return libwallycore.tx_input_set_sequence(tx_input, sequence)
tx_input_set_sequence = libwallycore.tx_input_set_sequence

def tx_input_get_blinding_nonce(tx_input_in, bytes_out):
    return libwallycore.tx_input_get_blinding_nonce(tx_input_in, bytes_out)
tx_input_get_blinding_nonce = libwallycore.tx_input_get_blinding_nonce

def tx_input_get_entropy(tx_input_in, bytes_out):
    return libwallycore.tx_input_get_entropy(tx_input_in, bytes_out)
tx_input_get_entropy = libwallycore.tx_input_get_entropy

def tx_input_get_issuance_amount(tx_input_in, bytes_out):
    return libwallycore.tx_input_get_issuance_amount(tx_input_in, bytes_out)
tx_input_get_issuance_amount = libwallycore.tx_input_get_issuance_amount

def tx_input_get_issuance_amount_len(tx_input_in):
    return libwallycore.tx_input_get_issuance_amount_len(tx_input_in)
tx_input_get_issuance_amount_len = libwallycore.tx_input_get_issuance_amount_len

def tx_input_get_inflation_keys(tx_input_in, bytes_out):
    return libwallycore.tx_input_get_inflation_keys(tx_input_in, bytes_out)
tx_input_get_inflation_keys = libwallycore.tx_input_get_inflation_keys

def tx_input_get_inflation_keys_len(tx_input_in):
    return libwallycore.tx_input_get_inflation_keys_len(tx_input_in)
tx_input_get_inflation_keys_len = libwallycore.tx_input_get_inflation_keys_len

def tx_input_get_issuance_amount_rangeproof(tx_input_in, bytes_out):
    return libwallycore.tx_input_get_issuance_amount_rangeproof(tx_input_in, bytes_out)
tx_input_get_issuance_amount_rangeproof = libwallycore.tx_input_get_issuance_amount_rangeproof

def tx_input_get_issuance_amount_rangeproof_len(tx_input_in):
    return libwallycore.tx_input_get_issuance_amount_rangeproof_len(tx_input_in)
tx_input_get_issuance_amount_rangeproof_len = libwallycore.tx_input_get_issuance_amount_rangeproof_len

def tx_input_get_inflation_keys_rangeproof(tx_input_in, bytes_out):
    return libwallycore.tx_input_get_inflation_keys_rangeproof(tx_input_in, bytes_out)
tx_input_get_inflation_keys_rangeproof = libwallycore.tx_input_get_inflation_keys_rangeproof

def tx_input_get_inflation_keys_rangeproof_len(tx_input_in):
    return libwallycore.tx_input_get_inflation_keys_rangeproof_len(tx_input_in)
tx_input_get_inflation_keys_rangeproof_len = libwallycore.tx_input_get_inflation_keys_rangeproof_len

def tx_input_set_blinding_nonce(tx_input_in, blinding_nonce, blinding_nonce_len):
    return libwallycore.tx_input_set_blinding_nonce(tx_input_in, blinding_nonce, blinding_nonce_len)
tx_input_set_blinding_nonce = libwallycore.tx_input_set_blinding_nonce

def tx_input_set_entropy(tx_input_in, entropy):
    return libwallycore.tx_input_set_entropy(tx_input_in, entropy)
tx_input_set_entropy = libwallycore.tx_input_set_entropy

def tx_input_set_inflation_keys(tx_input_in, inflation_keys):
    return libwallycore.tx_input_set_inflation_keys(tx_input_in, inflation_keys)
tx_input_set_inflation_keys = libwallycore.tx_input_set_inflation_keys

def tx_input_set_inflation_keys_rangeproof(tx_input_in, inflation_keys_rangeproof):
    return libwallycore.tx_input_set_inflation_keys_rangeproof(tx_input_in, inflation_keys_rangeproof)
tx_input_set_inflation_keys_rangeproof = libwallycore.tx_input_set_inflation_keys_rangeproof

def tx_input_set_issuance_amount(tx_input_in, issuance_amount):
    return libwallycore.tx_input_set_issuance_amount(tx_input_in, issuance_amount)
tx_input_set_issuance_amount = libwallycore.tx_input_set_issuance_amount

def tx_input_set_issuance_amount_rangeproof(tx_input_in, issuance_amount_rangeproof):
    return libwallycore.tx_input_set_issuance_amount_rangeproof(tx_input_in, issuance_amount_rangeproof)
tx_input_set_issuance_amount_rangeproof = libwallycore.tx_input_set_issuance_amount_rangeproof

def tx_output_get_script(tx_output_in, bytes_out):
    return libwallycore.tx_output_get_script(tx_output_in, bytes_out)
tx_output_get_script = libwallycore.tx_output_get_script

def tx_output_get_script_len(tx_output_in):
    return libwallycore.tx_output_get_script_len(tx_output_in)
tx_output_get_script_len = libwallycore.tx_output_get_script_len

def tx_output_get_satoshi(tx_output_in):
    return libwallycore.tx_output_get_satoshi(tx_output_in)
tx_output_get_satoshi = libwallycore.tx_output_get_satoshi

def tx_output_set_script(tx_output_in, script):
    return libwallycore.tx_output_set_script(tx_output_in, script)
tx_output_set_script = libwallycore.tx_output_set_script

def tx_output_set_satoshi(tx_output_in, satoshi):
    return libwallycore.tx_output_set_satoshi(tx_output_in, satoshi)
tx_output_set_satoshi = libwallycore.tx_output_set_satoshi

def tx_output_get_asset(tx_output_in, bytes_out):
    return libwallycore.tx_output_get_asset(tx_output_in, bytes_out)
tx_output_get_asset = libwallycore.tx_output_get_asset

def tx_output_get_asset_len(tx_output_in):
    return libwallycore.tx_output_get_asset_len(tx_output_in)
tx_output_get_asset_len = libwallycore.tx_output_get_asset_len

def tx_output_get_value(tx_output_in, bytes_out):
    return libwallycore.tx_output_get_value(tx_output_in, bytes_out)
tx_output_get_value = libwallycore.tx_output_get_value

def tx_output_get_value_len(tx_output_in):
    return libwallycore.tx_output_get_value_len(tx_output_in)
tx_output_get_value_len = libwallycore.tx_output_get_value_len

def tx_output_get_nonce(tx_output_in, bytes_out):
    return libwallycore.tx_output_get_nonce(tx_output_in, bytes_out)
tx_output_get_nonce = libwallycore.tx_output_get_nonce

def tx_output_get_nonce_len(tx_output_in):
    return libwallycore.tx_output_get_nonce_len(tx_output_in)
tx_output_get_nonce_len = libwallycore.tx_output_get_nonce_len

def tx_output_get_surjectionproof(tx_output_in, bytes_out):
    return libwallycore.tx_output_get_surjectionproof(tx_output_in, bytes_out)
tx_output_get_surjectionproof = libwallycore.tx_output_get_surjectionproof

def tx_output_get_surjectionproof_len(tx_output_in):
    return libwallycore.tx_output_get_surjectionproof_len(tx_output_in)
tx_output_get_surjectionproof_len = libwallycore.tx_output_get_surjectionproof_len

def tx_output_get_rangeproof(tx_output_in, bytes_out):
    return libwallycore.tx_output_get_rangeproof(tx_output_in, bytes_out)
tx_output_get_rangeproof = libwallycore.tx_output_get_rangeproof

def tx_output_get_rangeproof_len(tx_output_in):
    return libwallycore.tx_output_get_rangeproof_len(tx_output_in)
tx_output_get_rangeproof_len = libwallycore.tx_output_get_rangeproof_len

def tx_output_set_asset(tx_output_in, asset):
    return libwallycore.tx_output_set_asset(tx_output_in, asset)
tx_output_set_asset = libwallycore.tx_output_set_asset

def tx_output_set_value(tx_output_in, value):
    return libwallycore.tx_output_set_value(tx_output_in, value)
tx_output_set_value = libwallycore.tx_output_set_value

def tx_output_set_nonce(tx_output_in, nonce):
    return libwallycore.tx_output_set_nonce(tx_output_in, nonce)
tx_output_set_nonce = libwallycore.tx_output_set_nonce

def tx_output_set_surjectionproof(tx_output_in, surjectionproof):
    return libwallycore.tx_output_set_surjectionproof(tx_output_in, surjectionproof)
tx_output_set_surjectionproof = libwallycore.tx_output_set_surjectionproof

def tx_output_set_rangeproof(tx_output_in, rangeproof):
    return libwallycore.tx_output_set_rangeproof(tx_output_in, rangeproof)
tx_output_set_rangeproof = libwallycore.tx_output_set_rangeproof

def tx_get_version(tx_in):
    return libwallycore.tx_get_version(tx_in)
tx_get_version = libwallycore.tx_get_version

def tx_get_locktime(tx_in):
    return libwallycore.tx_get_locktime(tx_in)
tx_get_locktime = libwallycore.tx_get_locktime

def tx_get_num_inputs(tx_in):
    return libwallycore.tx_get_num_inputs(tx_in)
tx_get_num_inputs = libwallycore.tx_get_num_inputs

def tx_get_num_outputs(tx_in):
    return libwallycore.tx_get_num_outputs(tx_in)
tx_get_num_outputs = libwallycore.tx_get_num_outputs

def tx_get_input_txhash(tx_in, index, bytes_out):
    return libwallycore.tx_get_input_txhash(tx_in, index, bytes_out)
tx_get_input_txhash = libwallycore.tx_get_input_txhash

def tx_get_input_script(tx_in, index, bytes_out):
    return libwallycore.tx_get_input_script(tx_in, index, bytes_out)
tx_get_input_script = libwallycore.tx_get_input_script

def tx_get_input_script_len(tx_in, index):
    return libwallycore.tx_get_input_script_len(tx_in, index)
tx_get_input_script_len = libwallycore.tx_get_input_script_len

def tx_get_input_witness(tx_in, index, wit_index, bytes_out):
    return libwallycore.tx_get_input_witness(tx_in, index, wit_index, bytes_out)
tx_get_input_witness = libwallycore.tx_get_input_witness

def tx_get_input_witness_len(tx_in, index, wit_index):
    return libwallycore.tx_get_input_witness_len(tx_in, index, wit_index)
tx_get_input_witness_len = libwallycore.tx_get_input_witness_len

def tx_get_input_index(tx_in, index):
    return libwallycore.tx_get_input_index(tx_in, index)
tx_get_input_index = libwallycore.tx_get_input_index

def tx_get_input_sequence(tx_in, index):
    return libwallycore.tx_get_input_sequence(tx_in, index)
tx_get_input_sequence = libwallycore.tx_get_input_sequence

def tx_set_input_index(tx_in, index, index_in):
    return libwallycore.tx_set_input_index(tx_in, index, index_in)
tx_set_input_index = libwallycore.tx_set_input_index

def tx_set_input_sequence(tx_in, index, sequence):
    return libwallycore.tx_set_input_sequence(tx_in, index, sequence)
tx_set_input_sequence = libwallycore.tx_set_input_sequence

def tx_set_input_txhash(tx_in, index, txhash, len):
    return libwallycore.tx_set_input_txhash(tx_in, index, txhash, len)
tx_set_input_txhash = libwallycore.tx_set_input_txhash

def tx_get_input_blinding_nonce(tx_in, index, bytes_out):
    return libwallycore.tx_get_input_blinding_nonce(tx_in, index, bytes_out)
tx_get_input_blinding_nonce = libwallycore.tx_get_input_blinding_nonce

def tx_get_input_entropy(tx_in, index, bytes_out):
    return libwallycore.tx_get_input_entropy(tx_in, index, bytes_out)
tx_get_input_entropy = libwallycore.tx_get_input_entropy

def tx_get_input_issuance_amount(tx_in, index, bytes_out):
    return libwallycore.tx_get_input_issuance_amount(tx_in, index, bytes_out)
tx_get_input_issuance_amount = libwallycore.tx_get_input_issuance_amount

def tx_get_input_issuance_amount_len(tx_in, index):
    return libwallycore.tx_get_input_issuance_amount_len(tx_in, index)
tx_get_input_issuance_amount_len = libwallycore.tx_get_input_issuance_amount_len

def tx_get_input_inflation_keys(tx_in, index, bytes_out):
    return libwallycore.tx_get_input_inflation_keys(tx_in, index, bytes_out)
tx_get_input_inflation_keys = libwallycore.tx_get_input_inflation_keys

def tx_get_input_inflation_keys_len(tx_in, index):
    return libwallycore.tx_get_input_inflation_keys_len(tx_in, index)
tx_get_input_inflation_keys_len = libwallycore.tx_get_input_inflation_keys_len

def tx_get_input_issuance_amount_rangeproof(tx_in, index, bytes_out):
    return libwallycore.tx_get_input_issuance_amount_rangeproof(tx_in, index, bytes_out)
tx_get_input_issuance_amount_rangeproof = libwallycore.tx_get_input_issuance_amount_rangeproof

def tx_get_input_issuance_amount_rangeproof_len(tx_in, index):
    return libwallycore.tx_get_input_issuance_amount_rangeproof_len(tx_in, index)
tx_get_input_issuance_amount_rangeproof_len = libwallycore.tx_get_input_issuance_amount_rangeproof_len

def tx_get_input_inflation_keys_rangeproof(tx_in, index, bytes_out):
    return libwallycore.tx_get_input_inflation_keys_rangeproof(tx_in, index, bytes_out)
tx_get_input_inflation_keys_rangeproof = libwallycore.tx_get_input_inflation_keys_rangeproof

def tx_get_input_inflation_keys_rangeproof_len(tx_in, index):
    return libwallycore.tx_get_input_inflation_keys_rangeproof_len(tx_in, index)
tx_get_input_inflation_keys_rangeproof_len = libwallycore.tx_get_input_inflation_keys_rangeproof_len

def tx_set_input_blinding_nonce(tx_in, index, blinding_nonce, blinding_nonce_len):
    return libwallycore.tx_set_input_blinding_nonce(tx_in, index, blinding_nonce, blinding_nonce_len)
tx_set_input_blinding_nonce = libwallycore.tx_set_input_blinding_nonce

def tx_set_input_entropy(tx_in, index, entropy):
    return libwallycore.tx_set_input_entropy(tx_in, index, entropy)
tx_set_input_entropy = libwallycore.tx_set_input_entropy

def tx_set_input_inflation_keys(tx_in, index, inflation_keys):
    return libwallycore.tx_set_input_inflation_keys(tx_in, index, inflation_keys)
tx_set_input_inflation_keys = libwallycore.tx_set_input_inflation_keys

def tx_set_input_inflation_keys_rangeproof(tx_in, index, inflation_keys_rangeproof):
    return libwallycore.tx_set_input_inflation_keys_rangeproof(tx_in, index, inflation_keys_rangeproof)
tx_set_input_inflation_keys_rangeproof = libwallycore.tx_set_input_inflation_keys_rangeproof

def tx_set_input_issuance_amount(tx_in, index, issuance_amount):
    return libwallycore.tx_set_input_issuance_amount(tx_in, index, issuance_amount)
tx_set_input_issuance_amount = libwallycore.tx_set_input_issuance_amount

def tx_set_input_issuance_amount_rangeproof(tx_in, index, issuance_amount_rangeproof):
    return libwallycore.tx_set_input_issuance_amount_rangeproof(tx_in, index, issuance_amount_rangeproof)
tx_set_input_issuance_amount_rangeproof = libwallycore.tx_set_input_issuance_amount_rangeproof

def tx_get_output_script(tx_in, index, bytes_out):
    return libwallycore.tx_get_output_script(tx_in, index, bytes_out)
tx_get_output_script = libwallycore.tx_get_output_script

def tx_get_output_script_len(tx_in, index):
    return libwallycore.tx_get_output_script_len(tx_in, index)
tx_get_output_script_len = libwallycore.tx_get_output_script_len

def tx_get_output_satoshi(tx_in, index):
    return libwallycore.tx_get_output_satoshi(tx_in, index)
tx_get_output_satoshi = libwallycore.tx_get_output_satoshi

def tx_set_output_script(tx_in, index, script):
    return libwallycore.tx_set_output_script(tx_in, index, script)
tx_set_output_script = libwallycore.tx_set_output_script

def tx_set_output_satoshi(tx_in, index, satoshi):
    return libwallycore.tx_set_output_satoshi(tx_in, index, satoshi)
tx_set_output_satoshi = libwallycore.tx_set_output_satoshi

def tx_get_output_asset(tx_in, index, bytes_out):
    return libwallycore.tx_get_output_asset(tx_in, index, bytes_out)
tx_get_output_asset = libwallycore.tx_get_output_asset

def tx_get_output_value(tx_in, index, bytes_out):
    return libwallycore.tx_get_output_value(tx_in, index, bytes_out)
tx_get_output_value = libwallycore.tx_get_output_value

def tx_get_output_value_len(tx_in, index):
    return libwallycore.tx_get_output_value_len(tx_in, index)
tx_get_output_value_len = libwallycore.tx_get_output_value_len

def tx_get_output_nonce(tx_in, index, bytes_out):
    return libwallycore.tx_get_output_nonce(tx_in, index, bytes_out)
tx_get_output_nonce = libwallycore.tx_get_output_nonce

def tx_get_output_surjectionproof(tx_in, index, bytes_out):
    return libwallycore.tx_get_output_surjectionproof(tx_in, index, bytes_out)
tx_get_output_surjectionproof = libwallycore.tx_get_output_surjectionproof

def tx_get_output_surjectionproof_len(tx_in, index):
    return libwallycore.tx_get_output_surjectionproof_len(tx_in, index)
tx_get_output_surjectionproof_len = libwallycore.tx_get_output_surjectionproof_len

def tx_get_output_rangeproof(tx_in, index, bytes_out):
    return libwallycore.tx_get_output_rangeproof(tx_in, index, bytes_out)
tx_get_output_rangeproof = libwallycore.tx_get_output_rangeproof

def tx_get_output_rangeproof_len(tx_in, index):
    return libwallycore.tx_get_output_rangeproof_len(tx_in, index)
tx_get_output_rangeproof_len = libwallycore.tx_get_output_rangeproof_len

def tx_set_output_asset(tx_in, index, asset):
    return libwallycore.tx_set_output_asset(tx_in, index, asset)
tx_set_output_asset = libwallycore.tx_set_output_asset

def tx_set_output_value(tx_in, index, value):
    return libwallycore.tx_set_output_value(tx_in, index, value)
tx_set_output_value = libwallycore.tx_set_output_value

def tx_set_output_nonce(tx_in, index, nonce):
    return libwallycore.tx_set_output_nonce(tx_in, index, nonce)
tx_set_output_nonce = libwallycore.tx_set_output_nonce

def tx_set_output_surjectionproof(tx_in, index, surjectionproof):
    return libwallycore.tx_set_output_surjectionproof(tx_in, index, surjectionproof)
tx_set_output_surjectionproof = libwallycore.tx_set_output_surjectionproof

def tx_set_output_rangeproof(tx_in, index, rangeproof):
    return libwallycore.tx_set_output_rangeproof(tx_in, index, rangeproof)
tx_set_output_rangeproof = libwallycore.tx_set_output_rangeproof
ASSET_TAG_LEN = libwallycore.ASSET_TAG_LEN
BLINDING_FACTOR_LEN = libwallycore.BLINDING_FACTOR_LEN
ASSET_GENERATOR_LEN = libwallycore.ASSET_GENERATOR_LEN
ASSET_COMMITMENT_LEN = libwallycore.ASSET_COMMITMENT_LEN
ASSET_RANGEPROOF_MAX_LEN = libwallycore.ASSET_RANGEPROOF_MAX_LEN

def asset_generator_from_bytes(asset, abf, bytes_out):
    return libwallycore.asset_generator_from_bytes(asset, abf, bytes_out)
asset_generator_from_bytes = libwallycore.asset_generator_from_bytes

def asset_final_vbf(values, num_inputs, abf, vbf, bytes_out):
    return libwallycore.asset_final_vbf(values, num_inputs, abf, vbf, bytes_out)
asset_final_vbf = libwallycore.asset_final_vbf

def asset_value_commitment(value, vbf, generator, bytes_out):
    return libwallycore.asset_value_commitment(value, vbf, generator, bytes_out)
asset_value_commitment = libwallycore.asset_value_commitment

def asset_rangeproof_with_nonce(value, nonce_hash, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out):
    return libwallycore.asset_rangeproof_with_nonce(value, nonce_hash, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out)
asset_rangeproof_with_nonce = libwallycore.asset_rangeproof_with_nonce

def asset_rangeproof(value, pub_key, priv_key, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out):
    return libwallycore.asset_rangeproof(value, pub_key, priv_key, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out)
asset_rangeproof = libwallycore.asset_rangeproof

def asset_surjectionproof_size(num_inputs):
    return libwallycore.asset_surjectionproof_size(num_inputs)
asset_surjectionproof_size = libwallycore.asset_surjectionproof_size

def asset_surjectionproof(output_asset, output_abf, output_generator, bytes, asset, abf, generator, bytes_out):
    return libwallycore.asset_surjectionproof(output_asset, output_abf, output_generator, bytes, asset, abf, generator, bytes_out)
asset_surjectionproof = libwallycore.asset_surjectionproof

def asset_unblind_with_nonce(nonce_hash, proof, commitment, extra, generator, asset_out, abf_out, vbf_out):
    return libwallycore.asset_unblind_with_nonce(nonce_hash, proof, commitment, extra, generator, asset_out, abf_out, vbf_out)
asset_unblind_with_nonce = libwallycore.asset_unblind_with_nonce

def asset_unblind(pub_key, priv_key, proof, commitment, extra, generator, asset_out, abf_out, vbf_out):
    return libwallycore.asset_unblind(pub_key, priv_key, proof, commitment, extra, generator, asset_out, abf_out, vbf_out)
asset_unblind = libwallycore.asset_unblind

def asset_blinding_key_from_seed(bytes, bytes_out):
    return libwallycore.asset_blinding_key_from_seed(bytes, bytes_out)
asset_blinding_key_from_seed = libwallycore.asset_blinding_key_from_seed

def asset_blinding_key_to_ec_private_key(bytes, script, bytes_out):
    return libwallycore.asset_blinding_key_to_ec_private_key(bytes, script, bytes_out)
asset_blinding_key_to_ec_private_key = libwallycore.asset_blinding_key_to_ec_private_key

def asset_pak_whitelistproof_size(num_keys):
    return libwallycore.asset_pak_whitelistproof_size(num_keys)
asset_pak_whitelistproof_size = libwallycore.asset_pak_whitelistproof_size

def asset_pak_whitelistproof(online_keys, offline_keys, key_index, sub_pubkey, online_priv_key, summed_key, bytes_out):
    return libwallycore.asset_pak_whitelistproof(online_keys, offline_keys, key_index, sub_pubkey, online_priv_key, summed_key, bytes_out)
asset_pak_whitelistproof = libwallycore.asset_pak_whitelistproof
# This file is compatible with both classic and new-style classes.


# Support functions for the SWIG python wrapper
from sys import version as _wally_py_version

def _wrap_bin(fn, length, resize=False):
    """ Wrap functions that take an output buffer to create/return it """
    def wrapped(*args):
        n = length(*args) if callable(length) else length
        buf = bytearray(n)
        ret = fn(*list(args)+[buf])
        if resize:
            # Truncate buf to bytes written if needed. Also assert the
            # wrapper allocated enough space for the returned value to fit.
            assert ret <= n
            return buf[0:ret] if ret != n else buf
        return (ret, buf) if ret is not None else buf
    return wrapped

def _wrap_with_defaults(fn, min_args, max_args):
    """ Wrap functions that take argument defaults """
    def wrapped(*args):
        args = list(args)
        n = len(args)
        assert n >= min_args
        r = max_args - n
        return fn(*args+[None]*r)
    return wrapped

_unwrapped_hex_to_bytes = hex_to_bytes
if int(_wally_py_version[0]) >= 3:
    def hex_to_bytes(hex_str):
        buf = bytearray(len(hex_str) // 2)
        _unwrapped_hex_to_bytes(hex_str, buf)
        return buf
else:
    def hex_to_bytes(hex_str):
        hex_str = hex_str.encode('ascii')
        buf = bytearray(len(hex_str) // 2)
        _unwrapped_hex_to_bytes(bytes(hex_str), buf)
        return buf

sha256 = _wrap_bin(sha256, SHA256_LEN)
sha256_midstate = _wrap_bin(sha256_midstate, SHA256_LEN)
sha256d = _wrap_bin(sha256d, SHA256_LEN)
sha512 = _wrap_bin(sha512, SHA512_LEN)
hash160 = _wrap_bin(hash160, HASH160_LEN)
hmac_sha256 = _wrap_bin(hmac_sha256, HMAC_SHA256_LEN)
hmac_sha512 = _wrap_bin(hmac_sha512, HMAC_SHA512_LEN)

bip32_key_serialize = _wrap_bin(bip32_key_serialize, BIP32_SERIALIZED_LEN)
bip32_key_get_chain_code = _wrap_bin(bip32_key_get_chain_code, 32)
bip32_key_get_priv_key = _wrap_bin(bip32_key_get_priv_key, 32)
bip32_key_get_pub_key = _wrap_bin(bip32_key_get_pub_key, 33)
bip32_key_get_parent160 = _wrap_bin(bip32_key_get_parent160, HASH160_LEN)
bip32_key_get_hash160 = _wrap_bin(bip32_key_get_hash160, HASH160_LEN)

bip38_raw_from_private_key = _wrap_bin(bip38_raw_from_private_key, BIP38_SERIALIZED_LEN)
bip38_raw_to_private_key = _wrap_bin(bip38_raw_to_private_key, 32);
bip38_to_private_key = _wrap_bin(bip38_raw_to_private_key, 32);
bip39_mnemonic_to_seed512 = _wrap_bin(bip39_mnemonic_to_seed, BIP39_SEED_LEN_512)

pbkdf2_hmac_sha256 = _wrap_bin(pbkdf2_hmac_sha256, PBKDF2_HMAC_SHA256_LEN)
pbkdf2_hmac_sha512 = _wrap_bin(pbkdf2_hmac_sha512, PBKDF2_HMAC_SHA512_LEN)

ec_public_key_decompress = _wrap_bin(ec_public_key_decompress, EC_PUBLIC_KEY_UNCOMPRESSED_LEN)
ec_public_key_negate = _wrap_bin(ec_public_key_negate, EC_PUBLIC_KEY_LEN)
ec_public_key_from_private_key = _wrap_bin(ec_public_key_from_private_key, EC_PUBLIC_KEY_LEN)
def _sig_len(priv_key, bytes, flags):
    return EC_SIGNATURE_RECOVERABLE_LEN if EC_FLAG_RECOVERABLE & flags else EC_SIGNATURE_LEN
ec_sig_from_bytes = _wrap_bin(ec_sig_from_bytes, _sig_len)
ec_sig_from_der = _wrap_bin(ec_sig_from_der, EC_SIGNATURE_LEN)
ec_sig_normalize = _wrap_bin(ec_sig_normalize, EC_SIGNATURE_LEN)
ec_sig_to_der = _wrap_bin(ec_sig_to_der, EC_SIGNATURE_DER_MAX_LEN, resize=True)
ec_sig_to_public_key = _wrap_bin(ec_sig_to_public_key, EC_PUBLIC_KEY_LEN)
ecdh = _wrap_bin(ecdh, SHA256_LEN)

def base58check_from_bytes(buf):
    return base58_from_bytes(buf, BASE58_FLAG_CHECKSUM)

def _base58_len_fn(base58, flags):
    return len(base58) + (4 if (flags & BASE58_FLAG_CHECKSUM) else 0)
base58_to_bytes = _wrap_bin(base58_to_bytes, _base58_len_fn, resize=True)

def base58check_to_bytes(base58):
    return base58_to_bytes(base58, BASE58_FLAG_CHECKSUM)

base64_to_bytes = _wrap_bin(base64_to_bytes, base64_get_maximum_length, resize=True)

def _format_bitcoin_message_len_fn(msg, flags):
    if flags & BITCOIN_MESSAGE_FLAG_HASH:
        return SHA256_LEN
    msg_len = len(msg)
    return 25 + msg_len + (1 if msg_len < 253 else 3)
format_bitcoin_message = _wrap_bin(format_bitcoin_message, _format_bitcoin_message_len_fn, resize=True)

def _script_push_from_bytes_len_fn(data, flags):
    if flags & WALLY_SCRIPT_HASH160:
        return HASH160_LEN + 1
    elif flags & WALLY_SCRIPT_SHA256:
        return SHA256_LEN + 1
    push_len, opcode_len = len(data), 5
    for l, op_len in [(76, 1), (256, 2), (65536, 3)]:
        if push_len < l:
            opcode_len = op_len
            break
    return push_len + opcode_len
script_push_from_bytes = _wrap_bin(script_push_from_bytes, _script_push_from_bytes_len_fn, resize=True)
def _spkcsv2of2_1_opt_len_fn(pubkeys, csv_blocks, flags):
    # TODO: If we expose scriptint functions we can calc the real length here
    # instead of hardcoding 4 (largest push for the max csv_blocks of 0xffff)
    return 6 + 2 * (EC_PUBLIC_KEY_LEN + 1) + 4
scriptpubkey_csv_2of2_then_1_from_bytes_opt = _wrap_bin(scriptpubkey_csv_2of2_then_1_from_bytes_opt, _spkcsv2of2_1_opt_len_fn, resize=True)
def _spkcsv2of2_1_len_fn(pubkeys, csv_blocks, flags):
    # TODO: See _spkcsv2of2_1_opt_len_fn above
    return 9 + 2 * (EC_PUBLIC_KEY_LEN + 1) + 4
scriptpubkey_csv_2of2_then_1_from_bytes = _wrap_bin(scriptpubkey_csv_2of2_then_1_from_bytes, _spkcsv2of2_1_len_fn, resize=True)
def _spkcsv2of3_2_len_fn(pubkeys, csv_blocks, flags):
    # TODO: See TODO in _spkcsv2of2_1_len_fn
    return 13 + 3 * (EC_PUBLIC_KEY_LEN + 1) + 4
scriptpubkey_csv_2of3_then_2_from_bytes = _wrap_bin(scriptpubkey_csv_2of3_then_2_from_bytes, _spkcsv2of3_2_len_fn, resize=True)
scriptpubkey_op_return_from_bytes = _wrap_bin(scriptpubkey_op_return_from_bytes, WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN, resize=True)
scriptpubkey_p2pkh_from_bytes = _wrap_bin(scriptpubkey_p2pkh_from_bytes, WALLY_SCRIPTPUBKEY_P2PKH_LEN, resize=True)
scriptpubkey_p2sh_from_bytes = _wrap_bin(scriptpubkey_p2sh_from_bytes, WALLY_SCRIPTPUBKEY_P2SH_LEN, resize=True)
def _spkmfb_len_fn(pubkeys, threshold, flags):
    return 3 + (len(pubkeys) // EC_PUBLIC_KEY_LEN) * (EC_PUBLIC_KEY_LEN + 1)
scriptpubkey_multisig_from_bytes = _wrap_bin(scriptpubkey_multisig_from_bytes, _spkmfb_len_fn, resize=True)
def _ssmfb_len_fn(script, sigs, sighashes, flags):
    der_len = (len(sigs) // EC_SIGNATURE_LEN) * (EC_SIGNATURE_DER_MAX_LEN + 2)
    script_len = _script_push_from_bytes_len_fn(script, 0)
    return 1 + der_len + script_len
scriptsig_multisig_from_bytes = _wrap_bin(scriptsig_multisig_from_bytes, _ssmfb_len_fn, resize=True)

scriptsig_p2pkh_from_sig = _wrap_bin(scriptsig_p2pkh_from_sig, WALLY_SCRIPTSIG_P2PKH_MAX_LEN, resize=True)
scriptsig_p2pkh_from_der = _wrap_bin(scriptsig_p2pkh_from_der, WALLY_SCRIPTSIG_P2PKH_MAX_LEN, resize=True)

witness_program_from_bytes = _wrap_bin(witness_program_from_bytes, WALLY_WITNESSSCRIPT_MAX_LEN, resize=True)

addr_segwit_to_bytes = _wrap_bin(addr_segwit_to_bytes, 32 + 2, resize=True)
address_to_scriptpubkey = _wrap_bin(address_to_scriptpubkey, 21 + 4, resize=True)

tx_to_bytes = _wrap_bin(tx_to_bytes, tx_get_length, resize=True)
tx_get_btc_signature_hash = _wrap_bin(tx_get_btc_signature_hash, SHA256_LEN)
tx_get_txid = _wrap_bin(tx_get_txid, WALLY_TXHASH_LEN)
tx_get_signature_hash = _wrap_bin(tx_get_signature_hash, SHA256_LEN)
tx_input_get_txhash = _wrap_bin(tx_input_get_txhash, WALLY_TXHASH_LEN)
tx_input_get_script = _wrap_bin(tx_input_get_script, tx_input_get_script_len, resize=True)
def _tx_input_get_witness_len_fn(tx_input_in, index):
    return tx_input_get_witness_len(tx_input_in, index)
tx_input_get_witness = _wrap_bin(tx_input_get_witness, _tx_input_get_witness_len_fn, resize=True)
tx_output_get_script = _wrap_bin(tx_output_get_script, tx_output_get_script_len, resize=True)

tx_get_input_txhash = _wrap_bin(tx_get_input_txhash, WALLY_TXHASH_LEN)
tx_get_input_script = _wrap_bin(tx_get_input_script, tx_get_input_script_len, resize=True)
tx_get_input_witness = _wrap_bin(tx_get_input_witness, tx_get_input_witness_len, resize=True)
tx_get_output_script = _wrap_bin(tx_get_output_script, tx_get_output_script_len, resize=True)

def tx_witness_stack_create(witnesses):
    """ Helper to create a witness stack from a list of witness programs """
    witness_stack = tx_witness_stack_init(len(witnesses))
    for witness_script in witnesses:
        tx_witness_stack_add(witness_stack, witness_script)
    return witness_stack

wif_to_bytes = _wrap_bin(wif_to_bytes, EC_PRIVATE_KEY_LEN)
def _wif_to_public_key_len(wif, prefix):
    return EC_PUBLIC_KEY_UNCOMPRESSED_LEN if wif_is_uncompressed(wif) else EC_PUBLIC_KEY_LEN
wif_to_public_key = _wrap_bin(wif_to_public_key, _wif_to_public_key_len, resize=True)

symmetric_key_from_seed = _wrap_bin(symmetric_key_from_seed, HMAC_SHA512_LEN)
symmetric_key_from_parent = _wrap_bin(symmetric_key_from_parent, HMAC_SHA512_LEN)

psbt_get_input_redeem_script = _wrap_bin(psbt_get_input_redeem_script, psbt_get_input_redeem_script_len, resize=True)
psbt_get_input_witness_script = _wrap_bin(psbt_get_input_witness_script, psbt_get_input_witness_script_len, resize=True)
psbt_get_input_final_scriptsig = _wrap_bin(psbt_get_input_final_scriptsig, psbt_get_input_final_scriptsig_len, resize=True)
psbt_get_input_keypath = _wrap_bin(psbt_get_input_keypath, psbt_get_input_keypath_len, resize=True)
psbt_get_input_signature = _wrap_bin(psbt_get_input_signature, psbt_get_input_signature_len, resize=True)
psbt_get_input_unknown = _wrap_bin(psbt_get_input_unknown, psbt_get_input_unknown_len, resize=True)

psbt_get_output_keypath = _wrap_bin(psbt_get_output_keypath, psbt_get_output_keypath_len, resize=True)
psbt_get_output_redeem_script = _wrap_bin(psbt_get_output_redeem_script, psbt_get_output_redeem_script_len, resize=True)
psbt_get_output_witness_script = _wrap_bin(psbt_get_output_witness_script, psbt_get_output_witness_script_len, resize=True)
psbt_get_output_unknown = _wrap_bin(psbt_get_output_unknown, psbt_get_output_unknown_len, resize=True)

psbt_to_bytes = _wrap_bin(psbt_to_bytes, psbt_get_length, resize=True)

def _s2c_sig_from_bytes_fn(fn):
    def wrapped(*args):
        buffers = [bytearray(WALLY_S2C_OPENING_LEN), bytearray(EC_SIGNATURE_LEN)]
        ret = fn(*list(args) + buffers)
        if ret is None:
            return buffers[0], buffers[1]
        return ret, buffers[0], buffers[1]
    return wrapped
s2c_sig_from_bytes = _s2c_sig_from_bytes_fn(s2c_sig_from_bytes)

ae_host_commit_from_bytes = _wrap_bin(ae_host_commit_from_bytes, WALLY_HOST_COMMITMENT_LEN)
ae_signer_commit_from_bytes = _wrap_bin(ae_signer_commit_from_bytes, WALLY_S2C_OPENING_LEN)
ae_sig_from_bytes = _wrap_bin(ae_sig_from_bytes, EC_SIGNATURE_LEN)

if is_elements_build():
    asset_generator_from_bytes = _wrap_bin(asset_generator_from_bytes, ASSET_GENERATOR_LEN)
    asset_final_vbf = _wrap_bin(asset_final_vbf, ASSET_TAG_LEN)
    asset_value_commitment = _wrap_bin(asset_value_commitment, ASSET_COMMITMENT_LEN)
    asset_rangeproof_with_nonce = _wrap_bin(asset_rangeproof_with_nonce, ASSET_RANGEPROOF_MAX_LEN, resize=True)
    asset_rangeproof = _wrap_bin(asset_rangeproof, ASSET_RANGEPROOF_MAX_LEN, resize=True)
    def _asset_surjectionproof_len_fn(aid, ag, gen, r, in_aid, in_abf, in_ags):
        return asset_surjectionproof_size(len(in_aid) // ASSET_TAG_LEN)
    asset_surjectionproof = _wrap_bin(asset_surjectionproof, _asset_surjectionproof_len_fn, resize=True)
    asset_blinding_key_from_seed = _wrap_bin(asset_blinding_key_from_seed, HMAC_SHA512_LEN)
    asset_blinding_key_to_ec_private_key = _wrap_bin(asset_blinding_key_to_ec_private_key, EC_PRIVATE_KEY_LEN)
    def _asset_pak_whitelistproof_len_fn(on_keys, off_keys, idx, sub_pubkey, priv_key, summed_key):
        return asset_pak_whitelistproof_size(len(off_keys) // EC_PUBLIC_KEY_LEN)
    asset_pak_whitelistproof = _wrap_bin(asset_pak_whitelistproof, _asset_pak_whitelistproof_len_fn)

    def _asset_unblind_fn(fn):
        def wrapped(*args):
            buffers = [bytearray(ASSET_TAG_LEN) for _ in range(3)]
            ret = fn(*list(args) + buffers)
            return ret, buffers[0], buffers[1], buffers[2]
        return wrapped
    asset_unblind_with_nonce = _asset_unblind_fn(asset_unblind_with_nonce)
    asset_unblind = _asset_unblind_fn(asset_unblind)

    tx_elements_input_init = _wrap_with_defaults(tx_elements_input_init, 4, 12)
    tx_input_get_blinding_nonce = _wrap_bin(tx_input_get_blinding_nonce, SHA256_LEN)
    tx_input_get_entropy = _wrap_bin(tx_input_get_entropy, SHA256_LEN)
    tx_input_get_issuance_amount = _wrap_bin(tx_input_get_issuance_amount, tx_input_get_issuance_amount_len, resize=True)
    tx_input_get_inflation_keys = _wrap_bin(tx_input_get_inflation_keys, tx_input_get_inflation_keys_len, resize=True)
    tx_input_get_issuance_amount_rangeproof = _wrap_bin(tx_input_get_issuance_amount_rangeproof, tx_input_get_issuance_amount_rangeproof_len, resize=True)
    tx_input_get_inflation_keys_rangeproof = _wrap_bin(tx_input_get_inflation_keys_rangeproof, tx_input_get_inflation_keys_rangeproof_len, resize=True)

    tx_elements_output_init = _wrap_with_defaults(tx_elements_output_init, 3, 6)
    tx_output_get_asset = _wrap_bin(tx_output_get_asset, WALLY_TX_ASSET_CT_ASSET_LEN)
    # The returned value may be unblinded (of length WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN)
    tx_output_get_value = _wrap_bin(tx_output_get_value, WALLY_TX_ASSET_CT_ASSET_LEN, resize=True)
    tx_output_get_nonce = _wrap_bin(tx_output_get_nonce, WALLY_TX_ASSET_CT_ASSET_LEN)
    tx_output_get_surjectionproof = _wrap_bin(tx_output_get_surjectionproof, tx_output_get_surjectionproof_len, resize=True)
    tx_output_get_rangeproof = _wrap_bin(tx_output_get_rangeproof, tx_output_get_rangeproof_len, resize=True)

    tx_confidential_value_from_satoshi = _wrap_bin(tx_confidential_value_from_satoshi, WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN)
    tx_elements_issuance_generate_entropy = _wrap_bin(tx_elements_issuance_generate_entropy, SHA256_LEN)
    tx_elements_issuance_calculate_asset = _wrap_bin(tx_elements_issuance_calculate_asset, SHA256_LEN)
    tx_elements_issuance_calculate_reissuance_token = _wrap_bin(tx_elements_issuance_calculate_reissuance_token, SHA256_LEN)
    tx_get_elements_signature_hash = _wrap_bin(tx_get_elements_signature_hash, SHA256_LEN)

    tx_get_input_blinding_nonce = _wrap_bin(tx_get_input_blinding_nonce, SHA256_LEN)
    tx_get_input_entropy = _wrap_bin(tx_get_input_entropy, SHA256_LEN)
    tx_get_input_issuance_amount = _wrap_bin(tx_get_input_issuance_amount, tx_get_input_issuance_amount_len, resize=True)
    tx_get_input_inflation_keys = _wrap_bin(tx_get_input_inflation_keys, tx_get_input_inflation_keys_len, resize=True)
    tx_get_input_issuance_amount_rangeproof = _wrap_bin(tx_get_input_issuance_amount_rangeproof, tx_get_input_issuance_amount_rangeproof_len, resize=True)
    tx_get_input_inflation_keys_rangeproof = _wrap_bin(tx_get_input_inflation_keys_rangeproof, tx_get_input_inflation_keys_rangeproof_len, resize=True)

    tx_get_output_asset = _wrap_bin(tx_get_output_asset, WALLY_TX_ASSET_CT_ASSET_LEN)
    # The returned value may be unblinded (of length WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN)
    tx_get_output_value = _wrap_bin(tx_get_output_value, WALLY_TX_ASSET_CT_VALUE_LEN, resize=True)
    tx_get_output_nonce = _wrap_bin(tx_get_output_nonce, WALLY_TX_ASSET_CT_NONCE_LEN)
    tx_get_output_surjectionproof = _wrap_bin(tx_get_output_surjectionproof, tx_get_output_surjectionproof_len, resize=True)
    tx_get_output_rangeproof = _wrap_bin(tx_get_output_rangeproof, tx_get_output_rangeproof_len, resize=True)

    confidential_addr_to_ec_public_key = _wrap_bin(confidential_addr_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    confidential_addr_segwit_to_ec_public_key = _wrap_bin(confidential_addr_segwit_to_ec_public_key, EC_PUBLIC_KEY_LEN)

    bip32_key_get_pub_key_tweak_sum = _wrap_bin(bip32_key_get_pub_key_tweak_sum, 32)

    def _epsfb_len_fn(bh, mcs, pk, whl, flag):
        return elements_pegout_script_size(len(bh), len(mcs), len(pk), len(whl))
    elements_pegout_script_from_bytes = _wrap_bin(elements_pegout_script_from_bytes, _epsfb_len_fn, resize=True)

    def _epcsfb_len_fn(rs, cs, flag):
        return len(rs)
    elements_pegin_contract_script_from_bytes = _wrap_bin(elements_pegin_contract_script_from_bytes, _epcsfb_len_fn, resize=True)

    psbt_get_input_vbf = _wrap_bin(psbt_get_input_vbf, psbt_get_input_vbf_len, resize=True)
    psbt_get_input_asset = _wrap_bin(psbt_get_input_asset, psbt_get_input_asset_len, resize=True)
    psbt_get_input_abf = _wrap_bin(psbt_get_input_abf, psbt_get_input_abf_len, resize=True)
    psbt_get_input_txoutproof = _wrap_bin(psbt_get_input_txoutproof, psbt_get_input_txoutproof_len, resize=True)
    psbt_get_input_genesis_blockhash = _wrap_bin(psbt_get_input_genesis_blockhash, psbt_get_input_genesis_blockhash_len, resize=True)
    psbt_get_input_claim_script = _wrap_bin(psbt_get_input_claim_script, psbt_get_input_claim_script_len, resize=True)

    psbt_get_output_blinding_pubkey = _wrap_bin(psbt_get_output_blinding_pubkey, psbt_get_output_blinding_pubkey_len, resize=True)
    psbt_get_output_value_commitment = _wrap_bin(psbt_get_output_value_commitment, psbt_get_output_value_commitment_len, resize=True)
    psbt_get_output_vbf = _wrap_bin(psbt_get_output_vbf, psbt_get_output_vbf_len, resize=True)
    psbt_get_output_asset_commitment = _wrap_bin(psbt_get_output_asset_commitment, psbt_get_output_asset_commitment_len, resize=True)
    psbt_get_output_abf = _wrap_bin(psbt_get_output_abf, psbt_get_output_abf_len, resize=True)
    psbt_get_output_nonce = _wrap_bin(psbt_get_output_nonce, psbt_get_output_nonce_len, resize=True)
    psbt_get_output_rangeproof = _wrap_bin(psbt_get_output_rangeproof, psbt_get_output_rangeproof_len, resize=True)
    psbt_get_output_surjectionproof = _wrap_bin(psbt_get_output_surjectionproof, psbt_get_output_surjectionproof_len, resize=True)

WALLY_SATOSHI_MAX = WALLY_BTC_MAX * WALLY_SATOSHI_PER_BTC
