# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wallycore', [dirname(__file__)])
        except ImportError:
            import _wallycore
            return _wallycore
        if fp is not None:
            try:
                _mod = imp.load_module('_wallycore', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wallycore = swig_import_helper()
    del swig_import_helper
else:
    import _wallycore
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_wallycore.WALLY_OK_swigconstant(_wallycore)
WALLY_OK = _wallycore.WALLY_OK

_wallycore.WALLY_ERROR_swigconstant(_wallycore)
WALLY_ERROR = _wallycore.WALLY_ERROR

_wallycore.WALLY_EINVAL_swigconstant(_wallycore)
WALLY_EINVAL = _wallycore.WALLY_EINVAL

_wallycore.WALLY_ENOMEM_swigconstant(_wallycore)
WALLY_ENOMEM = _wallycore.WALLY_ENOMEM

def init(flags):
    return _wallycore.init(flags)
init = _wallycore.init

def cleanup(flags):
    return _wallycore.cleanup(flags)
cleanup = _wallycore.cleanup

def bzero(bytes, bytes_len):
    return _wallycore.bzero(bytes, bytes_len)
bzero = _wallycore.bzero

def free_string(str):
    return _wallycore.free_string(str)
free_string = _wallycore.free_string

_wallycore.WALLY_SECP_RANDOMIZE_LEN_swigconstant(_wallycore)
WALLY_SECP_RANDOMIZE_LEN = _wallycore.WALLY_SECP_RANDOMIZE_LEN

def secp_randomize(bytes):
    return _wallycore.secp_randomize(bytes)
secp_randomize = _wallycore.secp_randomize

def hex_from_bytes(bytes):
    return _wallycore.hex_from_bytes(bytes)
hex_from_bytes = _wallycore.hex_from_bytes

def hex_to_bytes(hex, bytes_out):
    return _wallycore.hex_to_bytes(hex, bytes_out)
hex_to_bytes = _wallycore.hex_to_bytes

_wallycore.BASE58_FLAG_CHECKSUM_swigconstant(_wallycore)
BASE58_FLAG_CHECKSUM = _wallycore.BASE58_FLAG_CHECKSUM

_wallycore.BASE58_CHECKSUM_LEN_swigconstant(_wallycore)
BASE58_CHECKSUM_LEN = _wallycore.BASE58_CHECKSUM_LEN

def base58_from_bytes(bytes, flags):
    return _wallycore.base58_from_bytes(bytes, flags)
base58_from_bytes = _wallycore.base58_from_bytes

def base58_to_bytes(str_in, flags, bytes_out):
    return _wallycore.base58_to_bytes(str_in, flags, bytes_out)
base58_to_bytes = _wallycore.base58_to_bytes

def base58_get_length(str_in):
    return _wallycore.base58_get_length(str_in)
base58_get_length = _wallycore.base58_get_length

def base64_from_bytes(bytes, flags):
    return _wallycore.base64_from_bytes(bytes, flags)
base64_from_bytes = _wallycore.base64_from_bytes

def base64_to_bytes(str_in, flags, bytes_out):
    return _wallycore.base64_to_bytes(str_in, flags, bytes_out)
base64_to_bytes = _wallycore.base64_to_bytes

def base64_get_maximum_length(str_in, flags):
    return _wallycore.base64_get_maximum_length(str_in, flags)
base64_get_maximum_length = _wallycore.base64_get_maximum_length

def is_elements_build():
    return _wallycore.is_elements_build()
is_elements_build = _wallycore.is_elements_build

_wallycore.WALLY_WIF_FLAG_COMPRESSED_swigconstant(_wallycore)
WALLY_WIF_FLAG_COMPRESSED = _wallycore.WALLY_WIF_FLAG_COMPRESSED

_wallycore.WALLY_WIF_FLAG_UNCOMPRESSED_swigconstant(_wallycore)
WALLY_WIF_FLAG_UNCOMPRESSED = _wallycore.WALLY_WIF_FLAG_UNCOMPRESSED

_wallycore.WALLY_CA_PREFIX_LIQUID_swigconstant(_wallycore)
WALLY_CA_PREFIX_LIQUID = _wallycore.WALLY_CA_PREFIX_LIQUID

_wallycore.WALLY_CA_PREFIX_LIQUID_REGTEST_swigconstant(_wallycore)
WALLY_CA_PREFIX_LIQUID_REGTEST = _wallycore.WALLY_CA_PREFIX_LIQUID_REGTEST

_wallycore.WALLY_NETWORK_BITCOIN_MAINNET_swigconstant(_wallycore)
WALLY_NETWORK_BITCOIN_MAINNET = _wallycore.WALLY_NETWORK_BITCOIN_MAINNET

_wallycore.WALLY_NETWORK_BITCOIN_TESTNET_swigconstant(_wallycore)
WALLY_NETWORK_BITCOIN_TESTNET = _wallycore.WALLY_NETWORK_BITCOIN_TESTNET

_wallycore.WALLY_NETWORK_LIQUID_swigconstant(_wallycore)
WALLY_NETWORK_LIQUID = _wallycore.WALLY_NETWORK_LIQUID

_wallycore.WALLY_NETWORK_LIQUID_REGTEST_swigconstant(_wallycore)
WALLY_NETWORK_LIQUID_REGTEST = _wallycore.WALLY_NETWORK_LIQUID_REGTEST

_wallycore.WALLY_ADDRESS_TYPE_P2PKH_swigconstant(_wallycore)
WALLY_ADDRESS_TYPE_P2PKH = _wallycore.WALLY_ADDRESS_TYPE_P2PKH

_wallycore.WALLY_ADDRESS_TYPE_P2SH_P2WPKH_swigconstant(_wallycore)
WALLY_ADDRESS_TYPE_P2SH_P2WPKH = _wallycore.WALLY_ADDRESS_TYPE_P2SH_P2WPKH

_wallycore.WALLY_ADDRESS_TYPE_P2WPKH_swigconstant(_wallycore)
WALLY_ADDRESS_TYPE_P2WPKH = _wallycore.WALLY_ADDRESS_TYPE_P2WPKH

_wallycore.WALLY_ADDRESS_VERSION_P2PKH_MAINNET_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_P2PKH_MAINNET = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_MAINNET

_wallycore.WALLY_ADDRESS_VERSION_P2PKH_TESTNET_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_P2PKH_TESTNET = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_TESTNET

_wallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_P2PKH_LIQUID = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID

_wallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST

_wallycore.WALLY_ADDRESS_VERSION_P2SH_MAINNET_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_P2SH_MAINNET = _wallycore.WALLY_ADDRESS_VERSION_P2SH_MAINNET

_wallycore.WALLY_ADDRESS_VERSION_P2SH_TESTNET_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_P2SH_TESTNET = _wallycore.WALLY_ADDRESS_VERSION_P2SH_TESTNET

_wallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_P2SH_LIQUID = _wallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID

_wallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST = _wallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST

_wallycore.WALLY_ADDRESS_VERSION_WIF_MAINNET_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_WIF_MAINNET = _wallycore.WALLY_ADDRESS_VERSION_WIF_MAINNET

_wallycore.WALLY_ADDRESS_VERSION_WIF_TESTNET_swigconstant(_wallycore)
WALLY_ADDRESS_VERSION_WIF_TESTNET = _wallycore.WALLY_ADDRESS_VERSION_WIF_TESTNET

def addr_segwit_from_bytes(bytes, addr_family, flags):
    return _wallycore.addr_segwit_from_bytes(bytes, addr_family, flags)
addr_segwit_from_bytes = _wallycore.addr_segwit_from_bytes

def addr_segwit_to_bytes(addr, addr_family, flags, bytes_out):
    return _wallycore.addr_segwit_to_bytes(addr, addr_family, flags, bytes_out)
addr_segwit_to_bytes = _wallycore.addr_segwit_to_bytes

def address_to_scriptpubkey(addr, network, bytes_out):
    return _wallycore.address_to_scriptpubkey(addr, network, bytes_out)
address_to_scriptpubkey = _wallycore.address_to_scriptpubkey

def scriptpubkey_to_address(scriptpubkey, network):
    return _wallycore.scriptpubkey_to_address(scriptpubkey, network)
scriptpubkey_to_address = _wallycore.scriptpubkey_to_address

def wif_from_bytes(priv_key, prefix, flags):
    return _wallycore.wif_from_bytes(priv_key, prefix, flags)
wif_from_bytes = _wallycore.wif_from_bytes

def wif_to_bytes(wif, prefix, flags, bytes_out):
    return _wallycore.wif_to_bytes(wif, prefix, flags, bytes_out)
wif_to_bytes = _wallycore.wif_to_bytes

def wif_is_uncompressed(wif):
    return _wallycore.wif_is_uncompressed(wif)
wif_is_uncompressed = _wallycore.wif_is_uncompressed

def wif_to_public_key(wif, prefix, bytes_out):
    return _wallycore.wif_to_public_key(wif, prefix, bytes_out)
wif_to_public_key = _wallycore.wif_to_public_key

def bip32_key_to_address(hdkey, flags, version):
    return _wallycore.bip32_key_to_address(hdkey, flags, version)
bip32_key_to_address = _wallycore.bip32_key_to_address

def bip32_key_to_addr_segwit(hdkey, addr_family, flags):
    return _wallycore.bip32_key_to_addr_segwit(hdkey, addr_family, flags)
bip32_key_to_addr_segwit = _wallycore.bip32_key_to_addr_segwit

def wif_to_address(wif, prefix, version):
    return _wallycore.wif_to_address(wif, prefix, version)
wif_to_address = _wallycore.wif_to_address

def confidential_addr_to_addr(address, prefix):
    return _wallycore.confidential_addr_to_addr(address, prefix)
confidential_addr_to_addr = _wallycore.confidential_addr_to_addr

def confidential_addr_to_ec_public_key(address, prefix, bytes_out):
    return _wallycore.confidential_addr_to_ec_public_key(address, prefix, bytes_out)
confidential_addr_to_ec_public_key = _wallycore.confidential_addr_to_ec_public_key

def confidential_addr_from_addr(address, prefix, pub_key):
    return _wallycore.confidential_addr_from_addr(address, prefix, pub_key)
confidential_addr_from_addr = _wallycore.confidential_addr_from_addr

def confidential_addr_to_addr_segwit(address, confidential_addr_family, addr_family):
    return _wallycore.confidential_addr_to_addr_segwit(address, confidential_addr_family, addr_family)
confidential_addr_to_addr_segwit = _wallycore.confidential_addr_to_addr_segwit

def confidential_addr_segwit_to_ec_public_key(address, confidential_addr_family, bytes_out):
    return _wallycore.confidential_addr_segwit_to_ec_public_key(address, confidential_addr_family, bytes_out)
confidential_addr_segwit_to_ec_public_key = _wallycore.confidential_addr_segwit_to_ec_public_key

def confidential_addr_from_addr_segwit(address, addr_family, confidential_addr_family, pub_key):
    return _wallycore.confidential_addr_from_addr_segwit(address, addr_family, confidential_addr_family, pub_key)
confidential_addr_from_addr_segwit = _wallycore.confidential_addr_from_addr_segwit

_wallycore.WALLY_HOST_COMMITMENT_LEN_swigconstant(_wallycore)
WALLY_HOST_COMMITMENT_LEN = _wallycore.WALLY_HOST_COMMITMENT_LEN

def ae_host_commit_from_bytes(entropy, flags, bytes_out):
    return _wallycore.ae_host_commit_from_bytes(entropy, flags, bytes_out)
ae_host_commit_from_bytes = _wallycore.ae_host_commit_from_bytes

def ae_signer_commit_from_bytes(priv_key, bytes, commitment, flags, s2c_opening_out):
    return _wallycore.ae_signer_commit_from_bytes(priv_key, bytes, commitment, flags, s2c_opening_out)
ae_signer_commit_from_bytes = _wallycore.ae_signer_commit_from_bytes

def ae_sig_from_bytes(priv_key, bytes, entropy, flags, bytes_out):
    return _wallycore.ae_sig_from_bytes(priv_key, bytes, entropy, flags, bytes_out)
ae_sig_from_bytes = _wallycore.ae_sig_from_bytes

def ae_verify(pub_key, bytes, entropy, s2c_opening, flags, sig):
    return _wallycore.ae_verify(pub_key, bytes, entropy, s2c_opening, flags, sig)
ae_verify = _wallycore.ae_verify

_wallycore.BIP32_ENTROPY_LEN_128_swigconstant(_wallycore)
BIP32_ENTROPY_LEN_128 = _wallycore.BIP32_ENTROPY_LEN_128

_wallycore.BIP32_ENTROPY_LEN_256_swigconstant(_wallycore)
BIP32_ENTROPY_LEN_256 = _wallycore.BIP32_ENTROPY_LEN_256

_wallycore.BIP32_ENTROPY_LEN_512_swigconstant(_wallycore)
BIP32_ENTROPY_LEN_512 = _wallycore.BIP32_ENTROPY_LEN_512

_wallycore.BIP32_KEY_FINGERPRINT_LEN_swigconstant(_wallycore)
BIP32_KEY_FINGERPRINT_LEN = _wallycore.BIP32_KEY_FINGERPRINT_LEN

_wallycore.BIP32_SERIALIZED_LEN_swigconstant(_wallycore)
BIP32_SERIALIZED_LEN = _wallycore.BIP32_SERIALIZED_LEN

_wallycore.BIP32_INITIAL_HARDENED_CHILD_swigconstant(_wallycore)
BIP32_INITIAL_HARDENED_CHILD = _wallycore.BIP32_INITIAL_HARDENED_CHILD

_wallycore.BIP32_FLAG_KEY_PRIVATE_swigconstant(_wallycore)
BIP32_FLAG_KEY_PRIVATE = _wallycore.BIP32_FLAG_KEY_PRIVATE

_wallycore.BIP32_FLAG_KEY_PUBLIC_swigconstant(_wallycore)
BIP32_FLAG_KEY_PUBLIC = _wallycore.BIP32_FLAG_KEY_PUBLIC

_wallycore.BIP32_FLAG_SKIP_HASH_swigconstant(_wallycore)
BIP32_FLAG_SKIP_HASH = _wallycore.BIP32_FLAG_SKIP_HASH

_wallycore.BIP32_FLAG_KEY_TWEAK_SUM_swigconstant(_wallycore)
BIP32_FLAG_KEY_TWEAK_SUM = _wallycore.BIP32_FLAG_KEY_TWEAK_SUM

_wallycore.BIP32_VER_MAIN_PUBLIC_swigconstant(_wallycore)
BIP32_VER_MAIN_PUBLIC = _wallycore.BIP32_VER_MAIN_PUBLIC

_wallycore.BIP32_VER_MAIN_PRIVATE_swigconstant(_wallycore)
BIP32_VER_MAIN_PRIVATE = _wallycore.BIP32_VER_MAIN_PRIVATE

_wallycore.BIP32_VER_TEST_PUBLIC_swigconstant(_wallycore)
BIP32_VER_TEST_PUBLIC = _wallycore.BIP32_VER_TEST_PUBLIC

_wallycore.BIP32_VER_TEST_PRIVATE_swigconstant(_wallycore)
BIP32_VER_TEST_PRIVATE = _wallycore.BIP32_VER_TEST_PRIVATE

def bip32_key_free(hdkey):
    return _wallycore.bip32_key_free(hdkey)
bip32_key_free = _wallycore.bip32_key_free

def bip32_key_init(version, depth, child_num, chain_code, pub_key, priv_key, hash160, parent160):
    return _wallycore.bip32_key_init(version, depth, child_num, chain_code, pub_key, priv_key, hash160, parent160)
bip32_key_init = _wallycore.bip32_key_init

def bip32_key_from_seed(bytes, version, flags):
    return _wallycore.bip32_key_from_seed(bytes, version, flags)
bip32_key_from_seed = _wallycore.bip32_key_from_seed

def bip32_key_serialize(hdkey, flags, bytes_out):
    return _wallycore.bip32_key_serialize(hdkey, flags, bytes_out)
bip32_key_serialize = _wallycore.bip32_key_serialize

def bip32_key_unserialize(bytes):
    return _wallycore.bip32_key_unserialize(bytes)
bip32_key_unserialize = _wallycore.bip32_key_unserialize

def bip32_key_from_parent(hdkey, child_num, flags):
    return _wallycore.bip32_key_from_parent(hdkey, child_num, flags)
bip32_key_from_parent = _wallycore.bip32_key_from_parent

def bip32_key_from_parent_path(hdkey, child_path, flags):
    return _wallycore.bip32_key_from_parent_path(hdkey, child_path, flags)
bip32_key_from_parent_path = _wallycore.bip32_key_from_parent_path

def bip32_key_with_tweak_from_parent_path(hdkey, child_path, flags):
    return _wallycore.bip32_key_with_tweak_from_parent_path(hdkey, child_path, flags)
bip32_key_with_tweak_from_parent_path = _wallycore.bip32_key_with_tweak_from_parent_path

def bip32_key_to_base58(hdkey, flags):
    return _wallycore.bip32_key_to_base58(hdkey, flags)
bip32_key_to_base58 = _wallycore.bip32_key_to_base58

def bip32_key_from_base58(base58):
    return _wallycore.bip32_key_from_base58(base58)
bip32_key_from_base58 = _wallycore.bip32_key_from_base58

def bip32_key_strip_private_key(hdkey):
    return _wallycore.bip32_key_strip_private_key(hdkey)
bip32_key_strip_private_key = _wallycore.bip32_key_strip_private_key

def bip32_key_get_fingerprint(hdkey, bytes_out):
    return _wallycore.bip32_key_get_fingerprint(hdkey, bytes_out)
bip32_key_get_fingerprint = _wallycore.bip32_key_get_fingerprint

_wallycore.LIBWALLY_CORE_BIP32_INT_H_swigconstant(_wallycore)
LIBWALLY_CORE_BIP32_INT_H = _wallycore.LIBWALLY_CORE_BIP32_INT_H

def bip32_key_get_chain_code(hdkey, bytes_out):
    return _wallycore.bip32_key_get_chain_code(hdkey, bytes_out)
bip32_key_get_chain_code = _wallycore.bip32_key_get_chain_code

def bip32_key_get_parent160(hdkey, bytes_out):
    return _wallycore.bip32_key_get_parent160(hdkey, bytes_out)
bip32_key_get_parent160 = _wallycore.bip32_key_get_parent160

def bip32_key_get_priv_key(hdkey, bytes_out):
    return _wallycore.bip32_key_get_priv_key(hdkey, bytes_out)
bip32_key_get_priv_key = _wallycore.bip32_key_get_priv_key

def bip32_key_get_hash160(hdkey, bytes_out):
    return _wallycore.bip32_key_get_hash160(hdkey, bytes_out)
bip32_key_get_hash160 = _wallycore.bip32_key_get_hash160

def bip32_key_get_pub_key(hdkey, bytes_out):
    return _wallycore.bip32_key_get_pub_key(hdkey, bytes_out)
bip32_key_get_pub_key = _wallycore.bip32_key_get_pub_key

def bip32_key_get_pub_key_tweak_sum(hdkey, bytes_out):
    return _wallycore.bip32_key_get_pub_key_tweak_sum(hdkey, bytes_out)
bip32_key_get_pub_key_tweak_sum = _wallycore.bip32_key_get_pub_key_tweak_sum

def bip32_key_get_depth(hdkey):
    return _wallycore.bip32_key_get_depth(hdkey)
bip32_key_get_depth = _wallycore.bip32_key_get_depth

def bip32_key_get_child_num(hdkey):
    return _wallycore.bip32_key_get_child_num(hdkey)
bip32_key_get_child_num = _wallycore.bip32_key_get_child_num

def bip32_key_get_version(hdkey):
    return _wallycore.bip32_key_get_version(hdkey)
bip32_key_get_version = _wallycore.bip32_key_get_version

_wallycore.BIP38_KEY_MAINNET_swigconstant(_wallycore)
BIP38_KEY_MAINNET = _wallycore.BIP38_KEY_MAINNET

_wallycore.BIP38_KEY_TESTNET_swigconstant(_wallycore)
BIP38_KEY_TESTNET = _wallycore.BIP38_KEY_TESTNET

_wallycore.BIP38_KEY_COMPRESSED_swigconstant(_wallycore)
BIP38_KEY_COMPRESSED = _wallycore.BIP38_KEY_COMPRESSED

_wallycore.BIP38_KEY_EC_MULT_swigconstant(_wallycore)
BIP38_KEY_EC_MULT = _wallycore.BIP38_KEY_EC_MULT

_wallycore.BIP38_KEY_QUICK_CHECK_swigconstant(_wallycore)
BIP38_KEY_QUICK_CHECK = _wallycore.BIP38_KEY_QUICK_CHECK

_wallycore.BIP38_KEY_RAW_MODE_swigconstant(_wallycore)
BIP38_KEY_RAW_MODE = _wallycore.BIP38_KEY_RAW_MODE

_wallycore.BIP38_KEY_SWAP_ORDER_swigconstant(_wallycore)
BIP38_KEY_SWAP_ORDER = _wallycore.BIP38_KEY_SWAP_ORDER

_wallycore.BIP38_SERIALIZED_LEN_swigconstant(_wallycore)
BIP38_SERIALIZED_LEN = _wallycore.BIP38_SERIALIZED_LEN

def bip38_raw_from_private_key(bytes, arg2, flags, bytes_out):
    return _wallycore.bip38_raw_from_private_key(bytes, arg2, flags, bytes_out)
bip38_raw_from_private_key = _wallycore.bip38_raw_from_private_key

def bip38_from_private_key(bytes, arg2, flags):
    return _wallycore.bip38_from_private_key(bytes, arg2, flags)
bip38_from_private_key = _wallycore.bip38_from_private_key

def bip38_raw_to_private_key(bytes, arg2, flags, bytes_out):
    return _wallycore.bip38_raw_to_private_key(bytes, arg2, flags, bytes_out)
bip38_raw_to_private_key = _wallycore.bip38_raw_to_private_key

def bip38_to_private_key(bip38, arg2, flags, bytes_out):
    return _wallycore.bip38_to_private_key(bip38, arg2, flags, bytes_out)
bip38_to_private_key = _wallycore.bip38_to_private_key

def bip38_raw_get_flags(bytes):
    return _wallycore.bip38_raw_get_flags(bytes)
bip38_raw_get_flags = _wallycore.bip38_raw_get_flags

def bip38_get_flags(bip38):
    return _wallycore.bip38_get_flags(bip38)
bip38_get_flags = _wallycore.bip38_get_flags

_wallycore.BIP39_ENTROPY_LEN_128_swigconstant(_wallycore)
BIP39_ENTROPY_LEN_128 = _wallycore.BIP39_ENTROPY_LEN_128

_wallycore.BIP39_ENTROPY_LEN_160_swigconstant(_wallycore)
BIP39_ENTROPY_LEN_160 = _wallycore.BIP39_ENTROPY_LEN_160

_wallycore.BIP39_ENTROPY_LEN_192_swigconstant(_wallycore)
BIP39_ENTROPY_LEN_192 = _wallycore.BIP39_ENTROPY_LEN_192

_wallycore.BIP39_ENTROPY_LEN_224_swigconstant(_wallycore)
BIP39_ENTROPY_LEN_224 = _wallycore.BIP39_ENTROPY_LEN_224

_wallycore.BIP39_ENTROPY_LEN_256_swigconstant(_wallycore)
BIP39_ENTROPY_LEN_256 = _wallycore.BIP39_ENTROPY_LEN_256

_wallycore.BIP39_ENTROPY_LEN_288_swigconstant(_wallycore)
BIP39_ENTROPY_LEN_288 = _wallycore.BIP39_ENTROPY_LEN_288

_wallycore.BIP39_ENTROPY_LEN_320_swigconstant(_wallycore)
BIP39_ENTROPY_LEN_320 = _wallycore.BIP39_ENTROPY_LEN_320

_wallycore.BIP39_SEED_LEN_512_swigconstant(_wallycore)
BIP39_SEED_LEN_512 = _wallycore.BIP39_SEED_LEN_512

_wallycore.BIP39_WORDLIST_LEN_swigconstant(_wallycore)
BIP39_WORDLIST_LEN = _wallycore.BIP39_WORDLIST_LEN

def bip39_get_languages():
    return _wallycore.bip39_get_languages()
bip39_get_languages = _wallycore.bip39_get_languages

def bip39_get_wordlist(lang):
    return _wallycore.bip39_get_wordlist(lang)
bip39_get_wordlist = _wallycore.bip39_get_wordlist

def bip39_get_word(w, index):
    return _wallycore.bip39_get_word(w, index)
bip39_get_word = _wallycore.bip39_get_word

def bip39_mnemonic_from_bytes(w, bytes):
    return _wallycore.bip39_mnemonic_from_bytes(w, bytes)
bip39_mnemonic_from_bytes = _wallycore.bip39_mnemonic_from_bytes

def bip39_mnemonic_to_bytes(w, mnemonic, bytes_out):
    return _wallycore.bip39_mnemonic_to_bytes(w, mnemonic, bytes_out)
bip39_mnemonic_to_bytes = _wallycore.bip39_mnemonic_to_bytes

def bip39_mnemonic_validate(w, mnemonic):
    return _wallycore.bip39_mnemonic_validate(w, mnemonic)
bip39_mnemonic_validate = _wallycore.bip39_mnemonic_validate

def bip39_mnemonic_to_seed(mnemonic, passphrase, bytes_out):
    return _wallycore.bip39_mnemonic_to_seed(mnemonic, passphrase, bytes_out)
bip39_mnemonic_to_seed = _wallycore.bip39_mnemonic_to_seed

def scrypt(arg1, salt, cost, block_size, parallelism, bytes_out):
    return _wallycore.scrypt(arg1, salt, cost, block_size, parallelism, bytes_out)
scrypt = _wallycore.scrypt

_wallycore.AES_BLOCK_LEN_swigconstant(_wallycore)
AES_BLOCK_LEN = _wallycore.AES_BLOCK_LEN

_wallycore.AES_KEY_LEN_128_swigconstant(_wallycore)
AES_KEY_LEN_128 = _wallycore.AES_KEY_LEN_128

_wallycore.AES_KEY_LEN_192_swigconstant(_wallycore)
AES_KEY_LEN_192 = _wallycore.AES_KEY_LEN_192

_wallycore.AES_KEY_LEN_256_swigconstant(_wallycore)
AES_KEY_LEN_256 = _wallycore.AES_KEY_LEN_256

_wallycore.AES_FLAG_ENCRYPT_swigconstant(_wallycore)
AES_FLAG_ENCRYPT = _wallycore.AES_FLAG_ENCRYPT

_wallycore.AES_FLAG_DECRYPT_swigconstant(_wallycore)
AES_FLAG_DECRYPT = _wallycore.AES_FLAG_DECRYPT

def aes(key, bytes, flags, bytes_out):
    return _wallycore.aes(key, bytes, flags, bytes_out)
aes = _wallycore.aes

def aes_cbc(key, iv, bytes, flags, bytes_out):
    return _wallycore.aes_cbc(key, iv, bytes, flags, bytes_out)
aes_cbc = _wallycore.aes_cbc

_wallycore.SHA256_LEN_swigconstant(_wallycore)
SHA256_LEN = _wallycore.SHA256_LEN

_wallycore.SHA512_LEN_swigconstant(_wallycore)
SHA512_LEN = _wallycore.SHA512_LEN

def sha256(bytes, bytes_out):
    return _wallycore.sha256(bytes, bytes_out)
sha256 = _wallycore.sha256

def sha256_midstate(bytes, bytes_out):
    return _wallycore.sha256_midstate(bytes, bytes_out)
sha256_midstate = _wallycore.sha256_midstate

def sha256d(bytes, bytes_out):
    return _wallycore.sha256d(bytes, bytes_out)
sha256d = _wallycore.sha256d

def sha512(bytes, bytes_out):
    return _wallycore.sha512(bytes, bytes_out)
sha512 = _wallycore.sha512

_wallycore.HASH160_LEN_swigconstant(_wallycore)
HASH160_LEN = _wallycore.HASH160_LEN

def hash160(bytes, bytes_out):
    return _wallycore.hash160(bytes, bytes_out)
hash160 = _wallycore.hash160

_wallycore.HMAC_SHA256_LEN_swigconstant(_wallycore)
HMAC_SHA256_LEN = _wallycore.HMAC_SHA256_LEN

_wallycore.HMAC_SHA512_LEN_swigconstant(_wallycore)
HMAC_SHA512_LEN = _wallycore.HMAC_SHA512_LEN

def hmac_sha256(key, bytes, bytes_out):
    return _wallycore.hmac_sha256(key, bytes, bytes_out)
hmac_sha256 = _wallycore.hmac_sha256

def hmac_sha512(key, bytes, bytes_out):
    return _wallycore.hmac_sha512(key, bytes, bytes_out)
hmac_sha512 = _wallycore.hmac_sha512

_wallycore.PBKDF2_HMAC_SHA256_LEN_swigconstant(_wallycore)
PBKDF2_HMAC_SHA256_LEN = _wallycore.PBKDF2_HMAC_SHA256_LEN

_wallycore.PBKDF2_HMAC_SHA512_LEN_swigconstant(_wallycore)
PBKDF2_HMAC_SHA512_LEN = _wallycore.PBKDF2_HMAC_SHA512_LEN

def pbkdf2_hmac_sha256(arg1, salt, flags, cost, bytes_out):
    return _wallycore.pbkdf2_hmac_sha256(arg1, salt, flags, cost, bytes_out)
pbkdf2_hmac_sha256 = _wallycore.pbkdf2_hmac_sha256

def pbkdf2_hmac_sha512(arg1, salt, flags, cost, bytes_out):
    return _wallycore.pbkdf2_hmac_sha512(arg1, salt, flags, cost, bytes_out)
pbkdf2_hmac_sha512 = _wallycore.pbkdf2_hmac_sha512

_wallycore.EC_PRIVATE_KEY_LEN_swigconstant(_wallycore)
EC_PRIVATE_KEY_LEN = _wallycore.EC_PRIVATE_KEY_LEN

_wallycore.EC_PUBLIC_KEY_LEN_swigconstant(_wallycore)
EC_PUBLIC_KEY_LEN = _wallycore.EC_PUBLIC_KEY_LEN

_wallycore.EC_PUBLIC_KEY_UNCOMPRESSED_LEN_swigconstant(_wallycore)
EC_PUBLIC_KEY_UNCOMPRESSED_LEN = _wallycore.EC_PUBLIC_KEY_UNCOMPRESSED_LEN

_wallycore.EC_MESSAGE_HASH_LEN_swigconstant(_wallycore)
EC_MESSAGE_HASH_LEN = _wallycore.EC_MESSAGE_HASH_LEN

_wallycore.EC_SIGNATURE_LEN_swigconstant(_wallycore)
EC_SIGNATURE_LEN = _wallycore.EC_SIGNATURE_LEN

_wallycore.EC_SIGNATURE_RECOVERABLE_LEN_swigconstant(_wallycore)
EC_SIGNATURE_RECOVERABLE_LEN = _wallycore.EC_SIGNATURE_RECOVERABLE_LEN

_wallycore.EC_SIGNATURE_DER_MAX_LEN_swigconstant(_wallycore)
EC_SIGNATURE_DER_MAX_LEN = _wallycore.EC_SIGNATURE_DER_MAX_LEN

_wallycore.EC_SIGNATURE_DER_MAX_LOW_R_LEN_swigconstant(_wallycore)
EC_SIGNATURE_DER_MAX_LOW_R_LEN = _wallycore.EC_SIGNATURE_DER_MAX_LOW_R_LEN

_wallycore.EC_FLAG_ECDSA_swigconstant(_wallycore)
EC_FLAG_ECDSA = _wallycore.EC_FLAG_ECDSA

_wallycore.EC_FLAG_SCHNORR_swigconstant(_wallycore)
EC_FLAG_SCHNORR = _wallycore.EC_FLAG_SCHNORR

_wallycore.EC_FLAG_GRIND_R_swigconstant(_wallycore)
EC_FLAG_GRIND_R = _wallycore.EC_FLAG_GRIND_R

_wallycore.EC_FLAG_RECOVERABLE_swigconstant(_wallycore)
EC_FLAG_RECOVERABLE = _wallycore.EC_FLAG_RECOVERABLE

_wallycore.EC_FLAGS_ALL_swigconstant(_wallycore)
EC_FLAGS_ALL = _wallycore.EC_FLAGS_ALL

def ec_private_key_verify(priv_key):
    return _wallycore.ec_private_key_verify(priv_key)
ec_private_key_verify = _wallycore.ec_private_key_verify

def ec_public_key_verify(pub_key):
    return _wallycore.ec_public_key_verify(pub_key)
ec_public_key_verify = _wallycore.ec_public_key_verify

def ec_public_key_from_private_key(priv_key, bytes_out):
    return _wallycore.ec_public_key_from_private_key(priv_key, bytes_out)
ec_public_key_from_private_key = _wallycore.ec_public_key_from_private_key

def ec_public_key_decompress(pub_key, bytes_out):
    return _wallycore.ec_public_key_decompress(pub_key, bytes_out)
ec_public_key_decompress = _wallycore.ec_public_key_decompress

def ec_public_key_negate(pub_key, bytes_out):
    return _wallycore.ec_public_key_negate(pub_key, bytes_out)
ec_public_key_negate = _wallycore.ec_public_key_negate

def ec_sig_from_bytes(priv_key, bytes, flags, bytes_out):
    return _wallycore.ec_sig_from_bytes(priv_key, bytes, flags, bytes_out)
ec_sig_from_bytes = _wallycore.ec_sig_from_bytes

def ec_sig_normalize(sig, bytes_out):
    return _wallycore.ec_sig_normalize(sig, bytes_out)
ec_sig_normalize = _wallycore.ec_sig_normalize

def ec_sig_to_der(sig, bytes_out):
    return _wallycore.ec_sig_to_der(sig, bytes_out)
ec_sig_to_der = _wallycore.ec_sig_to_der

def ec_sig_from_der(bytes, bytes_out):
    return _wallycore.ec_sig_from_der(bytes, bytes_out)
ec_sig_from_der = _wallycore.ec_sig_from_der

def ec_sig_verify(pub_key, bytes, flags, sig):
    return _wallycore.ec_sig_verify(pub_key, bytes, flags, sig)
ec_sig_verify = _wallycore.ec_sig_verify

def ec_sig_to_public_key(bytes, sig, bytes_out):
    return _wallycore.ec_sig_to_public_key(bytes, sig, bytes_out)
ec_sig_to_public_key = _wallycore.ec_sig_to_public_key

_wallycore.BITCOIN_MESSAGE_MAX_LEN_swigconstant(_wallycore)
BITCOIN_MESSAGE_MAX_LEN = _wallycore.BITCOIN_MESSAGE_MAX_LEN

_wallycore.BITCOIN_MESSAGE_FLAG_HASH_swigconstant(_wallycore)
BITCOIN_MESSAGE_FLAG_HASH = _wallycore.BITCOIN_MESSAGE_FLAG_HASH

def format_bitcoin_message(bytes, flags, bytes_out):
    return _wallycore.format_bitcoin_message(bytes, flags, bytes_out)
format_bitcoin_message = _wallycore.format_bitcoin_message

def ecdh(pub_key, priv_key, bytes_out):
    return _wallycore.ecdh(pub_key, priv_key, bytes_out)
ecdh = _wallycore.ecdh

_wallycore.WALLY_S2C_DATA_LEN_swigconstant(_wallycore)
WALLY_S2C_DATA_LEN = _wallycore.WALLY_S2C_DATA_LEN

_wallycore.WALLY_S2C_OPENING_LEN_swigconstant(_wallycore)
WALLY_S2C_OPENING_LEN = _wallycore.WALLY_S2C_OPENING_LEN

def s2c_sig_from_bytes(priv_key, bytes, s2c_data, flags, s2c_opening_out, bytes_out):
    return _wallycore.s2c_sig_from_bytes(priv_key, bytes, s2c_data, flags, s2c_opening_out, bytes_out)
s2c_sig_from_bytes = _wallycore.s2c_sig_from_bytes

def s2c_commitment_verify(sig, s2c_data, s2c_opening, flags):
    return _wallycore.s2c_commitment_verify(sig, s2c_data, s2c_opening, flags)
s2c_commitment_verify = _wallycore.s2c_commitment_verify

_wallycore.WALLY_SCRIPT_TYPE_UNKNOWN_swigconstant(_wallycore)
WALLY_SCRIPT_TYPE_UNKNOWN = _wallycore.WALLY_SCRIPT_TYPE_UNKNOWN

_wallycore.WALLY_SCRIPT_TYPE_OP_RETURN_swigconstant(_wallycore)
WALLY_SCRIPT_TYPE_OP_RETURN = _wallycore.WALLY_SCRIPT_TYPE_OP_RETURN

_wallycore.WALLY_SCRIPT_TYPE_P2PKH_swigconstant(_wallycore)
WALLY_SCRIPT_TYPE_P2PKH = _wallycore.WALLY_SCRIPT_TYPE_P2PKH

_wallycore.WALLY_SCRIPT_TYPE_P2SH_swigconstant(_wallycore)
WALLY_SCRIPT_TYPE_P2SH = _wallycore.WALLY_SCRIPT_TYPE_P2SH

_wallycore.WALLY_SCRIPT_TYPE_P2WPKH_swigconstant(_wallycore)
WALLY_SCRIPT_TYPE_P2WPKH = _wallycore.WALLY_SCRIPT_TYPE_P2WPKH

_wallycore.WALLY_SCRIPT_TYPE_P2WSH_swigconstant(_wallycore)
WALLY_SCRIPT_TYPE_P2WSH = _wallycore.WALLY_SCRIPT_TYPE_P2WSH

_wallycore.WALLY_SCRIPT_TYPE_MULTISIG_swigconstant(_wallycore)
WALLY_SCRIPT_TYPE_MULTISIG = _wallycore.WALLY_SCRIPT_TYPE_MULTISIG

_wallycore.WALLY_SCRIPTPUBKEY_P2PKH_LEN_swigconstant(_wallycore)
WALLY_SCRIPTPUBKEY_P2PKH_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2PKH_LEN

_wallycore.WALLY_SCRIPTPUBKEY_P2SH_LEN_swigconstant(_wallycore)
WALLY_SCRIPTPUBKEY_P2SH_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2SH_LEN

_wallycore.WALLY_SCRIPTPUBKEY_P2WPKH_LEN_swigconstant(_wallycore)
WALLY_SCRIPTPUBKEY_P2WPKH_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2WPKH_LEN

_wallycore.WALLY_SCRIPTPUBKEY_P2WSH_LEN_swigconstant(_wallycore)
WALLY_SCRIPTPUBKEY_P2WSH_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2WSH_LEN

_wallycore.WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN_swigconstant(_wallycore)
WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN = _wallycore.WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN

_wallycore.WALLY_MAX_OP_RETURN_LEN_swigconstant(_wallycore)
WALLY_MAX_OP_RETURN_LEN = _wallycore.WALLY_MAX_OP_RETURN_LEN

_wallycore.WALLY_SCRIPTSIG_P2PKH_MAX_LEN_swigconstant(_wallycore)
WALLY_SCRIPTSIG_P2PKH_MAX_LEN = _wallycore.WALLY_SCRIPTSIG_P2PKH_MAX_LEN

_wallycore.WALLY_WITNESSSCRIPT_MAX_LEN_swigconstant(_wallycore)
WALLY_WITNESSSCRIPT_MAX_LEN = _wallycore.WALLY_WITNESSSCRIPT_MAX_LEN

_wallycore.WALLY_SCRIPT_VARINT_MAX_SIZE_swigconstant(_wallycore)
WALLY_SCRIPT_VARINT_MAX_SIZE = _wallycore.WALLY_SCRIPT_VARINT_MAX_SIZE

_wallycore.WALLY_SCRIPT_HASH160_swigconstant(_wallycore)
WALLY_SCRIPT_HASH160 = _wallycore.WALLY_SCRIPT_HASH160

_wallycore.WALLY_SCRIPT_SHA256_swigconstant(_wallycore)
WALLY_SCRIPT_SHA256 = _wallycore.WALLY_SCRIPT_SHA256

_wallycore.WALLY_SCRIPT_AS_PUSH_swigconstant(_wallycore)
WALLY_SCRIPT_AS_PUSH = _wallycore.WALLY_SCRIPT_AS_PUSH

_wallycore.WALLY_SCRIPT_MULTISIG_SORTED_swigconstant(_wallycore)
WALLY_SCRIPT_MULTISIG_SORTED = _wallycore.WALLY_SCRIPT_MULTISIG_SORTED

_wallycore.OP_0_swigconstant(_wallycore)
OP_0 = _wallycore.OP_0

_wallycore.OP_FALSE_swigconstant(_wallycore)
OP_FALSE = _wallycore.OP_FALSE

_wallycore.OP_PUSHDATA1_swigconstant(_wallycore)
OP_PUSHDATA1 = _wallycore.OP_PUSHDATA1

_wallycore.OP_PUSHDATA2_swigconstant(_wallycore)
OP_PUSHDATA2 = _wallycore.OP_PUSHDATA2

_wallycore.OP_PUSHDATA4_swigconstant(_wallycore)
OP_PUSHDATA4 = _wallycore.OP_PUSHDATA4

_wallycore.OP_1NEGATE_swigconstant(_wallycore)
OP_1NEGATE = _wallycore.OP_1NEGATE

_wallycore.OP_RESERVED_swigconstant(_wallycore)
OP_RESERVED = _wallycore.OP_RESERVED

_wallycore.OP_1_swigconstant(_wallycore)
OP_1 = _wallycore.OP_1

_wallycore.OP_TRUE_swigconstant(_wallycore)
OP_TRUE = _wallycore.OP_TRUE

_wallycore.OP_2_swigconstant(_wallycore)
OP_2 = _wallycore.OP_2

_wallycore.OP_3_swigconstant(_wallycore)
OP_3 = _wallycore.OP_3

_wallycore.OP_4_swigconstant(_wallycore)
OP_4 = _wallycore.OP_4

_wallycore.OP_5_swigconstant(_wallycore)
OP_5 = _wallycore.OP_5

_wallycore.OP_6_swigconstant(_wallycore)
OP_6 = _wallycore.OP_6

_wallycore.OP_7_swigconstant(_wallycore)
OP_7 = _wallycore.OP_7

_wallycore.OP_8_swigconstant(_wallycore)
OP_8 = _wallycore.OP_8

_wallycore.OP_9_swigconstant(_wallycore)
OP_9 = _wallycore.OP_9

_wallycore.OP_10_swigconstant(_wallycore)
OP_10 = _wallycore.OP_10

_wallycore.OP_11_swigconstant(_wallycore)
OP_11 = _wallycore.OP_11

_wallycore.OP_12_swigconstant(_wallycore)
OP_12 = _wallycore.OP_12

_wallycore.OP_13_swigconstant(_wallycore)
OP_13 = _wallycore.OP_13

_wallycore.OP_14_swigconstant(_wallycore)
OP_14 = _wallycore.OP_14

_wallycore.OP_15_swigconstant(_wallycore)
OP_15 = _wallycore.OP_15

_wallycore.OP_16_swigconstant(_wallycore)
OP_16 = _wallycore.OP_16

_wallycore.OP_NOP_swigconstant(_wallycore)
OP_NOP = _wallycore.OP_NOP

_wallycore.OP_VER_swigconstant(_wallycore)
OP_VER = _wallycore.OP_VER

_wallycore.OP_IF_swigconstant(_wallycore)
OP_IF = _wallycore.OP_IF

_wallycore.OP_NOTIF_swigconstant(_wallycore)
OP_NOTIF = _wallycore.OP_NOTIF

_wallycore.OP_VERIF_swigconstant(_wallycore)
OP_VERIF = _wallycore.OP_VERIF

_wallycore.OP_VERNOTIF_swigconstant(_wallycore)
OP_VERNOTIF = _wallycore.OP_VERNOTIF

_wallycore.OP_ELSE_swigconstant(_wallycore)
OP_ELSE = _wallycore.OP_ELSE

_wallycore.OP_ENDIF_swigconstant(_wallycore)
OP_ENDIF = _wallycore.OP_ENDIF

_wallycore.OP_VERIFY_swigconstant(_wallycore)
OP_VERIFY = _wallycore.OP_VERIFY

_wallycore.OP_RETURN_swigconstant(_wallycore)
OP_RETURN = _wallycore.OP_RETURN

_wallycore.OP_TOALTSTACK_swigconstant(_wallycore)
OP_TOALTSTACK = _wallycore.OP_TOALTSTACK

_wallycore.OP_FROMALTSTACK_swigconstant(_wallycore)
OP_FROMALTSTACK = _wallycore.OP_FROMALTSTACK

_wallycore.OP_2DROP_swigconstant(_wallycore)
OP_2DROP = _wallycore.OP_2DROP

_wallycore.OP_2DUP_swigconstant(_wallycore)
OP_2DUP = _wallycore.OP_2DUP

_wallycore.OP_3DUP_swigconstant(_wallycore)
OP_3DUP = _wallycore.OP_3DUP

_wallycore.OP_2OVER_swigconstant(_wallycore)
OP_2OVER = _wallycore.OP_2OVER

_wallycore.OP_2ROT_swigconstant(_wallycore)
OP_2ROT = _wallycore.OP_2ROT

_wallycore.OP_2SWAP_swigconstant(_wallycore)
OP_2SWAP = _wallycore.OP_2SWAP

_wallycore.OP_IFDUP_swigconstant(_wallycore)
OP_IFDUP = _wallycore.OP_IFDUP

_wallycore.OP_DEPTH_swigconstant(_wallycore)
OP_DEPTH = _wallycore.OP_DEPTH

_wallycore.OP_DROP_swigconstant(_wallycore)
OP_DROP = _wallycore.OP_DROP

_wallycore.OP_DUP_swigconstant(_wallycore)
OP_DUP = _wallycore.OP_DUP

_wallycore.OP_NIP_swigconstant(_wallycore)
OP_NIP = _wallycore.OP_NIP

_wallycore.OP_OVER_swigconstant(_wallycore)
OP_OVER = _wallycore.OP_OVER

_wallycore.OP_PICK_swigconstant(_wallycore)
OP_PICK = _wallycore.OP_PICK

_wallycore.OP_ROLL_swigconstant(_wallycore)
OP_ROLL = _wallycore.OP_ROLL

_wallycore.OP_ROT_swigconstant(_wallycore)
OP_ROT = _wallycore.OP_ROT

_wallycore.OP_SWAP_swigconstant(_wallycore)
OP_SWAP = _wallycore.OP_SWAP

_wallycore.OP_TUCK_swigconstant(_wallycore)
OP_TUCK = _wallycore.OP_TUCK

_wallycore.OP_CAT_swigconstant(_wallycore)
OP_CAT = _wallycore.OP_CAT

_wallycore.OP_SUBSTR_swigconstant(_wallycore)
OP_SUBSTR = _wallycore.OP_SUBSTR

_wallycore.OP_LEFT_swigconstant(_wallycore)
OP_LEFT = _wallycore.OP_LEFT

_wallycore.OP_RIGHT_swigconstant(_wallycore)
OP_RIGHT = _wallycore.OP_RIGHT

_wallycore.OP_SIZE_swigconstant(_wallycore)
OP_SIZE = _wallycore.OP_SIZE

_wallycore.OP_INVERT_swigconstant(_wallycore)
OP_INVERT = _wallycore.OP_INVERT

_wallycore.OP_AND_swigconstant(_wallycore)
OP_AND = _wallycore.OP_AND

_wallycore.OP_OR_swigconstant(_wallycore)
OP_OR = _wallycore.OP_OR

_wallycore.OP_XOR_swigconstant(_wallycore)
OP_XOR = _wallycore.OP_XOR

_wallycore.OP_EQUAL_swigconstant(_wallycore)
OP_EQUAL = _wallycore.OP_EQUAL

_wallycore.OP_EQUALVERIFY_swigconstant(_wallycore)
OP_EQUALVERIFY = _wallycore.OP_EQUALVERIFY

_wallycore.OP_RESERVED1_swigconstant(_wallycore)
OP_RESERVED1 = _wallycore.OP_RESERVED1

_wallycore.OP_RESERVED2_swigconstant(_wallycore)
OP_RESERVED2 = _wallycore.OP_RESERVED2

_wallycore.OP_1ADD_swigconstant(_wallycore)
OP_1ADD = _wallycore.OP_1ADD

_wallycore.OP_1SUB_swigconstant(_wallycore)
OP_1SUB = _wallycore.OP_1SUB

_wallycore.OP_2MUL_swigconstant(_wallycore)
OP_2MUL = _wallycore.OP_2MUL

_wallycore.OP_2DIV_swigconstant(_wallycore)
OP_2DIV = _wallycore.OP_2DIV

_wallycore.OP_NEGATE_swigconstant(_wallycore)
OP_NEGATE = _wallycore.OP_NEGATE

_wallycore.OP_ABS_swigconstant(_wallycore)
OP_ABS = _wallycore.OP_ABS

_wallycore.OP_NOT_swigconstant(_wallycore)
OP_NOT = _wallycore.OP_NOT

_wallycore.OP_0NOTEQUAL_swigconstant(_wallycore)
OP_0NOTEQUAL = _wallycore.OP_0NOTEQUAL

_wallycore.OP_ADD_swigconstant(_wallycore)
OP_ADD = _wallycore.OP_ADD

_wallycore.OP_SUB_swigconstant(_wallycore)
OP_SUB = _wallycore.OP_SUB

_wallycore.OP_MUL_swigconstant(_wallycore)
OP_MUL = _wallycore.OP_MUL

_wallycore.OP_DIV_swigconstant(_wallycore)
OP_DIV = _wallycore.OP_DIV

_wallycore.OP_MOD_swigconstant(_wallycore)
OP_MOD = _wallycore.OP_MOD

_wallycore.OP_LSHIFT_swigconstant(_wallycore)
OP_LSHIFT = _wallycore.OP_LSHIFT

_wallycore.OP_RSHIFT_swigconstant(_wallycore)
OP_RSHIFT = _wallycore.OP_RSHIFT

_wallycore.OP_BOOLAND_swigconstant(_wallycore)
OP_BOOLAND = _wallycore.OP_BOOLAND

_wallycore.OP_BOOLOR_swigconstant(_wallycore)
OP_BOOLOR = _wallycore.OP_BOOLOR

_wallycore.OP_NUMEQUAL_swigconstant(_wallycore)
OP_NUMEQUAL = _wallycore.OP_NUMEQUAL

_wallycore.OP_NUMEQUALVERIFY_swigconstant(_wallycore)
OP_NUMEQUALVERIFY = _wallycore.OP_NUMEQUALVERIFY

_wallycore.OP_NUMNOTEQUAL_swigconstant(_wallycore)
OP_NUMNOTEQUAL = _wallycore.OP_NUMNOTEQUAL

_wallycore.OP_LESSTHAN_swigconstant(_wallycore)
OP_LESSTHAN = _wallycore.OP_LESSTHAN

_wallycore.OP_GREATERTHAN_swigconstant(_wallycore)
OP_GREATERTHAN = _wallycore.OP_GREATERTHAN

_wallycore.OP_LESSTHANOREQUAL_swigconstant(_wallycore)
OP_LESSTHANOREQUAL = _wallycore.OP_LESSTHANOREQUAL

_wallycore.OP_GREATERTHANOREQUAL_swigconstant(_wallycore)
OP_GREATERTHANOREQUAL = _wallycore.OP_GREATERTHANOREQUAL

_wallycore.OP_MIN_swigconstant(_wallycore)
OP_MIN = _wallycore.OP_MIN

_wallycore.OP_MAX_swigconstant(_wallycore)
OP_MAX = _wallycore.OP_MAX

_wallycore.OP_WITHIN_swigconstant(_wallycore)
OP_WITHIN = _wallycore.OP_WITHIN

_wallycore.OP_RIPEMD160_swigconstant(_wallycore)
OP_RIPEMD160 = _wallycore.OP_RIPEMD160

_wallycore.OP_SHA1_swigconstant(_wallycore)
OP_SHA1 = _wallycore.OP_SHA1

_wallycore.OP_SHA256_swigconstant(_wallycore)
OP_SHA256 = _wallycore.OP_SHA256

_wallycore.OP_HASH160_swigconstant(_wallycore)
OP_HASH160 = _wallycore.OP_HASH160

_wallycore.OP_HASH256_swigconstant(_wallycore)
OP_HASH256 = _wallycore.OP_HASH256

_wallycore.OP_CODESEPARATOR_swigconstant(_wallycore)
OP_CODESEPARATOR = _wallycore.OP_CODESEPARATOR

_wallycore.OP_CHECKSIG_swigconstant(_wallycore)
OP_CHECKSIG = _wallycore.OP_CHECKSIG

_wallycore.OP_CHECKSIGVERIFY_swigconstant(_wallycore)
OP_CHECKSIGVERIFY = _wallycore.OP_CHECKSIGVERIFY

_wallycore.OP_CHECKMULTISIG_swigconstant(_wallycore)
OP_CHECKMULTISIG = _wallycore.OP_CHECKMULTISIG

_wallycore.OP_CHECKMULTISIGVERIFY_swigconstant(_wallycore)
OP_CHECKMULTISIGVERIFY = _wallycore.OP_CHECKMULTISIGVERIFY

_wallycore.OP_NOP1_swigconstant(_wallycore)
OP_NOP1 = _wallycore.OP_NOP1

_wallycore.OP_CHECKLOCKTIMEVERIFY_swigconstant(_wallycore)
OP_CHECKLOCKTIMEVERIFY = _wallycore.OP_CHECKLOCKTIMEVERIFY

_wallycore.OP_NOP2_swigconstant(_wallycore)
OP_NOP2 = _wallycore.OP_NOP2

_wallycore.OP_CHECKSEQUENCEVERIFY_swigconstant(_wallycore)
OP_CHECKSEQUENCEVERIFY = _wallycore.OP_CHECKSEQUENCEVERIFY

_wallycore.OP_NOP3_swigconstant(_wallycore)
OP_NOP3 = _wallycore.OP_NOP3

_wallycore.OP_NOP4_swigconstant(_wallycore)
OP_NOP4 = _wallycore.OP_NOP4

_wallycore.OP_NOP5_swigconstant(_wallycore)
OP_NOP5 = _wallycore.OP_NOP5

_wallycore.OP_NOP6_swigconstant(_wallycore)
OP_NOP6 = _wallycore.OP_NOP6

_wallycore.OP_NOP7_swigconstant(_wallycore)
OP_NOP7 = _wallycore.OP_NOP7

_wallycore.OP_NOP8_swigconstant(_wallycore)
OP_NOP8 = _wallycore.OP_NOP8

_wallycore.OP_NOP9_swigconstant(_wallycore)
OP_NOP9 = _wallycore.OP_NOP9

_wallycore.OP_NOP10_swigconstant(_wallycore)
OP_NOP10 = _wallycore.OP_NOP10

_wallycore.OP_INVALIDOPCODE_swigconstant(_wallycore)
OP_INVALIDOPCODE = _wallycore.OP_INVALIDOPCODE

def scriptpubkey_get_type(bytes):
    return _wallycore.scriptpubkey_get_type(bytes)
scriptpubkey_get_type = _wallycore.scriptpubkey_get_type

def scriptpubkey_p2pkh_from_bytes(bytes, flags, bytes_out):
    return _wallycore.scriptpubkey_p2pkh_from_bytes(bytes, flags, bytes_out)
scriptpubkey_p2pkh_from_bytes = _wallycore.scriptpubkey_p2pkh_from_bytes

def scriptsig_p2pkh_from_sig(pub_key, sig, sighash, bytes_out):
    return _wallycore.scriptsig_p2pkh_from_sig(pub_key, sig, sighash, bytes_out)
scriptsig_p2pkh_from_sig = _wallycore.scriptsig_p2pkh_from_sig

def witness_p2wpkh_from_sig(pub_key, sig, sighash, witness):
    return _wallycore.witness_p2wpkh_from_sig(pub_key, sig, sighash, witness)
witness_p2wpkh_from_sig = _wallycore.witness_p2wpkh_from_sig

def scriptsig_p2pkh_from_der(pub_key, sig, bytes_out):
    return _wallycore.scriptsig_p2pkh_from_der(pub_key, sig, bytes_out)
scriptsig_p2pkh_from_der = _wallycore.scriptsig_p2pkh_from_der

def witness_p2wpkh_from_der(pub_key, sig, witness):
    return _wallycore.witness_p2wpkh_from_der(pub_key, sig, witness)
witness_p2wpkh_from_der = _wallycore.witness_p2wpkh_from_der

def scriptpubkey_op_return_from_bytes(bytes, flags, bytes_out):
    return _wallycore.scriptpubkey_op_return_from_bytes(bytes, flags, bytes_out)
scriptpubkey_op_return_from_bytes = _wallycore.scriptpubkey_op_return_from_bytes

def scriptpubkey_p2sh_from_bytes(bytes, flags, bytes_out):
    return _wallycore.scriptpubkey_p2sh_from_bytes(bytes, flags, bytes_out)
scriptpubkey_p2sh_from_bytes = _wallycore.scriptpubkey_p2sh_from_bytes

def scriptpubkey_multisig_from_bytes(bytes, threshold, flags, bytes_out):
    return _wallycore.scriptpubkey_multisig_from_bytes(bytes, threshold, flags, bytes_out)
scriptpubkey_multisig_from_bytes = _wallycore.scriptpubkey_multisig_from_bytes

def scriptsig_multisig_from_bytes(script, bytes, sighash, flags, bytes_out):
    return _wallycore.scriptsig_multisig_from_bytes(script, bytes, sighash, flags, bytes_out)
scriptsig_multisig_from_bytes = _wallycore.scriptsig_multisig_from_bytes

def witness_multisig_from_bytes(script, bytes, sighash, flags, witness):
    return _wallycore.witness_multisig_from_bytes(script, bytes, sighash, flags, witness)
witness_multisig_from_bytes = _wallycore.witness_multisig_from_bytes

def scriptpubkey_csv_2of2_then_1_from_bytes(bytes, csv_blocks, flags, bytes_out):
    return _wallycore.scriptpubkey_csv_2of2_then_1_from_bytes(bytes, csv_blocks, flags, bytes_out)
scriptpubkey_csv_2of2_then_1_from_bytes = _wallycore.scriptpubkey_csv_2of2_then_1_from_bytes

def scriptpubkey_csv_2of2_then_1_from_bytes_opt(bytes, csv_blocks, flags, bytes_out):
    return _wallycore.scriptpubkey_csv_2of2_then_1_from_bytes_opt(bytes, csv_blocks, flags, bytes_out)
scriptpubkey_csv_2of2_then_1_from_bytes_opt = _wallycore.scriptpubkey_csv_2of2_then_1_from_bytes_opt

def scriptpubkey_csv_2of3_then_2_from_bytes(bytes, csv_blocks, flags, bytes_out):
    return _wallycore.scriptpubkey_csv_2of3_then_2_from_bytes(bytes, csv_blocks, flags, bytes_out)
scriptpubkey_csv_2of3_then_2_from_bytes = _wallycore.scriptpubkey_csv_2of3_then_2_from_bytes

def script_push_from_bytes(bytes, flags, bytes_out):
    return _wallycore.script_push_from_bytes(bytes, flags, bytes_out)
script_push_from_bytes = _wallycore.script_push_from_bytes

def varint_get_length(value):
    return _wallycore.varint_get_length(value)
varint_get_length = _wallycore.varint_get_length

def varint_to_bytes(value, bytes_out):
    return _wallycore.varint_to_bytes(value, bytes_out)
varint_to_bytes = _wallycore.varint_to_bytes

def varbuff_get_length(bytes):
    return _wallycore.varbuff_get_length(bytes)
varbuff_get_length = _wallycore.varbuff_get_length

def varbuff_to_bytes(bytes, bytes_out):
    return _wallycore.varbuff_to_bytes(bytes, bytes_out)
varbuff_to_bytes = _wallycore.varbuff_to_bytes

def witness_program_from_bytes(bytes, flags, bytes_out):
    return _wallycore.witness_program_from_bytes(bytes, flags, bytes_out)
witness_program_from_bytes = _wallycore.witness_program_from_bytes

def elements_pegout_script_size(genesis_blockhash_len, mainchain_script_len, sub_pubkey_len, whitelistproof_len):
    return _wallycore.elements_pegout_script_size(genesis_blockhash_len, mainchain_script_len, sub_pubkey_len, whitelistproof_len)
elements_pegout_script_size = _wallycore.elements_pegout_script_size

def elements_pegout_script_from_bytes(genesis_blockhash, mainchain_script, sub_pubkey, whitelistproof, flags, bytes_out):
    return _wallycore.elements_pegout_script_from_bytes(genesis_blockhash, mainchain_script, sub_pubkey, whitelistproof, flags, bytes_out)
elements_pegout_script_from_bytes = _wallycore.elements_pegout_script_from_bytes

def elements_pegin_contract_script_from_bytes(redeem_script, script, flags, bytes_out):
    return _wallycore.elements_pegin_contract_script_from_bytes(redeem_script, script, flags, bytes_out)
elements_pegin_contract_script_from_bytes = _wallycore.elements_pegin_contract_script_from_bytes

_wallycore.WALLY_PSBT_HIGHEST_VERSION_swigconstant(_wallycore)
WALLY_PSBT_HIGHEST_VERSION = _wallycore.WALLY_PSBT_HIGHEST_VERSION

_wallycore.WALLY_PSBT_FLAG_NON_FINAL_swigconstant(_wallycore)
WALLY_PSBT_FLAG_NON_FINAL = _wallycore.WALLY_PSBT_FLAG_NON_FINAL

_wallycore.PSBT_PROPRIETARY_TYPE_swigconstant(_wallycore)
PSBT_PROPRIETARY_TYPE = _wallycore.PSBT_PROPRIETARY_TYPE

def map_init(allocation_len):
    return _wallycore.map_init(allocation_len)
map_init = _wallycore.map_init

def map_free(map_in):
    return _wallycore.map_free(map_in)
map_free = _wallycore.map_free

def map_find(map_in, key):
    return _wallycore.map_find(map_in, key)
map_find = _wallycore.map_find

def map_add(map_in, key, value):
    return _wallycore.map_add(map_in, key, value)
map_add = _wallycore.map_add

def map_add_keypath_item(map_in, pub_key, fingerprint, child_path):
    return _wallycore.map_add_keypath_item(map_in, pub_key, fingerprint, child_path)
map_add_keypath_item = _wallycore.map_add_keypath_item

def map_sort(map_in, flags):
    return _wallycore.map_sort(map_in, flags)
map_sort = _wallycore.map_sort

def psbt_init(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len):
    return _wallycore.psbt_init(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len)
psbt_init = _wallycore.psbt_init

def psbt_free(psbt):
    return _wallycore.psbt_free(psbt)
psbt_free = _wallycore.psbt_free

def psbt_is_finalized(psbt):
    return _wallycore.psbt_is_finalized(psbt)
psbt_is_finalized = _wallycore.psbt_is_finalized

def psbt_set_global_tx(psbt, tx):
    return _wallycore.psbt_set_global_tx(psbt, tx)
psbt_set_global_tx = _wallycore.psbt_set_global_tx

def psbt_add_input_at(psbt, index, flags, input):
    return _wallycore.psbt_add_input_at(psbt, index, flags, input)
psbt_add_input_at = _wallycore.psbt_add_input_at

def psbt_remove_input(psbt, index):
    return _wallycore.psbt_remove_input(psbt, index)
psbt_remove_input = _wallycore.psbt_remove_input

def psbt_add_output_at(psbt, index, flags, output):
    return _wallycore.psbt_add_output_at(psbt, index, flags, output)
psbt_add_output_at = _wallycore.psbt_add_output_at

def psbt_remove_output(psbt, index):
    return _wallycore.psbt_remove_output(psbt, index)
psbt_remove_output = _wallycore.psbt_remove_output

def psbt_from_bytes(bytes):
    return _wallycore.psbt_from_bytes(bytes)
psbt_from_bytes = _wallycore.psbt_from_bytes

def psbt_get_length(psbt, flags):
    return _wallycore.psbt_get_length(psbt, flags)
psbt_get_length = _wallycore.psbt_get_length

def psbt_to_bytes(psbt, flags, bytes_out):
    return _wallycore.psbt_to_bytes(psbt, flags, bytes_out)
psbt_to_bytes = _wallycore.psbt_to_bytes

def psbt_from_base64(base64):
    return _wallycore.psbt_from_base64(base64)
psbt_from_base64 = _wallycore.psbt_from_base64

def psbt_to_base64(psbt, flags):
    return _wallycore.psbt_to_base64(psbt, flags)
psbt_to_base64 = _wallycore.psbt_to_base64

def psbt_combine(psbt, src):
    return _wallycore.psbt_combine(psbt, src)
psbt_combine = _wallycore.psbt_combine

def psbt_clone(psbt, flags):
    return _wallycore.psbt_clone(psbt, flags)
psbt_clone = _wallycore.psbt_clone

def psbt_sign(psbt, key, flags):
    return _wallycore.psbt_sign(psbt, key, flags)
psbt_sign = _wallycore.psbt_sign

def psbt_finalize(psbt):
    return _wallycore.psbt_finalize(psbt)
psbt_finalize = _wallycore.psbt_finalize

def psbt_extract(psbt):
    return _wallycore.psbt_extract(psbt)
psbt_extract = _wallycore.psbt_extract

def psbt_is_elements(psbt):
    return _wallycore.psbt_is_elements(psbt)
psbt_is_elements = _wallycore.psbt_is_elements

def psbt_elements_init(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len):
    return _wallycore.psbt_elements_init(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len)
psbt_elements_init = _wallycore.psbt_elements_init

_wallycore.LIBWALLY_CORE_PSBT_INT_H_swigconstant(_wallycore)
LIBWALLY_CORE_PSBT_INT_H = _wallycore.LIBWALLY_CORE_PSBT_INT_H

def psbt_get_global_tx(psbt):
    return _wallycore.psbt_get_global_tx(psbt)
psbt_get_global_tx = _wallycore.psbt_get_global_tx

def psbt_get_version(psbt):
    return _wallycore.psbt_get_version(psbt)
psbt_get_version = _wallycore.psbt_get_version

def psbt_get_num_inputs(psbt):
    return _wallycore.psbt_get_num_inputs(psbt)
psbt_get_num_inputs = _wallycore.psbt_get_num_inputs

def psbt_get_num_outputs(psbt):
    return _wallycore.psbt_get_num_outputs(psbt)
psbt_get_num_outputs = _wallycore.psbt_get_num_outputs

def psbt_get_input_utxo(psbt, index):
    return _wallycore.psbt_get_input_utxo(psbt, index)
psbt_get_input_utxo = _wallycore.psbt_get_input_utxo

def psbt_get_input_witness_utxo(psbt, index):
    return _wallycore.psbt_get_input_witness_utxo(psbt, index)
psbt_get_input_witness_utxo = _wallycore.psbt_get_input_witness_utxo

def psbt_get_input_redeem_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_redeem_script(psbt, index, bytes_out)
psbt_get_input_redeem_script = _wallycore.psbt_get_input_redeem_script

def psbt_get_input_redeem_script_len(psbt, index):
    return _wallycore.psbt_get_input_redeem_script_len(psbt, index)
psbt_get_input_redeem_script_len = _wallycore.psbt_get_input_redeem_script_len

def psbt_get_input_witness_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_witness_script(psbt, index, bytes_out)
psbt_get_input_witness_script = _wallycore.psbt_get_input_witness_script

def psbt_get_input_witness_script_len(psbt, index):
    return _wallycore.psbt_get_input_witness_script_len(psbt, index)
psbt_get_input_witness_script_len = _wallycore.psbt_get_input_witness_script_len

def psbt_get_input_final_scriptsig(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_final_scriptsig(psbt, index, bytes_out)
psbt_get_input_final_scriptsig = _wallycore.psbt_get_input_final_scriptsig

def psbt_get_input_final_scriptsig_len(psbt, index):
    return _wallycore.psbt_get_input_final_scriptsig_len(psbt, index)
psbt_get_input_final_scriptsig_len = _wallycore.psbt_get_input_final_scriptsig_len

def psbt_get_input_final_witness(psbt, index):
    return _wallycore.psbt_get_input_final_witness(psbt, index)
psbt_get_input_final_witness = _wallycore.psbt_get_input_final_witness

def psbt_get_input_keypaths_size(psbt, index):
    return _wallycore.psbt_get_input_keypaths_size(psbt, index)
psbt_get_input_keypaths_size = _wallycore.psbt_get_input_keypaths_size

def psbt_find_input_keypath(psbt, index, key):
    return _wallycore.psbt_find_input_keypath(psbt, index, key)
psbt_find_input_keypath = _wallycore.psbt_find_input_keypath

def psbt_get_input_keypath(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_input_keypath(psbt, index, subindex, bytes_out)
psbt_get_input_keypath = _wallycore.psbt_get_input_keypath

def psbt_get_input_keypath_len(psbt, index, subindex):
    return _wallycore.psbt_get_input_keypath_len(psbt, index, subindex)
psbt_get_input_keypath_len = _wallycore.psbt_get_input_keypath_len

def psbt_get_input_signatures_size(psbt, index):
    return _wallycore.psbt_get_input_signatures_size(psbt, index)
psbt_get_input_signatures_size = _wallycore.psbt_get_input_signatures_size

def psbt_find_input_signature(psbt, index, pub_key):
    return _wallycore.psbt_find_input_signature(psbt, index, pub_key)
psbt_find_input_signature = _wallycore.psbt_find_input_signature

def psbt_get_input_signature(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_input_signature(psbt, index, subindex, bytes_out)
psbt_get_input_signature = _wallycore.psbt_get_input_signature

def psbt_get_input_signature_len(psbt, index, subindex):
    return _wallycore.psbt_get_input_signature_len(psbt, index, subindex)
psbt_get_input_signature_len = _wallycore.psbt_get_input_signature_len

def psbt_get_input_unknowns_size(psbt, index):
    return _wallycore.psbt_get_input_unknowns_size(psbt, index)
psbt_get_input_unknowns_size = _wallycore.psbt_get_input_unknowns_size

def psbt_find_input_unknown(psbt, index, key):
    return _wallycore.psbt_find_input_unknown(psbt, index, key)
psbt_find_input_unknown = _wallycore.psbt_find_input_unknown

def psbt_get_input_unknown(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_input_unknown(psbt, index, subindex, bytes_out)
psbt_get_input_unknown = _wallycore.psbt_get_input_unknown

def psbt_get_input_unknown_len(psbt, index, subindex):
    return _wallycore.psbt_get_input_unknown_len(psbt, index, subindex)
psbt_get_input_unknown_len = _wallycore.psbt_get_input_unknown_len

def psbt_get_input_sighash(psbt, index):
    return _wallycore.psbt_get_input_sighash(psbt, index)
psbt_get_input_sighash = _wallycore.psbt_get_input_sighash

def psbt_set_input_utxo(psbt, index, utxo):
    return _wallycore.psbt_set_input_utxo(psbt, index, utxo)
psbt_set_input_utxo = _wallycore.psbt_set_input_utxo

def psbt_set_input_witness_utxo(psbt, index, witness_utxo):
    return _wallycore.psbt_set_input_witness_utxo(psbt, index, witness_utxo)
psbt_set_input_witness_utxo = _wallycore.psbt_set_input_witness_utxo

def psbt_set_input_redeem_script(psbt, index, script):
    return _wallycore.psbt_set_input_redeem_script(psbt, index, script)
psbt_set_input_redeem_script = _wallycore.psbt_set_input_redeem_script

def psbt_set_input_witness_script(psbt, index, script):
    return _wallycore.psbt_set_input_witness_script(psbt, index, script)
psbt_set_input_witness_script = _wallycore.psbt_set_input_witness_script

def psbt_set_input_final_scriptsig(psbt, index, script):
    return _wallycore.psbt_set_input_final_scriptsig(psbt, index, script)
psbt_set_input_final_scriptsig = _wallycore.psbt_set_input_final_scriptsig

def psbt_set_input_final_witness(psbt, index, final_witness):
    return _wallycore.psbt_set_input_final_witness(psbt, index, final_witness)
psbt_set_input_final_witness = _wallycore.psbt_set_input_final_witness

def psbt_set_input_keypaths(psbt, index, map_in):
    return _wallycore.psbt_set_input_keypaths(psbt, index, map_in)
psbt_set_input_keypaths = _wallycore.psbt_set_input_keypaths

def psbt_set_input_signatures(psbt, index, map_in):
    return _wallycore.psbt_set_input_signatures(psbt, index, map_in)
psbt_set_input_signatures = _wallycore.psbt_set_input_signatures

def psbt_set_input_unknowns(psbt, index, map_in):
    return _wallycore.psbt_set_input_unknowns(psbt, index, map_in)
psbt_set_input_unknowns = _wallycore.psbt_set_input_unknowns

def psbt_set_input_sighash(psbt, index, sighash):
    return _wallycore.psbt_set_input_sighash(psbt, index, sighash)
psbt_set_input_sighash = _wallycore.psbt_set_input_sighash

def psbt_get_input_value(psbt, index):
    return _wallycore.psbt_get_input_value(psbt, index)
psbt_get_input_value = _wallycore.psbt_get_input_value

def psbt_has_input_value(psbt, index):
    return _wallycore.psbt_has_input_value(psbt, index)
psbt_has_input_value = _wallycore.psbt_has_input_value

def psbt_get_input_vbf(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_vbf(psbt, index, bytes_out)
psbt_get_input_vbf = _wallycore.psbt_get_input_vbf

def psbt_get_input_vbf_len(psbt, index):
    return _wallycore.psbt_get_input_vbf_len(psbt, index)
psbt_get_input_vbf_len = _wallycore.psbt_get_input_vbf_len

def psbt_get_input_asset(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_asset(psbt, index, bytes_out)
psbt_get_input_asset = _wallycore.psbt_get_input_asset

def psbt_get_input_asset_len(psbt, index):
    return _wallycore.psbt_get_input_asset_len(psbt, index)
psbt_get_input_asset_len = _wallycore.psbt_get_input_asset_len

def psbt_get_input_abf(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_abf(psbt, index, bytes_out)
psbt_get_input_abf = _wallycore.psbt_get_input_abf

def psbt_get_input_abf_len(psbt, index):
    return _wallycore.psbt_get_input_abf_len(psbt, index)
psbt_get_input_abf_len = _wallycore.psbt_get_input_abf_len

def psbt_get_input_pegin_tx(psbt, index):
    return _wallycore.psbt_get_input_pegin_tx(psbt, index)
psbt_get_input_pegin_tx = _wallycore.psbt_get_input_pegin_tx

def psbt_get_input_txoutproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_txoutproof(psbt, index, bytes_out)
psbt_get_input_txoutproof = _wallycore.psbt_get_input_txoutproof

def psbt_get_input_txoutproof_len(psbt, index):
    return _wallycore.psbt_get_input_txoutproof_len(psbt, index)
psbt_get_input_txoutproof_len = _wallycore.psbt_get_input_txoutproof_len

def psbt_get_input_genesis_blockhash(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_genesis_blockhash(psbt, index, bytes_out)
psbt_get_input_genesis_blockhash = _wallycore.psbt_get_input_genesis_blockhash

def psbt_get_input_genesis_blockhash_len(psbt, index):
    return _wallycore.psbt_get_input_genesis_blockhash_len(psbt, index)
psbt_get_input_genesis_blockhash_len = _wallycore.psbt_get_input_genesis_blockhash_len

def psbt_get_input_claim_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_claim_script(psbt, index, bytes_out)
psbt_get_input_claim_script = _wallycore.psbt_get_input_claim_script

def psbt_get_input_claim_script_len(psbt, index):
    return _wallycore.psbt_get_input_claim_script_len(psbt, index)
psbt_get_input_claim_script_len = _wallycore.psbt_get_input_claim_script_len

def psbt_set_input_value(psbt, index, value):
    return _wallycore.psbt_set_input_value(psbt, index, value)
psbt_set_input_value = _wallycore.psbt_set_input_value

def psbt_clear_input_value(psbt, index):
    return _wallycore.psbt_clear_input_value(psbt, index)
psbt_clear_input_value = _wallycore.psbt_clear_input_value

def psbt_set_input_vbf(psbt, index, vbf):
    return _wallycore.psbt_set_input_vbf(psbt, index, vbf)
psbt_set_input_vbf = _wallycore.psbt_set_input_vbf

def psbt_set_input_asset(psbt, index, asset):
    return _wallycore.psbt_set_input_asset(psbt, index, asset)
psbt_set_input_asset = _wallycore.psbt_set_input_asset

def psbt_set_input_abf(psbt, index, abf):
    return _wallycore.psbt_set_input_abf(psbt, index, abf)
psbt_set_input_abf = _wallycore.psbt_set_input_abf

def psbt_set_input_pegin_tx(psbt, index, pegin_tx):
    return _wallycore.psbt_set_input_pegin_tx(psbt, index, pegin_tx)
psbt_set_input_pegin_tx = _wallycore.psbt_set_input_pegin_tx

def psbt_set_input_txoutproof(psbt, index, proof):
    return _wallycore.psbt_set_input_txoutproof(psbt, index, proof)
psbt_set_input_txoutproof = _wallycore.psbt_set_input_txoutproof

def psbt_set_input_genesis_blockhash(psbt, index, genesis_blockhash):
    return _wallycore.psbt_set_input_genesis_blockhash(psbt, index, genesis_blockhash)
psbt_set_input_genesis_blockhash = _wallycore.psbt_set_input_genesis_blockhash

def psbt_set_input_claim_script(psbt, index, script):
    return _wallycore.psbt_set_input_claim_script(psbt, index, script)
psbt_set_input_claim_script = _wallycore.psbt_set_input_claim_script

def psbt_get_output_redeem_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_redeem_script(psbt, index, bytes_out)
psbt_get_output_redeem_script = _wallycore.psbt_get_output_redeem_script

def psbt_get_output_redeem_script_len(psbt, index):
    return _wallycore.psbt_get_output_redeem_script_len(psbt, index)
psbt_get_output_redeem_script_len = _wallycore.psbt_get_output_redeem_script_len

def psbt_get_output_witness_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_witness_script(psbt, index, bytes_out)
psbt_get_output_witness_script = _wallycore.psbt_get_output_witness_script

def psbt_get_output_witness_script_len(psbt, index):
    return _wallycore.psbt_get_output_witness_script_len(psbt, index)
psbt_get_output_witness_script_len = _wallycore.psbt_get_output_witness_script_len

def psbt_get_output_keypaths_size(psbt, index):
    return _wallycore.psbt_get_output_keypaths_size(psbt, index)
psbt_get_output_keypaths_size = _wallycore.psbt_get_output_keypaths_size

def psbt_find_output_keypath(psbt, index, key):
    return _wallycore.psbt_find_output_keypath(psbt, index, key)
psbt_find_output_keypath = _wallycore.psbt_find_output_keypath

def psbt_get_output_keypath(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_output_keypath(psbt, index, subindex, bytes_out)
psbt_get_output_keypath = _wallycore.psbt_get_output_keypath

def psbt_get_output_keypath_len(psbt, index, subindex):
    return _wallycore.psbt_get_output_keypath_len(psbt, index, subindex)
psbt_get_output_keypath_len = _wallycore.psbt_get_output_keypath_len

def psbt_get_output_unknowns_size(psbt, index):
    return _wallycore.psbt_get_output_unknowns_size(psbt, index)
psbt_get_output_unknowns_size = _wallycore.psbt_get_output_unknowns_size

def psbt_find_output_unknown(psbt, index, key):
    return _wallycore.psbt_find_output_unknown(psbt, index, key)
psbt_find_output_unknown = _wallycore.psbt_find_output_unknown

def psbt_get_output_unknown(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_output_unknown(psbt, index, subindex, bytes_out)
psbt_get_output_unknown = _wallycore.psbt_get_output_unknown

def psbt_get_output_unknown_len(psbt, index, subindex):
    return _wallycore.psbt_get_output_unknown_len(psbt, index, subindex)
psbt_get_output_unknown_len = _wallycore.psbt_get_output_unknown_len

def psbt_set_output_redeem_script(psbt, index, script):
    return _wallycore.psbt_set_output_redeem_script(psbt, index, script)
psbt_set_output_redeem_script = _wallycore.psbt_set_output_redeem_script

def psbt_set_output_witness_script(psbt, index, script):
    return _wallycore.psbt_set_output_witness_script(psbt, index, script)
psbt_set_output_witness_script = _wallycore.psbt_set_output_witness_script

def psbt_set_output_keypaths(psbt, index, map_in):
    return _wallycore.psbt_set_output_keypaths(psbt, index, map_in)
psbt_set_output_keypaths = _wallycore.psbt_set_output_keypaths

def psbt_set_output_unknowns(psbt, index, map_in):
    return _wallycore.psbt_set_output_unknowns(psbt, index, map_in)
psbt_set_output_unknowns = _wallycore.psbt_set_output_unknowns

def psbt_get_output_blinding_pubkey(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_blinding_pubkey(psbt, index, bytes_out)
psbt_get_output_blinding_pubkey = _wallycore.psbt_get_output_blinding_pubkey

def psbt_get_output_blinding_pubkey_len(psbt, index):
    return _wallycore.psbt_get_output_blinding_pubkey_len(psbt, index)
psbt_get_output_blinding_pubkey_len = _wallycore.psbt_get_output_blinding_pubkey_len

def psbt_get_output_value_commitment(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_value_commitment(psbt, index, bytes_out)
psbt_get_output_value_commitment = _wallycore.psbt_get_output_value_commitment

def psbt_get_output_value_commitment_len(psbt, index):
    return _wallycore.psbt_get_output_value_commitment_len(psbt, index)
psbt_get_output_value_commitment_len = _wallycore.psbt_get_output_value_commitment_len

def psbt_get_output_vbf(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_vbf(psbt, index, bytes_out)
psbt_get_output_vbf = _wallycore.psbt_get_output_vbf

def psbt_get_output_vbf_len(psbt, index):
    return _wallycore.psbt_get_output_vbf_len(psbt, index)
psbt_get_output_vbf_len = _wallycore.psbt_get_output_vbf_len

def psbt_get_output_asset_commitment(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_asset_commitment(psbt, index, bytes_out)
psbt_get_output_asset_commitment = _wallycore.psbt_get_output_asset_commitment

def psbt_get_output_asset_commitment_len(psbt, index):
    return _wallycore.psbt_get_output_asset_commitment_len(psbt, index)
psbt_get_output_asset_commitment_len = _wallycore.psbt_get_output_asset_commitment_len

def psbt_get_output_abf(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_abf(psbt, index, bytes_out)
psbt_get_output_abf = _wallycore.psbt_get_output_abf

def psbt_get_output_abf_len(psbt, index):
    return _wallycore.psbt_get_output_abf_len(psbt, index)
psbt_get_output_abf_len = _wallycore.psbt_get_output_abf_len

def psbt_get_output_nonce(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_nonce(psbt, index, bytes_out)
psbt_get_output_nonce = _wallycore.psbt_get_output_nonce

def psbt_get_output_nonce_len(psbt, index):
    return _wallycore.psbt_get_output_nonce_len(psbt, index)
psbt_get_output_nonce_len = _wallycore.psbt_get_output_nonce_len

def psbt_get_output_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_rangeproof(psbt, index, bytes_out)
psbt_get_output_rangeproof = _wallycore.psbt_get_output_rangeproof

def psbt_get_output_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_output_rangeproof_len(psbt, index)
psbt_get_output_rangeproof_len = _wallycore.psbt_get_output_rangeproof_len

def psbt_get_output_surjectionproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_surjectionproof(psbt, index, bytes_out)
psbt_get_output_surjectionproof = _wallycore.psbt_get_output_surjectionproof

def psbt_get_output_surjectionproof_len(psbt, index):
    return _wallycore.psbt_get_output_surjectionproof_len(psbt, index)
psbt_get_output_surjectionproof_len = _wallycore.psbt_get_output_surjectionproof_len

def psbt_set_output_blinding_pubkey(psbt, index, pub_key):
    return _wallycore.psbt_set_output_blinding_pubkey(psbt, index, pub_key)
psbt_set_output_blinding_pubkey = _wallycore.psbt_set_output_blinding_pubkey

def psbt_set_output_value_commitment(psbt, index, commitment):
    return _wallycore.psbt_set_output_value_commitment(psbt, index, commitment)
psbt_set_output_value_commitment = _wallycore.psbt_set_output_value_commitment

def psbt_set_output_vbf(psbt, index, vbf):
    return _wallycore.psbt_set_output_vbf(psbt, index, vbf)
psbt_set_output_vbf = _wallycore.psbt_set_output_vbf

def psbt_set_output_asset_commitment(psbt, index, commitment):
    return _wallycore.psbt_set_output_asset_commitment(psbt, index, commitment)
psbt_set_output_asset_commitment = _wallycore.psbt_set_output_asset_commitment

def psbt_set_output_abf(psbt, index, abf):
    return _wallycore.psbt_set_output_abf(psbt, index, abf)
psbt_set_output_abf = _wallycore.psbt_set_output_abf

def psbt_set_output_nonce(psbt, index, nonce):
    return _wallycore.psbt_set_output_nonce(psbt, index, nonce)
psbt_set_output_nonce = _wallycore.psbt_set_output_nonce

def psbt_set_output_rangeproof(psbt, index, proof):
    return _wallycore.psbt_set_output_rangeproof(psbt, index, proof)
psbt_set_output_rangeproof = _wallycore.psbt_set_output_rangeproof

def psbt_set_output_surjectionproof(psbt, index, proof):
    return _wallycore.psbt_set_output_surjectionproof(psbt, index, proof)
psbt_set_output_surjectionproof = _wallycore.psbt_set_output_surjectionproof

def symmetric_key_from_seed(bytes, bytes_out):
    return _wallycore.symmetric_key_from_seed(bytes, bytes_out)
symmetric_key_from_seed = _wallycore.symmetric_key_from_seed

def symmetric_key_from_parent(bytes, version, label, bytes_out):
    return _wallycore.symmetric_key_from_parent(bytes, version, label, bytes_out)
symmetric_key_from_parent = _wallycore.symmetric_key_from_parent

_wallycore.WALLY_TX_SEQUENCE_FINAL_swigconstant(_wallycore)
WALLY_TX_SEQUENCE_FINAL = _wallycore.WALLY_TX_SEQUENCE_FINAL

_wallycore.WALLY_TX_VERSION_1_swigconstant(_wallycore)
WALLY_TX_VERSION_1 = _wallycore.WALLY_TX_VERSION_1

_wallycore.WALLY_TX_VERSION_2_swigconstant(_wallycore)
WALLY_TX_VERSION_2 = _wallycore.WALLY_TX_VERSION_2

_wallycore.WALLY_TX_IS_ELEMENTS_swigconstant(_wallycore)
WALLY_TX_IS_ELEMENTS = _wallycore.WALLY_TX_IS_ELEMENTS

_wallycore.WALLY_TX_IS_ISSUANCE_swigconstant(_wallycore)
WALLY_TX_IS_ISSUANCE = _wallycore.WALLY_TX_IS_ISSUANCE

_wallycore.WALLY_TX_IS_PEGIN_swigconstant(_wallycore)
WALLY_TX_IS_PEGIN = _wallycore.WALLY_TX_IS_PEGIN

_wallycore.WALLY_TX_IS_COINBASE_swigconstant(_wallycore)
WALLY_TX_IS_COINBASE = _wallycore.WALLY_TX_IS_COINBASE

_wallycore.WALLY_SATOSHI_PER_BTC_swigconstant(_wallycore)
WALLY_SATOSHI_PER_BTC = _wallycore.WALLY_SATOSHI_PER_BTC

_wallycore.WALLY_BTC_MAX_swigconstant(_wallycore)
WALLY_BTC_MAX = _wallycore.WALLY_BTC_MAX

_wallycore.WALLY_TXHASH_LEN_swigconstant(_wallycore)
WALLY_TXHASH_LEN = _wallycore.WALLY_TXHASH_LEN

_wallycore.WALLY_TX_FLAG_USE_WITNESS_swigconstant(_wallycore)
WALLY_TX_FLAG_USE_WITNESS = _wallycore.WALLY_TX_FLAG_USE_WITNESS

_wallycore.WALLY_TX_FLAG_USE_ELEMENTS_swigconstant(_wallycore)
WALLY_TX_FLAG_USE_ELEMENTS = _wallycore.WALLY_TX_FLAG_USE_ELEMENTS

_wallycore.WALLY_TX_FLAG_ALLOW_PARTIAL_swigconstant(_wallycore)
WALLY_TX_FLAG_ALLOW_PARTIAL = _wallycore.WALLY_TX_FLAG_ALLOW_PARTIAL

_wallycore.WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE_swigconstant(_wallycore)
WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE = _wallycore.WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE

_wallycore.WALLY_TX_DUMMY_NULL_swigconstant(_wallycore)
WALLY_TX_DUMMY_NULL = _wallycore.WALLY_TX_DUMMY_NULL

_wallycore.WALLY_TX_DUMMY_SIG_swigconstant(_wallycore)
WALLY_TX_DUMMY_SIG = _wallycore.WALLY_TX_DUMMY_SIG

_wallycore.WALLY_TX_DUMMY_SIG_LOW_R_swigconstant(_wallycore)
WALLY_TX_DUMMY_SIG_LOW_R = _wallycore.WALLY_TX_DUMMY_SIG_LOW_R

_wallycore.WALLY_SIGHASH_ALL_swigconstant(_wallycore)
WALLY_SIGHASH_ALL = _wallycore.WALLY_SIGHASH_ALL

_wallycore.WALLY_SIGHASH_NONE_swigconstant(_wallycore)
WALLY_SIGHASH_NONE = _wallycore.WALLY_SIGHASH_NONE

_wallycore.WALLY_SIGHASH_SINGLE_swigconstant(_wallycore)
WALLY_SIGHASH_SINGLE = _wallycore.WALLY_SIGHASH_SINGLE

_wallycore.WALLY_SIGHASH_FORKID_swigconstant(_wallycore)
WALLY_SIGHASH_FORKID = _wallycore.WALLY_SIGHASH_FORKID

_wallycore.WALLY_SIGHASH_ANYONECANPAY_swigconstant(_wallycore)
WALLY_SIGHASH_ANYONECANPAY = _wallycore.WALLY_SIGHASH_ANYONECANPAY

_wallycore.WALLY_TX_ASSET_CT_VALUE_PREFIX_A_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_VALUE_PREFIX_A = _wallycore.WALLY_TX_ASSET_CT_VALUE_PREFIX_A

_wallycore.WALLY_TX_ASSET_CT_VALUE_PREFIX_B_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_VALUE_PREFIX_B = _wallycore.WALLY_TX_ASSET_CT_VALUE_PREFIX_B

_wallycore.WALLY_TX_ASSET_CT_ASSET_PREFIX_A_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_ASSET_PREFIX_A = _wallycore.WALLY_TX_ASSET_CT_ASSET_PREFIX_A

_wallycore.WALLY_TX_ASSET_CT_ASSET_PREFIX_B_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_ASSET_PREFIX_B = _wallycore.WALLY_TX_ASSET_CT_ASSET_PREFIX_B

_wallycore.WALLY_TX_ASSET_CT_NONCE_PREFIX_A_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_NONCE_PREFIX_A = _wallycore.WALLY_TX_ASSET_CT_NONCE_PREFIX_A

_wallycore.WALLY_TX_ASSET_CT_NONCE_PREFIX_B_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_NONCE_PREFIX_B = _wallycore.WALLY_TX_ASSET_CT_NONCE_PREFIX_B

_wallycore.WALLY_TX_ASSET_TAG_LEN_swigconstant(_wallycore)
WALLY_TX_ASSET_TAG_LEN = _wallycore.WALLY_TX_ASSET_TAG_LEN

_wallycore.WALLY_TX_ASSET_CT_VALUE_LEN_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_VALUE_LEN = _wallycore.WALLY_TX_ASSET_CT_VALUE_LEN

_wallycore.WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN = _wallycore.WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN

_wallycore.WALLY_TX_ASSET_CT_ASSET_LEN_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_ASSET_LEN = _wallycore.WALLY_TX_ASSET_CT_ASSET_LEN

_wallycore.WALLY_TX_ASSET_CT_NONCE_LEN_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_NONCE_LEN = _wallycore.WALLY_TX_ASSET_CT_NONCE_LEN

_wallycore.WALLY_TX_ASSET_CT_LEN_swigconstant(_wallycore)
WALLY_TX_ASSET_CT_LEN = _wallycore.WALLY_TX_ASSET_CT_LEN

_wallycore.WALLY_TX_ISSUANCE_FLAG_swigconstant(_wallycore)
WALLY_TX_ISSUANCE_FLAG = _wallycore.WALLY_TX_ISSUANCE_FLAG

_wallycore.WALLY_TX_PEGIN_FLAG_swigconstant(_wallycore)
WALLY_TX_PEGIN_FLAG = _wallycore.WALLY_TX_PEGIN_FLAG

_wallycore.WALLY_TX_INDEX_MASK_swigconstant(_wallycore)
WALLY_TX_INDEX_MASK = _wallycore.WALLY_TX_INDEX_MASK

def tx_witness_stack_init(allocation_len):
    return _wallycore.tx_witness_stack_init(allocation_len)
tx_witness_stack_init = _wallycore.tx_witness_stack_init

def tx_witness_stack_clone(stack):
    return _wallycore.tx_witness_stack_clone(stack)
tx_witness_stack_clone = _wallycore.tx_witness_stack_clone

def tx_witness_stack_add(stack, witness):
    return _wallycore.tx_witness_stack_add(stack, witness)
tx_witness_stack_add = _wallycore.tx_witness_stack_add

def tx_witness_stack_add_dummy(stack, flags):
    return _wallycore.tx_witness_stack_add_dummy(stack, flags)
tx_witness_stack_add_dummy = _wallycore.tx_witness_stack_add_dummy

def tx_witness_stack_set(stack, index, witness):
    return _wallycore.tx_witness_stack_set(stack, index, witness)
tx_witness_stack_set = _wallycore.tx_witness_stack_set

def tx_witness_stack_set_dummy(stack, index, flags):
    return _wallycore.tx_witness_stack_set_dummy(stack, index, flags)
tx_witness_stack_set_dummy = _wallycore.tx_witness_stack_set_dummy

def tx_witness_stack_free(stack):
    return _wallycore.tx_witness_stack_free(stack)
tx_witness_stack_free = _wallycore.tx_witness_stack_free

def tx_input_init(txhash, utxo_index, sequence, script, witness):
    return _wallycore.tx_input_init(txhash, utxo_index, sequence, script, witness)
tx_input_init = _wallycore.tx_input_init

def tx_input_free(input):
    return _wallycore.tx_input_free(input)
tx_input_free = _wallycore.tx_input_free

def tx_output_init(satoshi, script):
    return _wallycore.tx_output_init(satoshi, script)
tx_output_init = _wallycore.tx_output_init

def tx_output_clone(tx_output_in):
    return _wallycore.tx_output_clone(tx_output_in)
tx_output_clone = _wallycore.tx_output_clone

def tx_output_free(output):
    return _wallycore.tx_output_free(output)
tx_output_free = _wallycore.tx_output_free

def tx_init(version, locktime, inputs_allocation_len, outputs_allocation_len):
    return _wallycore.tx_init(version, locktime, inputs_allocation_len, outputs_allocation_len)
tx_init = _wallycore.tx_init

def tx_clone_alloc(tx, flags):
    return _wallycore.tx_clone_alloc(tx, flags)
tx_clone_alloc = _wallycore.tx_clone_alloc

def tx_add_input(tx, input):
    return _wallycore.tx_add_input(tx, input)
tx_add_input = _wallycore.tx_add_input

def tx_add_input_at(tx, index, input):
    return _wallycore.tx_add_input_at(tx, index, input)
tx_add_input_at = _wallycore.tx_add_input_at

def tx_add_raw_input(tx, txhash, utxo_index, sequence, script, witness, flags):
    return _wallycore.tx_add_raw_input(tx, txhash, utxo_index, sequence, script, witness, flags)
tx_add_raw_input = _wallycore.tx_add_raw_input

def tx_add_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, flags):
    return _wallycore.tx_add_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, flags)
tx_add_raw_input_at = _wallycore.tx_add_raw_input_at

def tx_remove_input(tx, index):
    return _wallycore.tx_remove_input(tx, index)
tx_remove_input = _wallycore.tx_remove_input

def tx_set_input_script(tx, index, script):
    return _wallycore.tx_set_input_script(tx, index, script)
tx_set_input_script = _wallycore.tx_set_input_script

def tx_set_input_witness(tx, index, stack):
    return _wallycore.tx_set_input_witness(tx, index, stack)
tx_set_input_witness = _wallycore.tx_set_input_witness

def tx_add_output(tx, output):
    return _wallycore.tx_add_output(tx, output)
tx_add_output = _wallycore.tx_add_output

def tx_add_output_at(tx, index, output):
    return _wallycore.tx_add_output_at(tx, index, output)
tx_add_output_at = _wallycore.tx_add_output_at

def tx_add_raw_output(tx, satoshi, script, flags):
    return _wallycore.tx_add_raw_output(tx, satoshi, script, flags)
tx_add_raw_output = _wallycore.tx_add_raw_output

def tx_add_raw_output_at(tx, index, satoshi, script, flags):
    return _wallycore.tx_add_raw_output_at(tx, index, satoshi, script, flags)
tx_add_raw_output_at = _wallycore.tx_add_raw_output_at

def tx_remove_output(tx, index):
    return _wallycore.tx_remove_output(tx, index)
tx_remove_output = _wallycore.tx_remove_output

def tx_get_witness_count(tx):
    return _wallycore.tx_get_witness_count(tx)
tx_get_witness_count = _wallycore.tx_get_witness_count

def tx_free(tx):
    return _wallycore.tx_free(tx)
tx_free = _wallycore.tx_free

def tx_get_txid(tx, bytes_out):
    return _wallycore.tx_get_txid(tx, bytes_out)
tx_get_txid = _wallycore.tx_get_txid

def tx_get_length(tx, flags):
    return _wallycore.tx_get_length(tx, flags)
tx_get_length = _wallycore.tx_get_length

def tx_from_bytes(bytes, flags):
    return _wallycore.tx_from_bytes(bytes, flags)
tx_from_bytes = _wallycore.tx_from_bytes

def tx_from_hex(hex, flags):
    return _wallycore.tx_from_hex(hex, flags)
tx_from_hex = _wallycore.tx_from_hex

def tx_to_bytes(tx, flags, bytes_out):
    return _wallycore.tx_to_bytes(tx, flags, bytes_out)
tx_to_bytes = _wallycore.tx_to_bytes

def tx_to_hex(tx, flags):
    return _wallycore.tx_to_hex(tx, flags)
tx_to_hex = _wallycore.tx_to_hex

def tx_get_weight(tx):
    return _wallycore.tx_get_weight(tx)
tx_get_weight = _wallycore.tx_get_weight

def tx_get_vsize(tx):
    return _wallycore.tx_get_vsize(tx)
tx_get_vsize = _wallycore.tx_get_vsize

def tx_vsize_from_weight(weight):
    return _wallycore.tx_vsize_from_weight(weight)
tx_vsize_from_weight = _wallycore.tx_vsize_from_weight

def tx_get_total_output_satoshi(tx):
    return _wallycore.tx_get_total_output_satoshi(tx)
tx_get_total_output_satoshi = _wallycore.tx_get_total_output_satoshi

def tx_get_btc_signature_hash(tx, index, script, satoshi, sighash, flags, bytes_out):
    return _wallycore.tx_get_btc_signature_hash(tx, index, script, satoshi, sighash, flags, bytes_out)
tx_get_btc_signature_hash = _wallycore.tx_get_btc_signature_hash

def tx_get_signature_hash(tx, index, script, extra, extra_offset, satoshi, sighash, tx_sighash, flags, bytes_out):
    return _wallycore.tx_get_signature_hash(tx, index, script, extra, extra_offset, satoshi, sighash, tx_sighash, flags, bytes_out)
tx_get_signature_hash = _wallycore.tx_get_signature_hash

def tx_is_coinbase(tx):
    return _wallycore.tx_is_coinbase(tx)
tx_is_coinbase = _wallycore.tx_is_coinbase

def tx_elements_input_issuance_set(input, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof):
    return _wallycore.tx_elements_input_issuance_set(input, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof)
tx_elements_input_issuance_set = _wallycore.tx_elements_input_issuance_set

def tx_elements_input_issuance_free(input):
    return _wallycore.tx_elements_input_issuance_free(input)
tx_elements_input_issuance_free = _wallycore.tx_elements_input_issuance_free

def tx_elements_input_init(txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness):
    return _wallycore.tx_elements_input_init(txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness)
tx_elements_input_init = _wallycore.tx_elements_input_init

def tx_elements_input_is_pegin(input):
    return _wallycore.tx_elements_input_is_pegin(input)
tx_elements_input_is_pegin = _wallycore.tx_elements_input_is_pegin

def tx_elements_output_commitment_set(output, asset, value, nonce, surjectionproof, rangeproof):
    return _wallycore.tx_elements_output_commitment_set(output, asset, value, nonce, surjectionproof, rangeproof)
tx_elements_output_commitment_set = _wallycore.tx_elements_output_commitment_set

def tx_elements_output_commitment_free(output):
    return _wallycore.tx_elements_output_commitment_free(output)
tx_elements_output_commitment_free = _wallycore.tx_elements_output_commitment_free

def tx_elements_output_init(script, asset, value, nonce, surjectionproof, rangeproof):
    return _wallycore.tx_elements_output_init(script, asset, value, nonce, surjectionproof, rangeproof)
tx_elements_output_init = _wallycore.tx_elements_output_init

def tx_add_elements_raw_input(tx, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags):
    return _wallycore.tx_add_elements_raw_input(tx, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags)
tx_add_elements_raw_input = _wallycore.tx_add_elements_raw_input

def tx_add_elements_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags):
    return _wallycore.tx_add_elements_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags)
tx_add_elements_raw_input_at = _wallycore.tx_add_elements_raw_input_at

def tx_add_elements_raw_output(tx, script, asset, value, nonce, surjectionproof, rangeproof, flags):
    return _wallycore.tx_add_elements_raw_output(tx, script, asset, value, nonce, surjectionproof, rangeproof, flags)
tx_add_elements_raw_output = _wallycore.tx_add_elements_raw_output

def tx_add_elements_raw_output_at(tx, index, script, asset, value, nonce, surjectionproof, rangeproof, flags):
    return _wallycore.tx_add_elements_raw_output_at(tx, index, script, asset, value, nonce, surjectionproof, rangeproof, flags)
tx_add_elements_raw_output_at = _wallycore.tx_add_elements_raw_output_at

def tx_is_elements(tx):
    return _wallycore.tx_is_elements(tx)
tx_is_elements = _wallycore.tx_is_elements

def tx_confidential_value_from_satoshi(satoshi, bytes_out):
    return _wallycore.tx_confidential_value_from_satoshi(satoshi, bytes_out)
tx_confidential_value_from_satoshi = _wallycore.tx_confidential_value_from_satoshi

def tx_confidential_value_to_satoshi(value):
    return _wallycore.tx_confidential_value_to_satoshi(value)
tx_confidential_value_to_satoshi = _wallycore.tx_confidential_value_to_satoshi

def tx_get_elements_signature_hash(tx, index, script, value, sighash, flags, bytes_out):
    return _wallycore.tx_get_elements_signature_hash(tx, index, script, value, sighash, flags, bytes_out)
tx_get_elements_signature_hash = _wallycore.tx_get_elements_signature_hash

def tx_elements_issuance_generate_entropy(txhash, index, contract_hash, bytes_out):
    return _wallycore.tx_elements_issuance_generate_entropy(txhash, index, contract_hash, bytes_out)
tx_elements_issuance_generate_entropy = _wallycore.tx_elements_issuance_generate_entropy

def tx_elements_issuance_calculate_asset(entropy, bytes_out):
    return _wallycore.tx_elements_issuance_calculate_asset(entropy, bytes_out)
tx_elements_issuance_calculate_asset = _wallycore.tx_elements_issuance_calculate_asset

def tx_elements_issuance_calculate_reissuance_token(entropy, flags, bytes_out):
    return _wallycore.tx_elements_issuance_calculate_reissuance_token(entropy, flags, bytes_out)
tx_elements_issuance_calculate_reissuance_token = _wallycore.tx_elements_issuance_calculate_reissuance_token

_wallycore.LIBWALLY_CORE_TRANSACTION_INT_H_swigconstant(_wallycore)
LIBWALLY_CORE_TRANSACTION_INT_H = _wallycore.LIBWALLY_CORE_TRANSACTION_INT_H

def tx_input_get_txhash(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_txhash(tx_input_in, bytes_out)
tx_input_get_txhash = _wallycore.tx_input_get_txhash

def tx_input_get_script(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_script(tx_input_in, bytes_out)
tx_input_get_script = _wallycore.tx_input_get_script

def tx_input_get_script_len(tx_input_in):
    return _wallycore.tx_input_get_script_len(tx_input_in)
tx_input_get_script_len = _wallycore.tx_input_get_script_len

def tx_input_get_witness(tx_input_in, index, bytes_out):
    return _wallycore.tx_input_get_witness(tx_input_in, index, bytes_out)
tx_input_get_witness = _wallycore.tx_input_get_witness

def tx_input_get_witness_len(tx_input_in, index):
    return _wallycore.tx_input_get_witness_len(tx_input_in, index)
tx_input_get_witness_len = _wallycore.tx_input_get_witness_len

def tx_input_get_index(tx_input_in):
    return _wallycore.tx_input_get_index(tx_input_in)
tx_input_get_index = _wallycore.tx_input_get_index

def tx_input_get_sequence(tx_input_in):
    return _wallycore.tx_input_get_sequence(tx_input_in)
tx_input_get_sequence = _wallycore.tx_input_get_sequence

def tx_input_set_txhash(tx_input, txhash, len):
    return _wallycore.tx_input_set_txhash(tx_input, txhash, len)
tx_input_set_txhash = _wallycore.tx_input_set_txhash

def tx_input_set_script(tx_input, script):
    return _wallycore.tx_input_set_script(tx_input, script)
tx_input_set_script = _wallycore.tx_input_set_script

def tx_input_set_witness(tx_input, witness):
    return _wallycore.tx_input_set_witness(tx_input, witness)
tx_input_set_witness = _wallycore.tx_input_set_witness

def tx_input_set_index(tx_input, index):
    return _wallycore.tx_input_set_index(tx_input, index)
tx_input_set_index = _wallycore.tx_input_set_index

def tx_input_set_sequence(tx_input, sequence):
    return _wallycore.tx_input_set_sequence(tx_input, sequence)
tx_input_set_sequence = _wallycore.tx_input_set_sequence

def tx_input_get_blinding_nonce(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_blinding_nonce(tx_input_in, bytes_out)
tx_input_get_blinding_nonce = _wallycore.tx_input_get_blinding_nonce

def tx_input_get_entropy(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_entropy(tx_input_in, bytes_out)
tx_input_get_entropy = _wallycore.tx_input_get_entropy

def tx_input_get_issuance_amount(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_issuance_amount(tx_input_in, bytes_out)
tx_input_get_issuance_amount = _wallycore.tx_input_get_issuance_amount

def tx_input_get_issuance_amount_len(tx_input_in):
    return _wallycore.tx_input_get_issuance_amount_len(tx_input_in)
tx_input_get_issuance_amount_len = _wallycore.tx_input_get_issuance_amount_len

def tx_input_get_inflation_keys(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_inflation_keys(tx_input_in, bytes_out)
tx_input_get_inflation_keys = _wallycore.tx_input_get_inflation_keys

def tx_input_get_inflation_keys_len(tx_input_in):
    return _wallycore.tx_input_get_inflation_keys_len(tx_input_in)
tx_input_get_inflation_keys_len = _wallycore.tx_input_get_inflation_keys_len

def tx_input_get_issuance_amount_rangeproof(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_issuance_amount_rangeproof(tx_input_in, bytes_out)
tx_input_get_issuance_amount_rangeproof = _wallycore.tx_input_get_issuance_amount_rangeproof

def tx_input_get_issuance_amount_rangeproof_len(tx_input_in):
    return _wallycore.tx_input_get_issuance_amount_rangeproof_len(tx_input_in)
tx_input_get_issuance_amount_rangeproof_len = _wallycore.tx_input_get_issuance_amount_rangeproof_len

def tx_input_get_inflation_keys_rangeproof(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_inflation_keys_rangeproof(tx_input_in, bytes_out)
tx_input_get_inflation_keys_rangeproof = _wallycore.tx_input_get_inflation_keys_rangeproof

def tx_input_get_inflation_keys_rangeproof_len(tx_input_in):
    return _wallycore.tx_input_get_inflation_keys_rangeproof_len(tx_input_in)
tx_input_get_inflation_keys_rangeproof_len = _wallycore.tx_input_get_inflation_keys_rangeproof_len

def tx_input_set_blinding_nonce(tx_input_in, blinding_nonce, blinding_nonce_len):
    return _wallycore.tx_input_set_blinding_nonce(tx_input_in, blinding_nonce, blinding_nonce_len)
tx_input_set_blinding_nonce = _wallycore.tx_input_set_blinding_nonce

def tx_input_set_entropy(tx_input_in, entropy):
    return _wallycore.tx_input_set_entropy(tx_input_in, entropy)
tx_input_set_entropy = _wallycore.tx_input_set_entropy

def tx_input_set_inflation_keys(tx_input_in, inflation_keys):
    return _wallycore.tx_input_set_inflation_keys(tx_input_in, inflation_keys)
tx_input_set_inflation_keys = _wallycore.tx_input_set_inflation_keys

def tx_input_set_inflation_keys_rangeproof(tx_input_in, inflation_keys_rangeproof):
    return _wallycore.tx_input_set_inflation_keys_rangeproof(tx_input_in, inflation_keys_rangeproof)
tx_input_set_inflation_keys_rangeproof = _wallycore.tx_input_set_inflation_keys_rangeproof

def tx_input_set_issuance_amount(tx_input_in, issuance_amount):
    return _wallycore.tx_input_set_issuance_amount(tx_input_in, issuance_amount)
tx_input_set_issuance_amount = _wallycore.tx_input_set_issuance_amount

def tx_input_set_issuance_amount_rangeproof(tx_input_in, issuance_amount_rangeproof):
    return _wallycore.tx_input_set_issuance_amount_rangeproof(tx_input_in, issuance_amount_rangeproof)
tx_input_set_issuance_amount_rangeproof = _wallycore.tx_input_set_issuance_amount_rangeproof

def tx_output_get_script(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_script(tx_output_in, bytes_out)
tx_output_get_script = _wallycore.tx_output_get_script

def tx_output_get_script_len(tx_output_in):
    return _wallycore.tx_output_get_script_len(tx_output_in)
tx_output_get_script_len = _wallycore.tx_output_get_script_len

def tx_output_get_satoshi(tx_output_in):
    return _wallycore.tx_output_get_satoshi(tx_output_in)
tx_output_get_satoshi = _wallycore.tx_output_get_satoshi

def tx_output_set_script(tx_output_in, script):
    return _wallycore.tx_output_set_script(tx_output_in, script)
tx_output_set_script = _wallycore.tx_output_set_script

def tx_output_set_satoshi(tx_output_in, satoshi):
    return _wallycore.tx_output_set_satoshi(tx_output_in, satoshi)
tx_output_set_satoshi = _wallycore.tx_output_set_satoshi

def tx_output_get_asset(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_asset(tx_output_in, bytes_out)
tx_output_get_asset = _wallycore.tx_output_get_asset

def tx_output_get_asset_len(tx_output_in):
    return _wallycore.tx_output_get_asset_len(tx_output_in)
tx_output_get_asset_len = _wallycore.tx_output_get_asset_len

def tx_output_get_value(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_value(tx_output_in, bytes_out)
tx_output_get_value = _wallycore.tx_output_get_value

def tx_output_get_value_len(tx_output_in):
    return _wallycore.tx_output_get_value_len(tx_output_in)
tx_output_get_value_len = _wallycore.tx_output_get_value_len

def tx_output_get_nonce(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_nonce(tx_output_in, bytes_out)
tx_output_get_nonce = _wallycore.tx_output_get_nonce

def tx_output_get_nonce_len(tx_output_in):
    return _wallycore.tx_output_get_nonce_len(tx_output_in)
tx_output_get_nonce_len = _wallycore.tx_output_get_nonce_len

def tx_output_get_surjectionproof(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_surjectionproof(tx_output_in, bytes_out)
tx_output_get_surjectionproof = _wallycore.tx_output_get_surjectionproof

def tx_output_get_surjectionproof_len(tx_output_in):
    return _wallycore.tx_output_get_surjectionproof_len(tx_output_in)
tx_output_get_surjectionproof_len = _wallycore.tx_output_get_surjectionproof_len

def tx_output_get_rangeproof(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_rangeproof(tx_output_in, bytes_out)
tx_output_get_rangeproof = _wallycore.tx_output_get_rangeproof

def tx_output_get_rangeproof_len(tx_output_in):
    return _wallycore.tx_output_get_rangeproof_len(tx_output_in)
tx_output_get_rangeproof_len = _wallycore.tx_output_get_rangeproof_len

def tx_output_set_asset(tx_output_in, asset):
    return _wallycore.tx_output_set_asset(tx_output_in, asset)
tx_output_set_asset = _wallycore.tx_output_set_asset

def tx_output_set_value(tx_output_in, value):
    return _wallycore.tx_output_set_value(tx_output_in, value)
tx_output_set_value = _wallycore.tx_output_set_value

def tx_output_set_nonce(tx_output_in, nonce):
    return _wallycore.tx_output_set_nonce(tx_output_in, nonce)
tx_output_set_nonce = _wallycore.tx_output_set_nonce

def tx_output_set_surjectionproof(tx_output_in, surjectionproof):
    return _wallycore.tx_output_set_surjectionproof(tx_output_in, surjectionproof)
tx_output_set_surjectionproof = _wallycore.tx_output_set_surjectionproof

def tx_output_set_rangeproof(tx_output_in, rangeproof):
    return _wallycore.tx_output_set_rangeproof(tx_output_in, rangeproof)
tx_output_set_rangeproof = _wallycore.tx_output_set_rangeproof

def tx_get_version(tx_in):
    return _wallycore.tx_get_version(tx_in)
tx_get_version = _wallycore.tx_get_version

def tx_get_locktime(tx_in):
    return _wallycore.tx_get_locktime(tx_in)
tx_get_locktime = _wallycore.tx_get_locktime

def tx_get_num_inputs(tx_in):
    return _wallycore.tx_get_num_inputs(tx_in)
tx_get_num_inputs = _wallycore.tx_get_num_inputs

def tx_get_num_outputs(tx_in):
    return _wallycore.tx_get_num_outputs(tx_in)
tx_get_num_outputs = _wallycore.tx_get_num_outputs

def tx_get_input_txhash(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_txhash(tx_in, index, bytes_out)
tx_get_input_txhash = _wallycore.tx_get_input_txhash

def tx_get_input_script(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_script(tx_in, index, bytes_out)
tx_get_input_script = _wallycore.tx_get_input_script

def tx_get_input_script_len(tx_in, index):
    return _wallycore.tx_get_input_script_len(tx_in, index)
tx_get_input_script_len = _wallycore.tx_get_input_script_len

def tx_get_input_witness(tx_in, index, wit_index, bytes_out):
    return _wallycore.tx_get_input_witness(tx_in, index, wit_index, bytes_out)
tx_get_input_witness = _wallycore.tx_get_input_witness

def tx_get_input_witness_len(tx_in, index, wit_index):
    return _wallycore.tx_get_input_witness_len(tx_in, index, wit_index)
tx_get_input_witness_len = _wallycore.tx_get_input_witness_len

def tx_get_input_index(tx_in, index):
    return _wallycore.tx_get_input_index(tx_in, index)
tx_get_input_index = _wallycore.tx_get_input_index

def tx_get_input_sequence(tx_in, index):
    return _wallycore.tx_get_input_sequence(tx_in, index)
tx_get_input_sequence = _wallycore.tx_get_input_sequence

def tx_set_input_index(tx_in, index, index_in):
    return _wallycore.tx_set_input_index(tx_in, index, index_in)
tx_set_input_index = _wallycore.tx_set_input_index

def tx_set_input_sequence(tx_in, index, sequence):
    return _wallycore.tx_set_input_sequence(tx_in, index, sequence)
tx_set_input_sequence = _wallycore.tx_set_input_sequence

def tx_set_input_txhash(tx_in, index, txhash, len):
    return _wallycore.tx_set_input_txhash(tx_in, index, txhash, len)
tx_set_input_txhash = _wallycore.tx_set_input_txhash

def tx_get_input_blinding_nonce(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_blinding_nonce(tx_in, index, bytes_out)
tx_get_input_blinding_nonce = _wallycore.tx_get_input_blinding_nonce

def tx_get_input_entropy(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_entropy(tx_in, index, bytes_out)
tx_get_input_entropy = _wallycore.tx_get_input_entropy

def tx_get_input_issuance_amount(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_issuance_amount(tx_in, index, bytes_out)
tx_get_input_issuance_amount = _wallycore.tx_get_input_issuance_amount

def tx_get_input_issuance_amount_len(tx_in, index):
    return _wallycore.tx_get_input_issuance_amount_len(tx_in, index)
tx_get_input_issuance_amount_len = _wallycore.tx_get_input_issuance_amount_len

def tx_get_input_inflation_keys(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_inflation_keys(tx_in, index, bytes_out)
tx_get_input_inflation_keys = _wallycore.tx_get_input_inflation_keys

def tx_get_input_inflation_keys_len(tx_in, index):
    return _wallycore.tx_get_input_inflation_keys_len(tx_in, index)
tx_get_input_inflation_keys_len = _wallycore.tx_get_input_inflation_keys_len

def tx_get_input_issuance_amount_rangeproof(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_issuance_amount_rangeproof(tx_in, index, bytes_out)
tx_get_input_issuance_amount_rangeproof = _wallycore.tx_get_input_issuance_amount_rangeproof

def tx_get_input_issuance_amount_rangeproof_len(tx_in, index):
    return _wallycore.tx_get_input_issuance_amount_rangeproof_len(tx_in, index)
tx_get_input_issuance_amount_rangeproof_len = _wallycore.tx_get_input_issuance_amount_rangeproof_len

def tx_get_input_inflation_keys_rangeproof(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_inflation_keys_rangeproof(tx_in, index, bytes_out)
tx_get_input_inflation_keys_rangeproof = _wallycore.tx_get_input_inflation_keys_rangeproof

def tx_get_input_inflation_keys_rangeproof_len(tx_in, index):
    return _wallycore.tx_get_input_inflation_keys_rangeproof_len(tx_in, index)
tx_get_input_inflation_keys_rangeproof_len = _wallycore.tx_get_input_inflation_keys_rangeproof_len

def tx_set_input_blinding_nonce(tx_in, index, blinding_nonce, blinding_nonce_len):
    return _wallycore.tx_set_input_blinding_nonce(tx_in, index, blinding_nonce, blinding_nonce_len)
tx_set_input_blinding_nonce = _wallycore.tx_set_input_blinding_nonce

def tx_set_input_entropy(tx_in, index, entropy):
    return _wallycore.tx_set_input_entropy(tx_in, index, entropy)
tx_set_input_entropy = _wallycore.tx_set_input_entropy

def tx_set_input_inflation_keys(tx_in, index, inflation_keys):
    return _wallycore.tx_set_input_inflation_keys(tx_in, index, inflation_keys)
tx_set_input_inflation_keys = _wallycore.tx_set_input_inflation_keys

def tx_set_input_inflation_keys_rangeproof(tx_in, index, inflation_keys_rangeproof):
    return _wallycore.tx_set_input_inflation_keys_rangeproof(tx_in, index, inflation_keys_rangeproof)
tx_set_input_inflation_keys_rangeproof = _wallycore.tx_set_input_inflation_keys_rangeproof

def tx_set_input_issuance_amount(tx_in, index, issuance_amount):
    return _wallycore.tx_set_input_issuance_amount(tx_in, index, issuance_amount)
tx_set_input_issuance_amount = _wallycore.tx_set_input_issuance_amount

def tx_set_input_issuance_amount_rangeproof(tx_in, index, issuance_amount_rangeproof):
    return _wallycore.tx_set_input_issuance_amount_rangeproof(tx_in, index, issuance_amount_rangeproof)
tx_set_input_issuance_amount_rangeproof = _wallycore.tx_set_input_issuance_amount_rangeproof

def tx_get_output_script(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_script(tx_in, index, bytes_out)
tx_get_output_script = _wallycore.tx_get_output_script

def tx_get_output_script_len(tx_in, index):
    return _wallycore.tx_get_output_script_len(tx_in, index)
tx_get_output_script_len = _wallycore.tx_get_output_script_len

def tx_get_output_satoshi(tx_in, index):
    return _wallycore.tx_get_output_satoshi(tx_in, index)
tx_get_output_satoshi = _wallycore.tx_get_output_satoshi

def tx_set_output_script(tx_in, index, script):
    return _wallycore.tx_set_output_script(tx_in, index, script)
tx_set_output_script = _wallycore.tx_set_output_script

def tx_set_output_satoshi(tx_in, index, satoshi):
    return _wallycore.tx_set_output_satoshi(tx_in, index, satoshi)
tx_set_output_satoshi = _wallycore.tx_set_output_satoshi

def tx_get_output_asset(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_asset(tx_in, index, bytes_out)
tx_get_output_asset = _wallycore.tx_get_output_asset

def tx_get_output_value(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_value(tx_in, index, bytes_out)
tx_get_output_value = _wallycore.tx_get_output_value

def tx_get_output_value_len(tx_in, index):
    return _wallycore.tx_get_output_value_len(tx_in, index)
tx_get_output_value_len = _wallycore.tx_get_output_value_len

def tx_get_output_nonce(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_nonce(tx_in, index, bytes_out)
tx_get_output_nonce = _wallycore.tx_get_output_nonce

def tx_get_output_surjectionproof(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_surjectionproof(tx_in, index, bytes_out)
tx_get_output_surjectionproof = _wallycore.tx_get_output_surjectionproof

def tx_get_output_surjectionproof_len(tx_in, index):
    return _wallycore.tx_get_output_surjectionproof_len(tx_in, index)
tx_get_output_surjectionproof_len = _wallycore.tx_get_output_surjectionproof_len

def tx_get_output_rangeproof(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_rangeproof(tx_in, index, bytes_out)
tx_get_output_rangeproof = _wallycore.tx_get_output_rangeproof

def tx_get_output_rangeproof_len(tx_in, index):
    return _wallycore.tx_get_output_rangeproof_len(tx_in, index)
tx_get_output_rangeproof_len = _wallycore.tx_get_output_rangeproof_len

def tx_set_output_asset(tx_in, index, asset):
    return _wallycore.tx_set_output_asset(tx_in, index, asset)
tx_set_output_asset = _wallycore.tx_set_output_asset

def tx_set_output_value(tx_in, index, value):
    return _wallycore.tx_set_output_value(tx_in, index, value)
tx_set_output_value = _wallycore.tx_set_output_value

def tx_set_output_nonce(tx_in, index, nonce):
    return _wallycore.tx_set_output_nonce(tx_in, index, nonce)
tx_set_output_nonce = _wallycore.tx_set_output_nonce

def tx_set_output_surjectionproof(tx_in, index, surjectionproof):
    return _wallycore.tx_set_output_surjectionproof(tx_in, index, surjectionproof)
tx_set_output_surjectionproof = _wallycore.tx_set_output_surjectionproof

def tx_set_output_rangeproof(tx_in, index, rangeproof):
    return _wallycore.tx_set_output_rangeproof(tx_in, index, rangeproof)
tx_set_output_rangeproof = _wallycore.tx_set_output_rangeproof

_wallycore.ASSET_TAG_LEN_swigconstant(_wallycore)
ASSET_TAG_LEN = _wallycore.ASSET_TAG_LEN

_wallycore.BLINDING_FACTOR_LEN_swigconstant(_wallycore)
BLINDING_FACTOR_LEN = _wallycore.BLINDING_FACTOR_LEN

_wallycore.ASSET_GENERATOR_LEN_swigconstant(_wallycore)
ASSET_GENERATOR_LEN = _wallycore.ASSET_GENERATOR_LEN

_wallycore.ASSET_COMMITMENT_LEN_swigconstant(_wallycore)
ASSET_COMMITMENT_LEN = _wallycore.ASSET_COMMITMENT_LEN

_wallycore.ASSET_RANGEPROOF_MAX_LEN_swigconstant(_wallycore)
ASSET_RANGEPROOF_MAX_LEN = _wallycore.ASSET_RANGEPROOF_MAX_LEN

def asset_generator_from_bytes(asset, abf, bytes_out):
    return _wallycore.asset_generator_from_bytes(asset, abf, bytes_out)
asset_generator_from_bytes = _wallycore.asset_generator_from_bytes

def asset_final_vbf(values, num_inputs, abf, vbf, bytes_out):
    return _wallycore.asset_final_vbf(values, num_inputs, abf, vbf, bytes_out)
asset_final_vbf = _wallycore.asset_final_vbf

def asset_value_commitment(value, vbf, generator, bytes_out):
    return _wallycore.asset_value_commitment(value, vbf, generator, bytes_out)
asset_value_commitment = _wallycore.asset_value_commitment

def asset_rangeproof_with_nonce(value, nonce_hash, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out):
    return _wallycore.asset_rangeproof_with_nonce(value, nonce_hash, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out)
asset_rangeproof_with_nonce = _wallycore.asset_rangeproof_with_nonce

def asset_rangeproof(value, pub_key, priv_key, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out):
    return _wallycore.asset_rangeproof(value, pub_key, priv_key, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out)
asset_rangeproof = _wallycore.asset_rangeproof

def asset_surjectionproof_size(num_inputs):
    return _wallycore.asset_surjectionproof_size(num_inputs)
asset_surjectionproof_size = _wallycore.asset_surjectionproof_size

def asset_surjectionproof(output_asset, output_abf, output_generator, bytes, asset, abf, generator, bytes_out):
    return _wallycore.asset_surjectionproof(output_asset, output_abf, output_generator, bytes, asset, abf, generator, bytes_out)
asset_surjectionproof = _wallycore.asset_surjectionproof

def asset_unblind_with_nonce(nonce_hash, proof, commitment, extra, generator, asset_out, abf_out, vbf_out):
    return _wallycore.asset_unblind_with_nonce(nonce_hash, proof, commitment, extra, generator, asset_out, abf_out, vbf_out)
asset_unblind_with_nonce = _wallycore.asset_unblind_with_nonce

def asset_unblind(pub_key, priv_key, proof, commitment, extra, generator, asset_out, abf_out, vbf_out):
    return _wallycore.asset_unblind(pub_key, priv_key, proof, commitment, extra, generator, asset_out, abf_out, vbf_out)
asset_unblind = _wallycore.asset_unblind

def asset_blinding_key_from_seed(bytes, bytes_out):
    return _wallycore.asset_blinding_key_from_seed(bytes, bytes_out)
asset_blinding_key_from_seed = _wallycore.asset_blinding_key_from_seed

def asset_blinding_key_to_ec_private_key(bytes, script, bytes_out):
    return _wallycore.asset_blinding_key_to_ec_private_key(bytes, script, bytes_out)
asset_blinding_key_to_ec_private_key = _wallycore.asset_blinding_key_to_ec_private_key

def asset_pak_whitelistproof_size(num_keys):
    return _wallycore.asset_pak_whitelistproof_size(num_keys)
asset_pak_whitelistproof_size = _wallycore.asset_pak_whitelistproof_size

def asset_pak_whitelistproof(online_keys, offline_keys, key_index, sub_pubkey, online_priv_key, summed_key, bytes_out):
    return _wallycore.asset_pak_whitelistproof(online_keys, offline_keys, key_index, sub_pubkey, online_priv_key, summed_key, bytes_out)
asset_pak_whitelistproof = _wallycore.asset_pak_whitelistproof
# This file is compatible with both classic and new-style classes.


# Support functions for the SWIG python wrapper
from sys import version as _wally_py_version

def _wrap_bin(fn, length, resize=False):
    """ Wrap functions that take an output buffer to create/return it """
    def wrapped(*args):
        n = length(*args) if callable(length) else length
        buf = bytearray(n)
        ret = fn(*list(args)+[buf])
        if resize:
            # Truncate buf to bytes written if needed. Also assert the
            # wrapper allocated enough space for the returned value to fit.
            assert ret <= n
            return buf[0:ret] if ret != n else buf
        return (ret, buf) if ret is not None else buf
    return wrapped

def _wrap_with_defaults(fn, min_args, max_args):
    """ Wrap functions that take argument defaults """
    def wrapped(*args):
        args = list(args)
        n = len(args)
        assert n >= min_args
        r = max_args - n
        return fn(*args+[None]*r)
    return wrapped

_unwrapped_hex_to_bytes = hex_to_bytes
if int(_wally_py_version[0]) >= 3:
    def hex_to_bytes(hex_str):
        buf = bytearray(len(hex_str) // 2)
        _unwrapped_hex_to_bytes(hex_str, buf)
        return buf
else:
    def hex_to_bytes(hex_str):
        hex_str = hex_str.encode('ascii')
        buf = bytearray(len(hex_str) // 2)
        _unwrapped_hex_to_bytes(bytes(hex_str), buf)
        return buf

sha256 = _wrap_bin(sha256, SHA256_LEN)
sha256_midstate = _wrap_bin(sha256_midstate, SHA256_LEN)
sha256d = _wrap_bin(sha256d, SHA256_LEN)
sha512 = _wrap_bin(sha512, SHA512_LEN)
hash160 = _wrap_bin(hash160, HASH160_LEN)
hmac_sha256 = _wrap_bin(hmac_sha256, HMAC_SHA256_LEN)
hmac_sha512 = _wrap_bin(hmac_sha512, HMAC_SHA512_LEN)

bip32_key_serialize = _wrap_bin(bip32_key_serialize, BIP32_SERIALIZED_LEN)
bip32_key_get_chain_code = _wrap_bin(bip32_key_get_chain_code, 32)
bip32_key_get_priv_key = _wrap_bin(bip32_key_get_priv_key, 32)
bip32_key_get_pub_key = _wrap_bin(bip32_key_get_pub_key, 33)
bip32_key_get_parent160 = _wrap_bin(bip32_key_get_parent160, HASH160_LEN)
bip32_key_get_hash160 = _wrap_bin(bip32_key_get_hash160, HASH160_LEN)

bip38_raw_from_private_key = _wrap_bin(bip38_raw_from_private_key, BIP38_SERIALIZED_LEN)
bip38_raw_to_private_key = _wrap_bin(bip38_raw_to_private_key, 32);
bip38_to_private_key = _wrap_bin(bip38_raw_to_private_key, 32);
bip39_mnemonic_to_seed512 = _wrap_bin(bip39_mnemonic_to_seed, BIP39_SEED_LEN_512)

pbkdf2_hmac_sha256 = _wrap_bin(pbkdf2_hmac_sha256, PBKDF2_HMAC_SHA256_LEN)
pbkdf2_hmac_sha512 = _wrap_bin(pbkdf2_hmac_sha512, PBKDF2_HMAC_SHA512_LEN)

ec_public_key_decompress = _wrap_bin(ec_public_key_decompress, EC_PUBLIC_KEY_UNCOMPRESSED_LEN)
ec_public_key_negate = _wrap_bin(ec_public_key_negate, EC_PUBLIC_KEY_LEN)
ec_public_key_from_private_key = _wrap_bin(ec_public_key_from_private_key, EC_PUBLIC_KEY_LEN)
def _sig_len(priv_key, bytes, flags):
    return EC_SIGNATURE_RECOVERABLE_LEN if EC_FLAG_RECOVERABLE & flags else EC_SIGNATURE_LEN
ec_sig_from_bytes = _wrap_bin(ec_sig_from_bytes, _sig_len)
ec_sig_from_der = _wrap_bin(ec_sig_from_der, EC_SIGNATURE_LEN)
ec_sig_normalize = _wrap_bin(ec_sig_normalize, EC_SIGNATURE_LEN)
ec_sig_to_der = _wrap_bin(ec_sig_to_der, EC_SIGNATURE_DER_MAX_LEN, resize=True)
ec_sig_to_public_key = _wrap_bin(ec_sig_to_public_key, EC_PUBLIC_KEY_LEN)
ecdh = _wrap_bin(ecdh, SHA256_LEN)

def base58check_from_bytes(buf):
    return base58_from_bytes(buf, BASE58_FLAG_CHECKSUM)

def _base58_len_fn(base58, flags):
    return len(base58) + (4 if (flags & BASE58_FLAG_CHECKSUM) else 0)
base58_to_bytes = _wrap_bin(base58_to_bytes, _base58_len_fn, resize=True)

def base58check_to_bytes(base58):
    return base58_to_bytes(base58, BASE58_FLAG_CHECKSUM)

base64_to_bytes = _wrap_bin(base64_to_bytes, base64_get_maximum_length, resize=True)

def _format_bitcoin_message_len_fn(msg, flags):
    if flags & BITCOIN_MESSAGE_FLAG_HASH:
        return SHA256_LEN
    msg_len = len(msg)
    return 25 + msg_len + (1 if msg_len < 253 else 3)
format_bitcoin_message = _wrap_bin(format_bitcoin_message, _format_bitcoin_message_len_fn, resize=True)

def _script_push_from_bytes_len_fn(data, flags):
    if flags & WALLY_SCRIPT_HASH160:
        return HASH160_LEN + 1
    elif flags & WALLY_SCRIPT_SHA256:
        return SHA256_LEN + 1
    push_len, opcode_len = len(data), 5
    for l, op_len in [(76, 1), (256, 2), (65536, 3)]:
        if push_len < l:
            opcode_len = op_len
            break
    return push_len + opcode_len
script_push_from_bytes = _wrap_bin(script_push_from_bytes, _script_push_from_bytes_len_fn, resize=True)
def _spkcsv2of2_1_opt_len_fn(pubkeys, csv_blocks, flags):
    # TODO: If we expose scriptint functions we can calc the real length here
    # instead of hardcoding 4 (largest push for the max csv_blocks of 0xffff)
    return 6 + 2 * (EC_PUBLIC_KEY_LEN + 1) + 4
scriptpubkey_csv_2of2_then_1_from_bytes_opt = _wrap_bin(scriptpubkey_csv_2of2_then_1_from_bytes_opt, _spkcsv2of2_1_opt_len_fn, resize=True)
def _spkcsv2of2_1_len_fn(pubkeys, csv_blocks, flags):
    # TODO: See _spkcsv2of2_1_opt_len_fn above
    return 9 + 2 * (EC_PUBLIC_KEY_LEN + 1) + 4
scriptpubkey_csv_2of2_then_1_from_bytes = _wrap_bin(scriptpubkey_csv_2of2_then_1_from_bytes, _spkcsv2of2_1_len_fn, resize=True)
def _spkcsv2of3_2_len_fn(pubkeys, csv_blocks, flags):
    # TODO: See TODO in _spkcsv2of2_1_len_fn
    return 13 + 3 * (EC_PUBLIC_KEY_LEN + 1) + 4
scriptpubkey_csv_2of3_then_2_from_bytes = _wrap_bin(scriptpubkey_csv_2of3_then_2_from_bytes, _spkcsv2of3_2_len_fn, resize=True)
scriptpubkey_op_return_from_bytes = _wrap_bin(scriptpubkey_op_return_from_bytes, WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN, resize=True)
scriptpubkey_p2pkh_from_bytes = _wrap_bin(scriptpubkey_p2pkh_from_bytes, WALLY_SCRIPTPUBKEY_P2PKH_LEN, resize=True)
scriptpubkey_p2sh_from_bytes = _wrap_bin(scriptpubkey_p2sh_from_bytes, WALLY_SCRIPTPUBKEY_P2SH_LEN, resize=True)
def _spkmfb_len_fn(pubkeys, threshold, flags):
    return 3 + (len(pubkeys) // EC_PUBLIC_KEY_LEN) * (EC_PUBLIC_KEY_LEN + 1)
scriptpubkey_multisig_from_bytes = _wrap_bin(scriptpubkey_multisig_from_bytes, _spkmfb_len_fn, resize=True)
def _ssmfb_len_fn(script, sigs, sighashes, flags):
    der_len = (len(sigs) // EC_SIGNATURE_LEN) * (EC_SIGNATURE_DER_MAX_LEN + 2)
    script_len = _script_push_from_bytes_len_fn(script, 0)
    return 1 + der_len + script_len
scriptsig_multisig_from_bytes = _wrap_bin(scriptsig_multisig_from_bytes, _ssmfb_len_fn, resize=True)

scriptsig_p2pkh_from_sig = _wrap_bin(scriptsig_p2pkh_from_sig, WALLY_SCRIPTSIG_P2PKH_MAX_LEN, resize=True)
scriptsig_p2pkh_from_der = _wrap_bin(scriptsig_p2pkh_from_der, WALLY_SCRIPTSIG_P2PKH_MAX_LEN, resize=True)

witness_program_from_bytes = _wrap_bin(witness_program_from_bytes, WALLY_WITNESSSCRIPT_MAX_LEN, resize=True)

addr_segwit_to_bytes = _wrap_bin(addr_segwit_to_bytes, 32 + 2, resize=True)
address_to_scriptpubkey = _wrap_bin(address_to_scriptpubkey, 21 + 4, resize=True)

tx_to_bytes = _wrap_bin(tx_to_bytes, tx_get_length, resize=True)
tx_get_btc_signature_hash = _wrap_bin(tx_get_btc_signature_hash, SHA256_LEN)
tx_get_txid = _wrap_bin(tx_get_txid, WALLY_TXHASH_LEN)
tx_get_signature_hash = _wrap_bin(tx_get_signature_hash, SHA256_LEN)
tx_input_get_txhash = _wrap_bin(tx_input_get_txhash, WALLY_TXHASH_LEN)
tx_input_get_script = _wrap_bin(tx_input_get_script, tx_input_get_script_len, resize=True)
def _tx_input_get_witness_len_fn(tx_input_in, index):
    return tx_input_get_witness_len(tx_input_in, index)
tx_input_get_witness = _wrap_bin(tx_input_get_witness, _tx_input_get_witness_len_fn, resize=True)
tx_output_get_script = _wrap_bin(tx_output_get_script, tx_output_get_script_len, resize=True)

tx_get_input_txhash = _wrap_bin(tx_get_input_txhash, WALLY_TXHASH_LEN)
tx_get_input_script = _wrap_bin(tx_get_input_script, tx_get_input_script_len, resize=True)
tx_get_input_witness = _wrap_bin(tx_get_input_witness, tx_get_input_witness_len, resize=True)
tx_get_output_script = _wrap_bin(tx_get_output_script, tx_get_output_script_len, resize=True)

def tx_witness_stack_create(witnesses):
    """ Helper to create a witness stack from a list of witness programs """
    witness_stack = tx_witness_stack_init(len(witnesses))
    for witness_script in witnesses:
        tx_witness_stack_add(witness_stack, witness_script)
    return witness_stack

wif_to_bytes = _wrap_bin(wif_to_bytes, EC_PRIVATE_KEY_LEN)
def _wif_to_public_key_len(wif, prefix):
    return EC_PUBLIC_KEY_UNCOMPRESSED_LEN if wif_is_uncompressed(wif) else EC_PUBLIC_KEY_LEN
wif_to_public_key = _wrap_bin(wif_to_public_key, _wif_to_public_key_len, resize=True)

symmetric_key_from_seed = _wrap_bin(symmetric_key_from_seed, HMAC_SHA512_LEN)
symmetric_key_from_parent = _wrap_bin(symmetric_key_from_parent, HMAC_SHA512_LEN)

psbt_get_input_redeem_script = _wrap_bin(psbt_get_input_redeem_script, psbt_get_input_redeem_script_len, resize=True)
psbt_get_input_witness_script = _wrap_bin(psbt_get_input_witness_script, psbt_get_input_witness_script_len, resize=True)
psbt_get_input_final_scriptsig = _wrap_bin(psbt_get_input_final_scriptsig, psbt_get_input_final_scriptsig_len, resize=True)
psbt_get_input_keypath = _wrap_bin(psbt_get_input_keypath, psbt_get_input_keypath_len, resize=True)
psbt_get_input_signature = _wrap_bin(psbt_get_input_signature, psbt_get_input_signature_len, resize=True)
psbt_get_input_unknown = _wrap_bin(psbt_get_input_unknown, psbt_get_input_unknown_len, resize=True)

psbt_get_output_keypath = _wrap_bin(psbt_get_output_keypath, psbt_get_output_keypath_len, resize=True)
psbt_get_output_redeem_script = _wrap_bin(psbt_get_output_redeem_script, psbt_get_output_redeem_script_len, resize=True)
psbt_get_output_witness_script = _wrap_bin(psbt_get_output_witness_script, psbt_get_output_witness_script_len, resize=True)
psbt_get_output_unknown = _wrap_bin(psbt_get_output_unknown, psbt_get_output_unknown_len, resize=True)

psbt_to_bytes = _wrap_bin(psbt_to_bytes, psbt_get_length, resize=True)

def _s2c_sig_from_bytes_fn(fn):
    def wrapped(*args):
        buffers = [bytearray(WALLY_S2C_OPENING_LEN), bytearray(EC_SIGNATURE_LEN)]
        ret = fn(*list(args) + buffers)
        if ret is None:
            return buffers[0], buffers[1]
        return ret, buffers[0], buffers[1]
    return wrapped
s2c_sig_from_bytes = _s2c_sig_from_bytes_fn(s2c_sig_from_bytes)

ae_host_commit_from_bytes = _wrap_bin(ae_host_commit_from_bytes, WALLY_HOST_COMMITMENT_LEN)
ae_signer_commit_from_bytes = _wrap_bin(ae_signer_commit_from_bytes, WALLY_S2C_OPENING_LEN)
ae_sig_from_bytes = _wrap_bin(ae_sig_from_bytes, EC_SIGNATURE_LEN)

if is_elements_build():
    asset_generator_from_bytes = _wrap_bin(asset_generator_from_bytes, ASSET_GENERATOR_LEN)
    asset_final_vbf = _wrap_bin(asset_final_vbf, ASSET_TAG_LEN)
    asset_value_commitment = _wrap_bin(asset_value_commitment, ASSET_COMMITMENT_LEN)
    asset_rangeproof_with_nonce = _wrap_bin(asset_rangeproof_with_nonce, ASSET_RANGEPROOF_MAX_LEN, resize=True)
    asset_rangeproof = _wrap_bin(asset_rangeproof, ASSET_RANGEPROOF_MAX_LEN, resize=True)
    def _asset_surjectionproof_len_fn(aid, ag, gen, r, in_aid, in_abf, in_ags):
        return asset_surjectionproof_size(len(in_aid) // ASSET_TAG_LEN)
    asset_surjectionproof = _wrap_bin(asset_surjectionproof, _asset_surjectionproof_len_fn, resize=True)
    asset_blinding_key_from_seed = _wrap_bin(asset_blinding_key_from_seed, HMAC_SHA512_LEN)
    asset_blinding_key_to_ec_private_key = _wrap_bin(asset_blinding_key_to_ec_private_key, EC_PRIVATE_KEY_LEN)
    def _asset_pak_whitelistproof_len_fn(on_keys, off_keys, idx, sub_pubkey, priv_key, summed_key):
        return asset_pak_whitelistproof_size(len(off_keys) // EC_PUBLIC_KEY_LEN)
    asset_pak_whitelistproof = _wrap_bin(asset_pak_whitelistproof, _asset_pak_whitelistproof_len_fn)

    def _asset_unblind_fn(fn):
        def wrapped(*args):
            buffers = [bytearray(ASSET_TAG_LEN) for _ in range(3)]
            ret = fn(*list(args) + buffers)
            return ret, buffers[0], buffers[1], buffers[2]
        return wrapped
    asset_unblind_with_nonce = _asset_unblind_fn(asset_unblind_with_nonce)
    asset_unblind = _asset_unblind_fn(asset_unblind)

    tx_elements_input_init = _wrap_with_defaults(tx_elements_input_init, 4, 12)
    tx_input_get_blinding_nonce = _wrap_bin(tx_input_get_blinding_nonce, SHA256_LEN)
    tx_input_get_entropy = _wrap_bin(tx_input_get_entropy, SHA256_LEN)
    tx_input_get_issuance_amount = _wrap_bin(tx_input_get_issuance_amount, tx_input_get_issuance_amount_len, resize=True)
    tx_input_get_inflation_keys = _wrap_bin(tx_input_get_inflation_keys, tx_input_get_inflation_keys_len, resize=True)
    tx_input_get_issuance_amount_rangeproof = _wrap_bin(tx_input_get_issuance_amount_rangeproof, tx_input_get_issuance_amount_rangeproof_len, resize=True)
    tx_input_get_inflation_keys_rangeproof = _wrap_bin(tx_input_get_inflation_keys_rangeproof, tx_input_get_inflation_keys_rangeproof_len, resize=True)

    tx_elements_output_init = _wrap_with_defaults(tx_elements_output_init, 3, 6)
    tx_output_get_asset = _wrap_bin(tx_output_get_asset, WALLY_TX_ASSET_CT_ASSET_LEN)
    # The returned value may be unblinded (of length WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN)
    tx_output_get_value = _wrap_bin(tx_output_get_value, WALLY_TX_ASSET_CT_ASSET_LEN, resize=True)
    tx_output_get_nonce = _wrap_bin(tx_output_get_nonce, WALLY_TX_ASSET_CT_ASSET_LEN)
    tx_output_get_surjectionproof = _wrap_bin(tx_output_get_surjectionproof, tx_output_get_surjectionproof_len, resize=True)
    tx_output_get_rangeproof = _wrap_bin(tx_output_get_rangeproof, tx_output_get_rangeproof_len, resize=True)

    tx_confidential_value_from_satoshi = _wrap_bin(tx_confidential_value_from_satoshi, WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN)
    tx_elements_issuance_generate_entropy = _wrap_bin(tx_elements_issuance_generate_entropy, SHA256_LEN)
    tx_elements_issuance_calculate_asset = _wrap_bin(tx_elements_issuance_calculate_asset, SHA256_LEN)
    tx_elements_issuance_calculate_reissuance_token = _wrap_bin(tx_elements_issuance_calculate_reissuance_token, SHA256_LEN)
    tx_get_elements_signature_hash = _wrap_bin(tx_get_elements_signature_hash, SHA256_LEN)

    tx_get_input_blinding_nonce = _wrap_bin(tx_get_input_blinding_nonce, SHA256_LEN)
    tx_get_input_entropy = _wrap_bin(tx_get_input_entropy, SHA256_LEN)
    tx_get_input_issuance_amount = _wrap_bin(tx_get_input_issuance_amount, tx_get_input_issuance_amount_len, resize=True)
    tx_get_input_inflation_keys = _wrap_bin(tx_get_input_inflation_keys, tx_get_input_inflation_keys_len, resize=True)
    tx_get_input_issuance_amount_rangeproof = _wrap_bin(tx_get_input_issuance_amount_rangeproof, tx_get_input_issuance_amount_rangeproof_len, resize=True)
    tx_get_input_inflation_keys_rangeproof = _wrap_bin(tx_get_input_inflation_keys_rangeproof, tx_get_input_inflation_keys_rangeproof_len, resize=True)

    tx_get_output_asset = _wrap_bin(tx_get_output_asset, WALLY_TX_ASSET_CT_ASSET_LEN)
    # The returned value may be unblinded (of length WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN)
    tx_get_output_value = _wrap_bin(tx_get_output_value, WALLY_TX_ASSET_CT_VALUE_LEN, resize=True)
    tx_get_output_nonce = _wrap_bin(tx_get_output_nonce, WALLY_TX_ASSET_CT_NONCE_LEN)
    tx_get_output_surjectionproof = _wrap_bin(tx_get_output_surjectionproof, tx_get_output_surjectionproof_len, resize=True)
    tx_get_output_rangeproof = _wrap_bin(tx_get_output_rangeproof, tx_get_output_rangeproof_len, resize=True)

    confidential_addr_to_ec_public_key = _wrap_bin(confidential_addr_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    confidential_addr_segwit_to_ec_public_key = _wrap_bin(confidential_addr_segwit_to_ec_public_key, EC_PUBLIC_KEY_LEN)

    bip32_key_get_pub_key_tweak_sum = _wrap_bin(bip32_key_get_pub_key_tweak_sum, 32)

    def _epsfb_len_fn(bh, mcs, pk, whl, flag):
        return elements_pegout_script_size(len(bh), len(mcs), len(pk), len(whl))
    elements_pegout_script_from_bytes = _wrap_bin(elements_pegout_script_from_bytes, _epsfb_len_fn, resize=True)

    def _epcsfb_len_fn(rs, cs, flag):
        return len(rs)
    elements_pegin_contract_script_from_bytes = _wrap_bin(elements_pegin_contract_script_from_bytes, _epcsfb_len_fn, resize=True)

    psbt_get_input_vbf = _wrap_bin(psbt_get_input_vbf, psbt_get_input_vbf_len, resize=True)
    psbt_get_input_asset = _wrap_bin(psbt_get_input_asset, psbt_get_input_asset_len, resize=True)
    psbt_get_input_abf = _wrap_bin(psbt_get_input_abf, psbt_get_input_abf_len, resize=True)
    psbt_get_input_txoutproof = _wrap_bin(psbt_get_input_txoutproof, psbt_get_input_txoutproof_len, resize=True)
    psbt_get_input_genesis_blockhash = _wrap_bin(psbt_get_input_genesis_blockhash, psbt_get_input_genesis_blockhash_len, resize=True)
    psbt_get_input_claim_script = _wrap_bin(psbt_get_input_claim_script, psbt_get_input_claim_script_len, resize=True)

    psbt_get_output_blinding_pubkey = _wrap_bin(psbt_get_output_blinding_pubkey, psbt_get_output_blinding_pubkey_len, resize=True)
    psbt_get_output_value_commitment = _wrap_bin(psbt_get_output_value_commitment, psbt_get_output_value_commitment_len, resize=True)
    psbt_get_output_vbf = _wrap_bin(psbt_get_output_vbf, psbt_get_output_vbf_len, resize=True)
    psbt_get_output_asset_commitment = _wrap_bin(psbt_get_output_asset_commitment, psbt_get_output_asset_commitment_len, resize=True)
    psbt_get_output_abf = _wrap_bin(psbt_get_output_abf, psbt_get_output_abf_len, resize=True)
    psbt_get_output_nonce = _wrap_bin(psbt_get_output_nonce, psbt_get_output_nonce_len, resize=True)
    psbt_get_output_rangeproof = _wrap_bin(psbt_get_output_rangeproof, psbt_get_output_rangeproof_len, resize=True)
    psbt_get_output_surjectionproof = _wrap_bin(psbt_get_output_surjectionproof, psbt_get_output_surjectionproof_len, resize=True)

WALLY_SATOSHI_MAX = WALLY_BTC_MAX * WALLY_SATOSHI_PER_BTC
