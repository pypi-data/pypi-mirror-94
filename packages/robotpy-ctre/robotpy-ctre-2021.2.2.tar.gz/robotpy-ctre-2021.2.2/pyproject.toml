[build-system]
requires = [
    "robotpy-build>=2020.6.1,<2021.0.0",
    "wpilib>=2021.2.2.0,<2022.0.0",
]

[tool.robotpy-build]
    base_package = "ctre"

[tool.robotpy-build.static_libs.ctre_api.maven_lib_download]
    artifact_id = "api-cpp"
    group_id = "com.ctre.phoenix"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_Phoenix"]

[tool.robotpy-build.static_libs.ctre_canutils.maven_lib_download]
    artifact_id = "canutils"
    group_id = "com.ctre.phoenix"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_PhoenixCanutils"]

[tool.robotpy-build.static_libs.ctre_canutils.override.arch_athena]
    ignore = true

[tool.robotpy-build.static_libs.ctre_cci.maven_lib_download]
    artifact_id = "cci"
    group_id = "com.ctre.phoenix"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_PhoenixCCI"]

[tool.robotpy-build.static_libs.ctre_cci.maven_lib_download.override.arch_x86-64]
    artifact_id = "cci-sim"
    group_id = "com.ctre.phoenix.sim"
    libs = ["CTRE_PhoenixCCISim"]

[tool.robotpy-build.static_libs.ctre_core.maven_lib_download]
    artifact_id = "core"
    group_id = "com.ctre.phoenix"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_PhoenixCore"]

[tool.robotpy-build.static_libs.ctre_diagnostics.maven_lib_download]
    artifact_id = "diagnostics"
    group_id = "com.ctre.phoenix"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_PhoenixDiagnostics"]

[tool.robotpy-build.static_libs.ctre_platform.maven_lib_download]
    artifact_id = "platform-socketcan"
    group_id = "com.ctre.phoenix"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_PhoenixPlatform_socketcan"]

[tool.robotpy-build.static_libs.ctre_platform.maven_lib_download.override.arch_x86-64]
    artifact_id = "platform-sim"
    libs = ["CTRE_PhoenixPlatform_sim"]

[tool.robotpy-build.static_libs.ctre_platform.override.arch_athena]
    ignore = true

[tool.robotpy-build.static_libs.ctre_wpiapi.maven_lib_download]
    artifact_id = "wpiapi-cpp"
    group_id = "com.ctre.phoenix"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_Phoenix_WPI"]

[tool.robotpy-build.wrappers."ctre._simtalonsrx"]
name = "ctre_simtalonsrx"
ignore = true

[tool.robotpy-build.wrappers."ctre._simtalonsrx".override.arch_x86-64]
ignore = false

[tool.robotpy-build.wrappers."ctre._simtalonsrx".maven_lib_download]
    artifact_id = "simTalonSRX"
    group_id = "com.ctre.phoenix.sim"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_SimTalonSRX"]

[tool.robotpy-build.wrappers."ctre._simvictorspx"]
name = "ctre_simvictorspx"
ignore = true

[tool.robotpy-build.wrappers."ctre._simvictorspx".override.arch_x86-64]
ignore = false

[tool.robotpy-build.wrappers."ctre._simvictorspx".maven_lib_download]
    artifact_id = "simVictorSPX"
    group_id = "com.ctre.phoenix.sim"
    repo_url = "https://devsite.ctr-electronics.com/maven/release"
    version = "5.19.4"
    libs = ["CTRE_SimVictorSPX"]

[tool.robotpy-build.wrappers."ctre"]
    name = "ctre"
    depends = [
        "ctre_core",
        "ctre_platform",
        "ctre_canutils",
        "ctre_diagnostics",
        "ctre_cci",
        "ctre_api",
        "ctre_wpiapi",
        "wpilib_core",
        "wpilibc",
        "wpiHal",
        "wpiutil",
    ]
    
    sources = [
        "ctre/ctre.cpp"
    ]

generation_data = "gen"


generate = [
    # # ctre
    # { Phoenix = "ctre/Phoenix.h" },

    # # ctre/phoenix
    { ErrorCode = "ctre/phoenix/ErrorCode.h" },

    # # ctre/phoenix
    { paramEnum = "ctre/phoenix/paramEnum.h" },

    # # ctre/phoenix/cci
    # { CCI = "ctre/phoenix/cci/CCI.h" },

    # # ctre/phoenix/core
    # { GadgeteerUartClient = "ctre/phoenix/core/GadgeteerUartClient.h" },

    # # CanUtils
    # { BusMgr = "BusMgr.h" },
    # { ManualEvent = "ManualEvent.h" },
    # { RxStream = "RxStream.h" },
    # { TxJob = "TxJob.h" },

    # ctre/phoenix/unmanaged
    { Unmanaged = "ctre/phoenix/unmanaged/Unmanaged.h" },

    # # ctre/phoenix/runtime
    # { LibLoader = "ctre/phoenix/runtime/LibLoader.h" },

    # # ctre/phoenix/string_util
    # { string_util = "ctre/phoenix/string_util/string_util.h" },

    # # ctre/phoenix/platform
    # { Platform-pack = "ctre/phoenix/platform/Platform-pack.h" },
    # { Platform = "ctre/phoenix/platform/Platform.h" },

    # # ctre/phoenix/platform
    # { PlatformSim = "ctre/phoenix/platform/PlatformSim.h" },

    # # ctre/phoenix/platform/can
    # { PlatformCAN = "ctre/phoenix/platform/can/PlatformCAN.h" },

    # # ctre/phoenix/motion
    { BufferedTrajectoryPointStream = "ctre/phoenix/motion/BufferedTrajectoryPointStream.h" },

    # ctre/phoenix/motion
    { MotionProfileStatus = "ctre/phoenix/motion/MotionProfileStatus.h" },
    { SetValueMotionProfile = "ctre/phoenix/motion/SetValueMotionProfile.h" },
    { TrajectoryPoint = "ctre/phoenix/motion/TrajectoryPoint.h" },

    # ctre/phoenix/signals
    # { IInvertable = "ctre/phoenix/signals/IInvertable.h" },
    # { IOutputSignal = "ctre/phoenix/signals/IOutputSignal.h" },
    # { MovingAverage = "ctre/phoenix/signals/MovingAverage.h" },

    # # ctre/phoenix/tasking
    # { ILoopable = "ctre/phoenix/tasking/ILoopable.h" },
    # { IProcessable = "ctre/phoenix/tasking/IProcessable.h" },

    # # ctre/phoenix
    { CANifierControlFrame = "ctre/phoenix/CANifierControlFrame.h" },
    { CANifierFaults = "ctre/phoenix/CANifierFaults.h" },
    { CANifierStatusFrame = "ctre/phoenix/CANifierStatusFrame.h" },
    { CANifierStickyFaults = "ctre/phoenix/CANifierStickyFaults.h" },
    { CANifierVelocityMeasPeriod = "ctre/phoenix/CANifierVelocityMeasPeriod.h" },
    # { autocache = "ctre/phoenix/autocache.h" },

    # # ctre/phoenix
    { CANBusAddressable = "ctre/phoenix/CANBusAddressable.h" },
    { CANifier = "ctre/phoenix/CANifier.h" },
    # { CTRLogger = "ctre/phoenix/CTRLogger.h" },
    { CustomParamConfiguration = "ctre/phoenix/CustomParamConfiguration.h" },
    # { HsvToRgb = "ctre/phoenix/HsvToRgb.h" },
    # { LinearInterpolation = "ctre/phoenix/LinearInterpolation.h" },
    # { RCRadio3Ch = "ctre/phoenix/RCRadio3Ch.h" },
    # { Stopwatch = "ctre/phoenix/Stopwatch.h" },
    # { Utilities = "ctre/phoenix/Utilities.h" },

    # ctre/phoenix/motorcontrol
    { ControlFrame = "ctre/phoenix/motorcontrol/ControlFrame.h" },
    { ControlMode = "ctre/phoenix/motorcontrol/ControlMode.h" },
    { DemandType = "ctre/phoenix/motorcontrol/DemandType.h" },
    { Faults = "ctre/phoenix/motorcontrol/Faults.h" },
    { FeedbackDevice = "ctre/phoenix/motorcontrol/FeedbackDevice.h" },
    { FollowerType = "ctre/phoenix/motorcontrol/FollowerType.h" },
    { InvertType = "ctre/phoenix/motorcontrol/InvertType.h" },
    { LimitSwitchType = "ctre/phoenix/motorcontrol/LimitSwitchType.h" },
    { MotorCommutation = "ctre/phoenix/motorcontrol/MotorCommutation.h" },
    { NeutralMode = "ctre/phoenix/motorcontrol/NeutralMode.h" },
    { RemoteSensorSource = "ctre/phoenix/motorcontrol/RemoteSensorSource.h" },
    { SensorTerm = "ctre/phoenix/motorcontrol/SensorTerm.h" },
    { StatorCurrentLimitConfiguration = "ctre/phoenix/motorcontrol/StatorCurrentLimitConfiguration.h" },
    { StatusFrame = "ctre/phoenix/motorcontrol/StatusFrame.h" },
    { StickyFaults = "ctre/phoenix/motorcontrol/StickyFaults.h" },
    { SupplyCurrentLimitConfiguration = "ctre/phoenix/motorcontrol/SupplyCurrentLimitConfiguration.h" },
    { VelocityMeasPeriod = "ctre/phoenix/motorcontrol/VelocityMeasPeriod.h" },

    # ctre/phoenix/music
    { Orchestra = "ctre/phoenix/music/Orchestra.h" },

    # # ctre/phoenix/sensors
    { AbsoluteSensorRange = "ctre/phoenix/sensors/AbsoluteSensorRange.h" },
    { CANCoderFaults = "ctre/phoenix/sensors/CANCoderFaults.h" },
    { CANCoderStatusFrame = "ctre/phoenix/sensors/CANCoderStatusFrame.h" },
    { CANCoderStickyFaults = "ctre/phoenix/sensors/CANCoderStickyFaults.h" },
    { MagnetFieldStrength = "ctre/phoenix/sensors/MagnetFieldStrength.h" },
    { PigeonIMU_ControlFrame = "ctre/phoenix/sensors/PigeonIMU_ControlFrame.h" },
    { PigeonIMU_Faults = "ctre/phoenix/sensors/PigeonIMU_Faults.h" },
    { PigeonIMU_StatusFrame = "ctre/phoenix/sensors/PigeonIMU_StatusFrame.h" },
    { PigeonIMU_StickyFaults = "ctre/phoenix/sensors/PigeonIMU_StickyFaults.h" },
    { SensorInitializationStrategy = "ctre/phoenix/sensors/SensorInitializationStrategy.h" },
    { SensorTimeBase = "ctre/phoenix/sensors/SensorTimeBase.h" },
    { SensorVelocityMeasPeriod = "ctre/phoenix/sensors/SensorVelocityMeasPeriod.h" },


    # # ctre/phoenix/motorcontrol
    # { WPI_MotorSafetyImplem = "ctre/phoenix/motorcontrol/WPI_MotorSafetyImplem.h" },


    # # ctre/phoenix/motorcontrol
    # { DeviceCatalog = "ctre/phoenix/motorcontrol/DeviceCatalog.h" },
    # { GroupMotorControllers = "ctre/phoenix/motorcontrol/GroupMotorControllers.h" },
    { IFollower = "ctre/phoenix/motorcontrol/IFollower.h" },
    { IMotorController = "ctre/phoenix/motorcontrol/IMotorController.h" },
    { IMotorControllerEnhanced = "ctre/phoenix/motorcontrol/IMotorControllerEnhanced.h" },
    { SensorCollection = "ctre/phoenix/motorcontrol/SensorCollection.h" },
    { TalonFXSensorCollection = "ctre/phoenix/motorcontrol/TalonFXSensorCollection.h" },
    { TalonSRXSimCollection = "ctre/phoenix/motorcontrol/TalonSRXSimCollection.h" },
    { VictorSPXSimCollection = "ctre/phoenix/motorcontrol/VictorSPXSimCollection.h" },


    # # # ctre/phoenix/motorcontrol/can
    { BaseMotorController = "ctre/phoenix/motorcontrol/can/BaseMotorController.h" },
    { BaseTalon = "ctre/phoenix/motorcontrol/can/BaseTalon.h" },
    { TalonFX = "ctre/phoenix/motorcontrol/can/TalonFX.h" },
    { TalonSRX = "ctre/phoenix/motorcontrol/can/TalonSRX.h" },
    { VictorSPX = "ctre/phoenix/motorcontrol/can/VictorSPX.h" },

    # ctre/phoenix/motorcontrol/can
    { WPI_BaseMotorController = "ctre/phoenix/motorcontrol/can/WPI_BaseMotorController.h" },
    { WPI_TalonFX = "ctre/phoenix/motorcontrol/can/WPI_TalonFX.h" },
    { WPI_TalonSRX = "ctre/phoenix/motorcontrol/can/WPI_TalonSRX.h" },
    { WPI_VictorSPX = "ctre/phoenix/motorcontrol/can/WPI_VictorSPX.h" },


    # ctre/phoenix/sensors
    { CANCoder = "ctre/phoenix/sensors/CANCoder.h" },
    { PigeonIMU = "ctre/phoenix/sensors/PigeonIMU.h" },

    # # ctre/phoenix/tasking
    # { ButtonMonitor = "ctre/phoenix/tasking/ButtonMonitor.h" },

    # # ctre/phoenix/tasking/Schedulers
    # { ConcurrentScheduler = "ctre/phoenix/tasking/Schedulers/ConcurrentScheduler.h" },
    # { SequentialScheduler = "ctre/phoenix/tasking/Schedulers/SequentialScheduler.h" },
]

[tool.robotpy-build.wrappers."ctre".override.arch_x86-64]
    depends = [
        "ctre_simtalonsrx",
        "ctre_simvictorspx",
        "ctre_core",
        "ctre_platform",
        "ctre_canutils",
        "ctre_diagnostics",
        "ctre_cci",
        "ctre_api",
        "ctre_wpiapi",
        "wpilib_core",
        "wpilibc",
        "wpiHal",
        "wpiutil",
    ]

[tool.robotpy-build.wrappers."ctre".override.arch_athena]
    depends = [
        "ctre_core",
        "ctre_diagnostics",
        "ctre_cci",
        "ctre_api",
        "ctre_wpiapi",
        "wpilib_core",
        "wpilibc",
        "wpiHal",
        "wpiutil",
    ]


[tool.robotpy-build.metadata]
name = "robotpy-ctre"
description = "Binary wrappers for the CTRE Phoenix library"
author = "RobotPy Development Team"
author_email = "robotpy@googlegroups.com"
url = "https://github.com/robotpy/robotpy-ctre"
license = "MIT"
install_requires = [
    "wpilib>=2021.2.2.0,<2022.0.0",
]
