<?xml version="1.0" encoding="iso-8859-1" standalone="no" ?>
<!--<!DOCTYPE modList SYSTEM "../dashdocobj.dtd" >-->

<modList id="python" date="12 June, 2017" title="Xpress Python examples">

  <p>Examples of using Xpress from Python</p>

  <modDir id="python_optimizer" title="Python examples using the Xpress Optimizer" name=".">

    <model id="Arrays_python" title="Using NumPy arrays to create variables" target="python_optimizer" version="nowb">
      <modFile>example_array.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Using NumPy arrays</modFeatures>
      <modDescr>Use NumPy arrays for creating a 3-dimensional array of variables, then use it to create a model.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="BBTree_python" title="Visualize the BB tree" target="python_optimizer" version="nowb">
      <modFile>example_bbtree.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Using the newnode callback</modFeatures>
      <modDescr>Shows how to visualize the BB tree of a problem after (partially) solving it. </modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Infeasible_python" title="Irreducible Infeasible Sets" target="python_optimizer" version="nowb">
      <modFile>example_infeasible.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Using Irreducible Infeasible Sets</modFeatures>
      <modDescr>Shows how to analyze an infeasible problem by retrieving an irreducible infeasible subset</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="LoadLP_python" title="Loading a problem" target="python_optimizer" version="nowb">
      <modFile>example_loadlp.py</modFile>
      <modFile>example_loadqp.py</modFile>
      <modFile>example_loadqcqp.py</modFile>
      <modFile>example_loadmiqcqp.py</modFile>
      <modFile>example_loadmiqcqp_sos.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Loading a problem directly</modFeatures>
      <modDescr>Shows how directly load a problem and solve it in Python</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="userfunc_python" title="Modeling with user functions" target="python_nonlinear" version="nowb">
      <modFile>example_userfunc.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Modeling with user functions</modFeatures>
      <modDescr>Shows how to create and solve a nonlinear problem whose constraints and objective functions are defined as user functions</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Modelling_python" title="Using Python model objects to build a problem" target="python_optimizer" version="nowb">
      <modFile>example_modeling.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Modelling using Python objects</modFeatures>
      <modDescr>Demonstrate how variables, or arrays thereof, and constraints, or arrays of constraints, can be added into a problem. Prints the solution and all attributes/controls of the problem.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Modelling_python" title="Using Python model objects to build a problem" target="python_optimizer" version="nowb">
      <modFile>example_modeling2.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Modelling using Python objects</modFeatures>
      <modDescr>Using the compact xpress.problem() declaration to add variables, constraints and objective in one instruction.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="SmallChange_python" title="Changing the optimization problem" target="python_optimizer" version="nowb">
      <modFile>small_change.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Changes to a problem</modFeatures>
      <modDescr>Changing an optimization problem using the Xpress Python interface.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Modify_python" title="Extending a problem" target="python_optimizer" version="nowb">
      <modFile>example_modify.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Extending a problem</modFeatures>
      <modDescr>Construct a problem using addVariable and addConstraint, then use the Xpress API routines to amend the problem with rows and quadratic terms.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="NumPy2_python" title="Using NumPy and Xpress" target="python_optimizer" version="nowb">
      <modFile>example_numpy1.py</modFile>
      <modFile>example_numpy2.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Using NumPy and Xpress</modFeatures>
      <modDescr>An example of printing a matrix of random numbers and a problem formulation that uses the xpress.Dot() operator to formulate constraints simply.
      Note that the NumPy dot operator is not suitable here as the result is an expression in the Xpress variables. </modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="MaxFS_python" title="Finding an LP subsystem with as many constraints as possible" target="python_optimizer" version="nowb">
      <modFile>example_phase1.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Given an infeasible LP, find the feasible subsystem of constraints of maximum cardinality.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="QCQP_python" title="Solving a quadratically constrained problem" target="python_optimizer" version="nowb">
      <modFile>example_qcqp.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Building quadratic expressions</modFeatures>
      <modDescr>Solve a quadratically constrained problem</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="QCQP_nonconvex_python" title="Solving a nonconvex quadratic problem" target="python_optimizer" version="nowb">
      <modFile>example_quadnonconvex.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Building quadratic expressions</modFeatures>
      <modDescr>Solve a nonconvex quadratic problem</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="QP_python" title="Solving a quadratically problem" target="python_optimizer" version="nowb">
      <modFile>example_quadratic.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Building quadratic expressions</modFeatures>
      <modDescr>Solve a quadratic problem</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Resolve_python" title="Repeatedly solving a problem" target="python_optimizer" version="nowb">
      <modFile>example_resolve.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Solving a problem multiple times</modFeatures>
      <modDescr>Reads a problem, solves it, then adds a constraint and re-solves it</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Indicators_python" title="Using indicators" target="python_optimizer" version="nowb">
      <modFile>example_SOS_indicators.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Model with indicators</modFeatures>
      <modDescr>Construct a problem from scratch with variables of various types. Adds indicator constraints, Special Ordered Sets (SOSs), and
      shows how to retrieve such data once it has been added to the problem using the API functions</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="TSP_python" title="The travelling salesman problem" target="python_optimizer" version="nowb">
      <modFile>example_tsp.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Using Xpress callbacks</modFeatures>
      <modDescr>Retrieves an example fromn http://www.math.uwaterloo.ca/tsp/world/countries.html
      and creates a corresponding TSP instance, then solves it using the Xpress Optimizer
      library with the appropriate callback. Once the optimization is over
      (i.e. the time limit is reached or we find an optimal solution) the
      optimal tour is displayed using matplotlib. </modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="TSP_python_numpy" title="Solving a TSP using NumPy" target="python_optimizer" version="nowb">
      <modFile>example_tsp_numpy.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Using Xpress callbacks</modFeatures>
      <modDescr>A randomly generated TSP problem is modeled using
      NumPy vectors and matrices and solved using the Optimizer's
      libraries and callback functions.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="WriteRead_python" title="Writing and reading problem files" target="python_optimizer" version="nowb">
      <modFile>example_write_read.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Writing and reading a problem to disk</modFeatures>
      <modDescr>Create a few variables, then build a problem and save it to a file.
      Re-read that file into a new problem and solve it </modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="FeasPump_python" title="The feasiblity pump" target="python_optimizer" version="nowb">
      <modFile>feas_pump.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Writing and reading a problem to disk</modFeatures>
      <modDescr>Feasibility pump (prototype) using the Xpress Python interface.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Knapsack_python" title="Knapsack problem" target="python_optimizer" version="nowb">
      <modFile>knapsack.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>MIP problem with binary variables</modFeatures>
      <modDescr>Example of a knapsack problem formulated with the Xpress Python interface.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Queens_python" title="The n-queens problem" target="python_optimizer" version="nowb">
      <modFile>n_queens.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Puzzle modeling</modFeatures>
      <modDescr>The n queens: place n queens on an nxn chessboard so that none of them can be eaten in one move.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Netflow_python" title="Min-cost-flow problem " target="python_optimizer" version="nowb">
      <modFile>netflow.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Modelling a graph problem</modFeatures>
      <modDescr>solving a min-cost-flow problem using the Xpress Python interface.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="Sudoku_Python" title="Solving Sudoku" target="python_optimizer" version="nowb">
      <modFile>sudoku.py</modFile>
      <modType>Programming</modType>
      <modRating>4</modRating>
      <modFeatures>Puzzle modeling</modFeatures>
      <modDescr>Place numbers from 1 to 9 into a 9x9 grid such that no number repeats in any row, in any column, and in any 3x3 sub-grid.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="compare_matrices_python" title="Comparing Matrices" target="python_optimizer" version="nowb">
      <modFile>compare_matrices.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Compare two optimization problems</modFeatures>
      <modDescr>Load the coefficient matrices of two optimization problems saved in MPS or LP format using the Xpress Optimizer libraries and compare each line by line using SciPy's matrix routines.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="multicommodity_flow_python" title="Multicommodity flow problem" target="python_optimizer" version="nowb">
      <modFile>example_multicommodity_flow.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Solve a multicommodity flow minimum cost optimization problem on a randomly created graph</modFeatures>
      <modDescr>Create a random directed graph using NumPy's random functions and then model and solve a minimum-cost multicommodity flow problem constructed on that graph.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="polygon_python" title="Find largest-area inscribed polygon" target="python_optimizer" version="nowb">
      <modFile>polygon.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Given n, find the n-sided polygon of largest area inscribed in the unit circle.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>


    <model id="read_prob_python" title="Read problem data into matrix and vectors" target="python_optimizer" version="nowb">
      <modFile>example_getmatrix.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Obtain coefficient matrix, objective coefficients, and constraints' right-hand sides for a given problem.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>


    <model id="miqcqp_solver" title="Solve a nonconvex MIQCQP problem" target="python_optimizer" version="nowb">
      <modFile>miqcqp_solver.py</modFile>
      <modType>Programming</modType>
      <modRating>4</modRating>
      <modFeatures></modFeatures>
      <modDescr>Reformulate a MIQCQP into a MILP and add callbacks to enforce quadratic feasibility of the nonconvex constraints.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="benders_decomp" title="Solve a simple MIP using Benders decomposition" target="python_optimizer" version="nowb">
      <modFile>benders_decomp.py</modFile>
      <modType>Programming</modType>
      <modRating>4</modRating>
      <modFeatures></modFeatures>
      <modDescr>Solve a simple MIP using Benders decomposition. Courtesy of Georgios Patsakis (UC Berkeley, Amazon) and Richard L.-Y. Chen (Amazon).</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="piecewise_linear" title="Create a problem with piecewise linear functions" target="python_optimizer" version="nowb">
      <modFile>piecewise_linear.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Create a simple problem using the modelling construct <tt>xpress.pwl</tt> for creating piecewise linear functions.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="piecewise_linear2" title="Use the API to create a model with piecewise linear functions" target="python_optimizer" version="nowb">
      <modFile>piecewise_linear2.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Create a simple problem using the API function <tt>problem.addpwlcons</tt> to create piecewise linear functions. The resulting model is equivalent to <tt>piecewise_linear.py</tt>.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="general_constraint_abs" title="Create a problem with general constraints that use operator abs" target="python_optimizer" version="nowb">
      <modFile>general_constraints_abs.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Create a simple problem using the modelling methods <tt>abs</tt> for creating general constraints.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="general_constraint_abs_api" title="Create a problem with general constraints with the operator abs by using the API" target="python_optimizer" version="nowb">
      <modFile>general_constraints_abs_api.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Create a simple problem using the API function <tt>problem.addgencons</tt> for creating general constraints.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="general_constraint_max" title="Create a problem with general constraints that use operator max" target="python_optimizer" version="nowb">
      <modFile>general_constraints_max.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Create a simple problem using the modelling methods <tt>max</tt> for creating general constraints.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="general_constraint_max_api" title="Create a problem with general constraints with operator max by using the API" target="python_optimizer" version="nowb">
      <modFile>general_constraints_max_api.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Create a simple problem using the API function <tt>problem.addgencons</tt> for creating <tt>max</tt> general constraints.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="general_constraint_logic" title="Create a problem with logical constraints" target="python_optimizer" version="nowb">
      <modFile>general_constraints_logic.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Create a simple problem using the modelling methods <tt>max</tt> for creating general constraints.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="general_constraint_logic_api" title="Create a problem with general constraints with logic operators by using the API" target="python_optimizer" version="nowb">
      <modFile>general_constraints_logic_api.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Create a simple problem using the API function <tt>problem.addgencons</tt> for creating logical (AND and OR) general constraints.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="cuttingstock" title="Create an iterative algorithm cutting stock problem" target="python_optimizer" version="nowb">
      <modFile>cuttingstock.py</modFile>
      <modType>Programming</modType>
      <modRating>3</modRating>
      <modFeatures></modFeatures>
      <modDescr>Use the modeling features to create an iterative solver for a cutting stock problem.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="maxsumlogistic" title="Maximize the sum of logistic curves subject to linear and piecewise linear constraints" target="python_optimizer" version="nowb">
      <modFile>maxSumLogistic.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Approximate the logistic curves using piecewise linear functions.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="pwltransp" title="Transportation problem with piecewise-linear costs" target="python_optimizer" version="nowb">
      <modFile>pwl_transp.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures></modFeatures>
      <modDescr>Model a transportation problem where the cost are modeled using the <tt>xpress.problem.addpwlcons</tt> function.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="sat" title="Modeling Satisfiability (SAT) problems with MIP" target="python_optimizer" version="nowb">
      <modFile>example_gencons_sat.py</modFile>
      <modType>Programming</modType>
      <modRating>4</modRating>
      <modFeatures></modFeatures>
      <modDescr>A rudimentary SAT solver that translates a Satisfiability (SAT) problem into a MIP and solves it.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

    <model id="pbo" title="Modeling PseudoBoolean Optimization problems with MIP" target="python_optimizer" version="nowb">
      <modFile>example_gencons_pbo.py</modFile>
      <modType>Programming</modType>
      <modRating>4</modRating>
      <modFeatures></modFeatures>
      <modDescr>A solver of PseudoBoolean optimization problems (PBO) that translates a problem into a MIP and solves it.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

  </modDir>

  <modDir id="python_nonlinear" title="Python examples using Xpress Nonlinear" name=".">

    <model id="Rosenbrock_python" title="Solving a quadratically constrained problem" target="python_nonlinear" version="nowb">
      <modFile>rosenbrock.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Solve a nonlinear problem</modFeatures>
      <modDescr>Define the well-known Rosenbrock function and minimize it.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>


    <model id="polynomial_python" title="Solve a polynomial optimization problem" target="python_nonlinear" version="nowb">
      <modFile>polynomial_opt.py</modFile>
      <modType>Programming</modType>
      <modRating>2</modRating>
      <modFeatures>Modeling a polynomial optimization problem</modFeatures>
      <modDescr>Create a random polynomial of degree k using the Dot operator and find its minimum using the Nonlinear solver.</modDescr>
      <modFurtherinfo>'Xpress Python Reference Manual'</modFurtherinfo>
    </model>

  </modDir>

</modList>
