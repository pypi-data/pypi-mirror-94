# coding: utf-8

"""
    Aliro Quantum App

    This is an api for the Aliro Quantum App  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum.configuration import Configuration


class DeviceDetailsGateInfoAverages(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current': 'float',
        'fidelity_change_per_day': 'float'
    }

    attribute_map = {
        'current': 'current',
        'fidelity_change_per_day': 'fidelityChangePerDay'
    }

    def __init__(self, current=None, fidelity_change_per_day=None, local_vars_configuration=None):  # noqa: E501
        """DeviceDetailsGateInfoAverages - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._current = None
        self._fidelity_change_per_day = None
        self.discriminator = None

        if current is not None:
            self.current = current
        if fidelity_change_per_day is not None:
            self.fidelity_change_per_day = fidelity_change_per_day

    @property
    def current(self):
        """Gets the current of this DeviceDetailsGateInfoAverages.  # noqa: E501

        average fidelity  # noqa: E501

        :return: The current of this DeviceDetailsGateInfoAverages.  # noqa: E501
        :rtype: float
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this DeviceDetailsGateInfoAverages.

        average fidelity  # noqa: E501

        :param current: The current of this DeviceDetailsGateInfoAverages.  # noqa: E501
        :type: float
        """

        self._current = current

    @property
    def fidelity_change_per_day(self):
        """Gets the fidelity_change_per_day of this DeviceDetailsGateInfoAverages.  # noqa: E501

        average change per day in the past week  # noqa: E501

        :return: The fidelity_change_per_day of this DeviceDetailsGateInfoAverages.  # noqa: E501
        :rtype: float
        """
        return self._fidelity_change_per_day

    @fidelity_change_per_day.setter
    def fidelity_change_per_day(self, fidelity_change_per_day):
        """Sets the fidelity_change_per_day of this DeviceDetailsGateInfoAverages.

        average change per day in the past week  # noqa: E501

        :param fidelity_change_per_day: The fidelity_change_per_day of this DeviceDetailsGateInfoAverages.  # noqa: E501
        :type: float
        """

        self._fidelity_change_per_day = fidelity_change_per_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceDetailsGateInfoAverages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceDetailsGateInfoAverages):
            return True

        return self.to_dict() != other.to_dict()
