# coding: utf-8

"""
    Aliro Quantum App

    This is an api for the Aliro Quantum App  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum.configuration import Configuration


class SubmissionSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed_datetime': 'str',
        'jobs': 'SubmissionSummaryJobs',
        'name': 'str',
        'runtime': 'float',
        'submitted_datetime': 'str'
    }

    attribute_map = {
        'completed_datetime': 'completedDatetime',
        'jobs': 'jobs',
        'name': 'name',
        'runtime': 'runtime',
        'submitted_datetime': 'submittedDatetime'
    }

    def __init__(self, completed_datetime=None, jobs=None, name=None, runtime=None, submitted_datetime=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completed_datetime = None
        self._jobs = None
        self._name = None
        self._runtime = None
        self._submitted_datetime = None
        self.discriminator = None

        if completed_datetime is not None:
            self.completed_datetime = completed_datetime
        if jobs is not None:
            self.jobs = jobs
        if name is not None:
            self.name = name
        if runtime is not None:
            self.runtime = runtime
        if submitted_datetime is not None:
            self.submitted_datetime = submitted_datetime

    @property
    def completed_datetime(self):
        """Gets the completed_datetime of this SubmissionSummary.  # noqa: E501


        :return: The completed_datetime of this SubmissionSummary.  # noqa: E501
        :rtype: str
        """
        return self._completed_datetime

    @completed_datetime.setter
    def completed_datetime(self, completed_datetime):
        """Sets the completed_datetime of this SubmissionSummary.


        :param completed_datetime: The completed_datetime of this SubmissionSummary.  # noqa: E501
        :type: str
        """

        self._completed_datetime = completed_datetime

    @property
    def jobs(self):
        """Gets the jobs of this SubmissionSummary.  # noqa: E501


        :return: The jobs of this SubmissionSummary.  # noqa: E501
        :rtype: SubmissionSummaryJobs
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this SubmissionSummary.


        :param jobs: The jobs of this SubmissionSummary.  # noqa: E501
        :type: SubmissionSummaryJobs
        """

        self._jobs = jobs

    @property
    def name(self):
        """Gets the name of this SubmissionSummary.  # noqa: E501


        :return: The name of this SubmissionSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubmissionSummary.


        :param name: The name of this SubmissionSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def runtime(self):
        """Gets the runtime of this SubmissionSummary.  # noqa: E501

        duration of all pirates in milliseconds  # noqa: E501

        :return: The runtime of this SubmissionSummary.  # noqa: E501
        :rtype: float
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this SubmissionSummary.

        duration of all pirates in milliseconds  # noqa: E501

        :param runtime: The runtime of this SubmissionSummary.  # noqa: E501
        :type: float
        """

        self._runtime = runtime

    @property
    def submitted_datetime(self):
        """Gets the submitted_datetime of this SubmissionSummary.  # noqa: E501


        :return: The submitted_datetime of this SubmissionSummary.  # noqa: E501
        :rtype: str
        """
        return self._submitted_datetime

    @submitted_datetime.setter
    def submitted_datetime(self, submitted_datetime):
        """Sets the submitted_datetime of this SubmissionSummary.


        :param submitted_datetime: The submitted_datetime of this SubmissionSummary.  # noqa: E501
        :type: str
        """

        self._submitted_datetime = submitted_datetime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionSummary):
            return True

        return self.to_dict() != other.to_dict()
