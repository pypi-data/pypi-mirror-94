# coding: utf-8

"""
    Aliro Quantum App

    This is an api for the Aliro Quantum App  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum.configuration import Configuration


class CredentialsVendor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aqt': 'CredentialsAqt',
        'ibm': 'CredentialsIbm',
        'honeywell': 'CredentialsHoneywell',
        'rigetti': 'CredentialsRigetti'
    }

    attribute_map = {
        'aqt': 'aqt',
        'ibm': 'ibm',
        'honeywell': 'honeywell',
        'rigetti': 'rigetti'
    }

    def __init__(self, aqt=None, ibm=None, honeywell=None, rigetti=None, local_vars_configuration=None):  # noqa: E501
        """CredentialsVendor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aqt = None
        self._ibm = None
        self._honeywell = None
        self._rigetti = None
        self.discriminator = None

        if aqt is not None:
            self.aqt = aqt
        if ibm is not None:
            self.ibm = ibm
        if honeywell is not None:
            self.honeywell = honeywell
        if rigetti is not None:
            self.rigetti = rigetti

    @property
    def aqt(self):
        """Gets the aqt of this CredentialsVendor.  # noqa: E501


        :return: The aqt of this CredentialsVendor.  # noqa: E501
        :rtype: CredentialsAqt
        """
        return self._aqt

    @aqt.setter
    def aqt(self, aqt):
        """Sets the aqt of this CredentialsVendor.


        :param aqt: The aqt of this CredentialsVendor.  # noqa: E501
        :type: CredentialsAqt
        """

        self._aqt = aqt

    @property
    def ibm(self):
        """Gets the ibm of this CredentialsVendor.  # noqa: E501


        :return: The ibm of this CredentialsVendor.  # noqa: E501
        :rtype: CredentialsIbm
        """
        return self._ibm

    @ibm.setter
    def ibm(self, ibm):
        """Sets the ibm of this CredentialsVendor.


        :param ibm: The ibm of this CredentialsVendor.  # noqa: E501
        :type: CredentialsIbm
        """

        self._ibm = ibm

    @property
    def honeywell(self):
        """Gets the honeywell of this CredentialsVendor.  # noqa: E501


        :return: The honeywell of this CredentialsVendor.  # noqa: E501
        :rtype: CredentialsHoneywell
        """
        return self._honeywell

    @honeywell.setter
    def honeywell(self, honeywell):
        """Sets the honeywell of this CredentialsVendor.


        :param honeywell: The honeywell of this CredentialsVendor.  # noqa: E501
        :type: CredentialsHoneywell
        """

        self._honeywell = honeywell

    @property
    def rigetti(self):
        """Gets the rigetti of this CredentialsVendor.  # noqa: E501


        :return: The rigetti of this CredentialsVendor.  # noqa: E501
        :rtype: CredentialsRigetti
        """
        return self._rigetti

    @rigetti.setter
    def rigetti(self, rigetti):
        """Sets the rigetti of this CredentialsVendor.


        :param rigetti: The rigetti of this CredentialsVendor.  # noqa: E501
        :type: CredentialsRigetti
        """

        self._rigetti = rigetti

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialsVendor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CredentialsVendor):
            return True

        return self.to_dict() != other.to_dict()
