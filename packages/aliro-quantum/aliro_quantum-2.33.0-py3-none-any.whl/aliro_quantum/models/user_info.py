# coding: utf-8

"""
    Aliro Quantum App

    This is an api for the Aliro Quantum App  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum.configuration import Configuration


class UserInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'has_credentials': 'list[str]',
        'roles': 'list[str]',
        'token': 'str'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone': 'phone',
        'has_credentials': 'hasCredentials',
        'roles': 'roles',
        'token': 'token'
    }

    def __init__(self, email=None, first_name=None, last_name=None, phone=None, has_credentials=None, roles=None, token=None, local_vars_configuration=None):  # noqa: E501
        """UserInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._has_credentials = None
        self._roles = None
        self._token = None
        self.discriminator = None

        self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if has_credentials is not None:
            self.has_credentials = has_credentials
        if roles is not None:
            self.roles = roles
        self.token = token

    @property
    def email(self):
        """Gets the email of this UserInfo.  # noqa: E501


        :return: The email of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.


        :param email: The email of this UserInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserInfo.  # noqa: E501


        :return: The first_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserInfo.


        :param first_name: The first_name of this UserInfo.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserInfo.  # noqa: E501


        :return: The last_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserInfo.


        :param last_name: The last_name of this UserInfo.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this UserInfo.  # noqa: E501


        :return: The phone of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserInfo.


        :param phone: The phone of this UserInfo.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def has_credentials(self):
        """Gets the has_credentials of this UserInfo.  # noqa: E501

        List of owner names for which the user has credentials  # noqa: E501

        :return: The has_credentials of this UserInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_credentials

    @has_credentials.setter
    def has_credentials(self, has_credentials):
        """Sets the has_credentials of this UserInfo.

        List of owner names for which the user has credentials  # noqa: E501

        :param has_credentials: The has_credentials of this UserInfo.  # noqa: E501
        :type: list[str]
        """

        self._has_credentials = has_credentials

    @property
    def roles(self):
        """Gets the roles of this UserInfo.  # noqa: E501


        :return: The roles of this UserInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserInfo.


        :param roles: The roles of this UserInfo.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def token(self):
        """Gets the token of this UserInfo.  # noqa: E501


        :return: The token of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UserInfo.


        :param token: The token of this UserInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token is None:  # noqa: E501
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserInfo):
            return True

        return self.to_dict() != other.to_dict()
