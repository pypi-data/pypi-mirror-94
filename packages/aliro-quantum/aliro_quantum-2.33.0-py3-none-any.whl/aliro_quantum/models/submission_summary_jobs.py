# coding: utf-8

"""
    Aliro Quantum App

    This is an api for the Aliro Quantum App  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum.configuration import Configuration


class SubmissionSummaryJobs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cancelled': 'list[str]',
        'completed': 'list[str]',
        'error': 'list[str]',
        'initiated': 'list[str]',
        'in_progress': 'list[str]'
    }

    attribute_map = {
        'cancelled': 'cancelled',
        'completed': 'completed',
        'error': 'error',
        'initiated': 'initiated',
        'in_progress': 'inProgress'
    }

    def __init__(self, cancelled=None, completed=None, error=None, initiated=None, in_progress=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionSummaryJobs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cancelled = None
        self._completed = None
        self._error = None
        self._initiated = None
        self._in_progress = None
        self.discriminator = None

        if cancelled is not None:
            self.cancelled = cancelled
        if completed is not None:
            self.completed = completed
        if error is not None:
            self.error = error
        if initiated is not None:
            self.initiated = initiated
        if in_progress is not None:
            self.in_progress = in_progress

    @property
    def cancelled(self):
        """Gets the cancelled of this SubmissionSummaryJobs.  # noqa: E501


        :return: The cancelled of this SubmissionSummaryJobs.  # noqa: E501
        :rtype: list[str]
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this SubmissionSummaryJobs.


        :param cancelled: The cancelled of this SubmissionSummaryJobs.  # noqa: E501
        :type: list[str]
        """

        self._cancelled = cancelled

    @property
    def completed(self):
        """Gets the completed of this SubmissionSummaryJobs.  # noqa: E501


        :return: The completed of this SubmissionSummaryJobs.  # noqa: E501
        :rtype: list[str]
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this SubmissionSummaryJobs.


        :param completed: The completed of this SubmissionSummaryJobs.  # noqa: E501
        :type: list[str]
        """

        self._completed = completed

    @property
    def error(self):
        """Gets the error of this SubmissionSummaryJobs.  # noqa: E501


        :return: The error of this SubmissionSummaryJobs.  # noqa: E501
        :rtype: list[str]
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SubmissionSummaryJobs.


        :param error: The error of this SubmissionSummaryJobs.  # noqa: E501
        :type: list[str]
        """

        self._error = error

    @property
    def initiated(self):
        """Gets the initiated of this SubmissionSummaryJobs.  # noqa: E501


        :return: The initiated of this SubmissionSummaryJobs.  # noqa: E501
        :rtype: list[str]
        """
        return self._initiated

    @initiated.setter
    def initiated(self, initiated):
        """Sets the initiated of this SubmissionSummaryJobs.


        :param initiated: The initiated of this SubmissionSummaryJobs.  # noqa: E501
        :type: list[str]
        """

        self._initiated = initiated

    @property
    def in_progress(self):
        """Gets the in_progress of this SubmissionSummaryJobs.  # noqa: E501


        :return: The in_progress of this SubmissionSummaryJobs.  # noqa: E501
        :rtype: list[str]
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this SubmissionSummaryJobs.


        :param in_progress: The in_progress of this SubmissionSummaryJobs.  # noqa: E501
        :type: list[str]
        """

        self._in_progress = in_progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionSummaryJobs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionSummaryJobs):
            return True

        return self.to_dict() != other.to_dict()
