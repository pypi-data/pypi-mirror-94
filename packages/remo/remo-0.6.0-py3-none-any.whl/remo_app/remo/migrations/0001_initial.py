# Generated by Django 2.2.11 on 2020-03-06 00:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import remo_app.remo.models.dataset


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(-1, 'not_annotated'), (0, 'skipped'), (1, 'done')], default=-1)),
            ],
            options={
                'db_table': 'annotations',
            },
        ),
        migrations.CreateModel(
            name='AnnotationObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('coordinates', jsonfield.fields.JSONField(default=dict)),
                ('auto_created', models.BooleanField(default=False)),
                ('position_number', models.PositiveIntegerField()),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_objects', to='remo.Annotation')),
            ],
            options={
                'db_table': 'annotation_objects',
            },
        ),
        migrations.CreateModel(
            name='AnnotationSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('released_at', models.DateTimeField(blank=True, null=True)),
                ('last_annotated_date', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(choices=[('image', 'Image')], max_length=20)),
                ('strict_mode', models.CharField(choices=[('strict', 'strict'), ('soft', 'soft')], default='strict', max_length=10)),
            ],
            options={
                'db_table': 'annotation_sets',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'classes',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('is_archived', models.BooleanField(blank=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False)),
                ('size_in_bytes', models.BigIntegerField(default=0)),
                ('quantity', models.BigIntegerField(default=0)),
            ],
            options={
                'db_table': 'datasets',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('file_name', models.CharField(max_length=100, null=True)),
                ('client_ip', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'downloads',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.FileField(null=True, upload_to=remo_app.remo.models.dataset.get_original_file_path)),
                ('image', models.FileField(null=True, upload_to=remo_app.remo.models.dataset.get_image_file_path)),
                ('local_image', models.CharField(max_length=1000, null=True)),
                ('thumbnail', models.FileField(null=True, upload_to=remo_app.remo.models.dataset.get_thumbnail_file_path)),
                ('view', models.FileField(null=True, upload_to=remo_app.remo.models.dataset.get_view_file_path)),
                ('preview', models.FileField(null=True, upload_to=remo_app.remo.models.dataset.get_preview_file_path)),
                ('size', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=0)),
                ('height', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'images',
            },
        ),
        migrations.CreateModel(
            name='ImageFolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_folders', to='remo.Dataset')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='remo.ImageFolder')),
            ],
            options={
                'db_table': 'folders',
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'licenses',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_name', models.CharField(choices=[('rectangle', 'rectangle'), ('polygon', 'polygon')], default='rectangle', max_length=255, unique=True)),
            ],
            options={
                'db_table': 'tools',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Tracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gallery', jsonfield.fields.JSONField(null=True)),
            ],
            options={
                'db_table': 'tracker',
            },
        ),
        migrations.CreateModel(
            name='UserDetails',
            fields=[
                ('user', models.OneToOneField(on_delete=None, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('object_detection', 'Object detection'), ('instance_segmentation', 'Instance segmentation'), ('image_classification', 'Image classification')], default='Object detection', max_length=255, unique=True)),
                ('type', models.CharField(choices=[('object_detection', 'Object detection'), ('instance_segmentation', 'Instance segmentation'), ('image_classification', 'Image classification')], default='object_detection', max_length=255, unique=True)),
                ('available_tools', models.ManyToManyField(blank=True, to='remo.Tool')),
            ],
            options={
                'db_table': 'tasks',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('info', models.TextField()),
                ('status', models.CharField(choices=[('unknown', 'unknown'), ('queued', 'queued'), ('in_progress', 'in progress'), ('done', 'done'), ('failed', 'failed')], default='unknown', max_length=255)),
                ('job_type', models.CharField(choices=[('unknown', 'unknown'), ('upload_dataset', 'upload dataset')], default='unknown', max_length=255)),
                ('dataset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='remo.Dataset')),
            ],
            options={
                'db_table': 'jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ImageFolderStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statistics', jsonfield.fields.JSONField(null=True)),
                ('image_folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='remo.ImageFolder')),
            ],
            options={
                'db_table': 'folder_statistics',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('page_url', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('debug_info', models.TextField(blank=True, null=True)),
                ('screenshot', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'feedbacks',
            },
        ),
        migrations.CreateModel(
            name='DatasetStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statistics', jsonfield.fields.JSONField(null=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_statistics', to='remo.Dataset')),
            ],
            options={
                'db_table': 'dataset_statistics',
            },
        ),
        migrations.CreateModel(
            name='DatasetImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_in_dataset', models.IntegerField(default=0)),
                ('original_name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_images', to='remo.Dataset')),
                ('folder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='remo.ImageFolder')),
                ('image_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remo.Image')),
            ],
            options={
                'db_table': 'dataset_images',
                'ordering': ('number_in_dataset',),
            },
        ),
        migrations.AddField(
            model_name='dataset',
            name='images',
            field=models.ManyToManyField(related_name='datasets', through='remo.DatasetImage', to='remo.Image'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='remo.License'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='user',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dataset',
            name='users_shared',
            field=models.ManyToManyField(blank=True, related_name='users_shared', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AnnotationTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_tags', to='remo.Annotation')),
                ('annotation_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_tags', to='remo.AnnotationSet')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_tags', to='remo.DatasetImage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_tags', to='remo.Tag')),
            ],
            options={
                'db_table': 'annotation_tags',
                'unique_together': {('annotation', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='AnnotationSetStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', jsonfield.fields.JSONField(null=True)),
                ('classes', jsonfield.fields.JSONField(null=True)),
                ('top3_classes', jsonfield.fields.JSONField(null=True)),
                ('total_classes', models.IntegerField(default=0)),
                ('total_annotation_objects', models.IntegerField(default=0)),
                ('total_annotated_images', models.IntegerField(default=0)),
                ('skipped_images', models.IntegerField(default=0)),
                ('annotation_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='remo.AnnotationSet')),
                ('dataset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='remo.Dataset')),
            ],
            options={
                'db_table': 'annotation_set_statistics',
            },
        ),
        migrations.AddField(
            model_name='annotationset',
            name='classes',
            field=models.ManyToManyField(related_name='annotation_sets', to='remo.Class'),
        ),
        migrations.AddField(
            model_name='annotationset',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_sets', to='remo.Dataset'),
        ),
        migrations.AddField(
            model_name='annotationset',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='annotation_sets', to='remo.Task'),
        ),
        migrations.AddField(
            model_name='annotationset',
            name='user',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='annotation_sets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AnnotationObjectClassRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questionable', models.BooleanField(default=False)),
                ('annotation_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remo.Class')),
                ('annotation_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_object_class_rel', to='remo.AnnotationObject')),
            ],
            options={
                'db_table': 'annotation_object_classes',
            },
        ),
        migrations.AddField(
            model_name='annotationobject',
            name='classes',
            field=models.ManyToManyField(through='remo.AnnotationObjectClassRel', to='remo.Class'),
        ),
        migrations.CreateModel(
            name='AnnotationClassRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questionable', models.BooleanField(default=False)),
                ('score', models.FloatField(null=True)),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_class_rel', to='remo.Annotation')),
                ('annotation_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remo.Class')),
            ],
            options={
                'db_table': 'annotation_classes',
            },
        ),
        migrations.AddField(
            model_name='annotation',
            name='annotation_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='remo.AnnotationSet'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='classes',
            field=models.ManyToManyField(related_name='annotations', through='remo.AnnotationClassRel', to='remo.Class'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='image',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='remo.DatasetImage'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='tags',
            field=models.ManyToManyField(related_name='annotations', through='remo.AnnotationTags', to='remo.Tag'),
        ),
        migrations.CreateModel(
            name='NewAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classes', jsonfield.fields.JSONField(null=True)),
                ('tags', jsonfield.fields.JSONField(null=True)),
                ('task', models.CharField(choices=[('object_detection', 'Object detection'), ('instance_segmentation', 'Instance segmentation'), ('image_classification', 'Image classification')], max_length=255)),
                ('data', jsonfield.fields.JSONField(null=True)),
                ('status', models.IntegerField(choices=[(-1, 'not_annotated'), (0, 'skipped'), (1, 'done')], default=-1)),
                ('annotation_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_annotations', to='remo.AnnotationSet')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_annotations', to='remo.Dataset')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_annotations', to='remo.DatasetImage')),
            ],
            options={
                'db_table': 'new_annotations',
                'unique_together': {('image', 'annotation_set')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='annotationset',
            unique_together={('dataset', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='annotation',
            unique_together={('image', 'annotation_set')},
        ),
    ]
