# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['azdebugrelay']

package_data = \
{'': ['*']}

install_requires = \
['azure-storage-blob>=1.2,<2.0']

setup_kwargs = {
    'name': 'azure-debug-relay',
    'version': '0.1.0',
    'description': 'Cross-network remote debugging for Python',
    'long_description': '# Azure Debug Relay for Python\n\nAzDebugRelay - a Python module for cross-network remote debugging in [Visual Studio Code](https://code.visualstudio.com/).\n\nAzDebugRelay uses [debugpy](https://github.com/microsoft/debugpy) and [Azure Relay](https://docs.microsoft.com/en-us/azure/azure-relay/relay-what-is-it) service to create a debugging tunnel between 2 machines:\n\n1. You local Visual Studio Code debugger in `listen` mode.\n1. You remote code in `attach` mode.\n\nBoth machines can be isolated behind NAT or virtual networks - all they need is to be able to connect to Azure Relay resource.\nAzure Relay carries a secure tunnel, just as if these machines were in the same VPN.\n\n![Azure Relay Debugging Bridge](images/debug-relay-diagram.png)\n\nThe debugging tunnel is handled by [Azure Relay Bridge](https://github.com/vladkol/azure-relay-bridge) utility which is downloaded and installed automatically by AzDebugRelay. Azure Relay Bridge can maintain secure TCP and UDP tunnels for different purposes.\nAzDebugRelay is a collection of helpers for VS Code and Python that makes easier to use Azure Relay Bridge for debugging remote code.\n\n> We currently use a private fork of [Azure Relay Bridge](https://github.com/Azure/azure-relay-bridge) repo.\n\n## Requirements\n\n* Python 3.6+\n* debugpy\n\nAzure Relay Bridge tool is a .NET Core application, so you may need  to install `apt-transport-https` and other .NET Core 3.1 Runtime prerequisites on [Linux](https://docs.microsoft.com/en-us/dotnet/core/install/linux) and [Windows](https://docs.microsoft.com/en-us/dotnet/core/install/windows?tabs=netcore31).\n\n> You don\'t have to install .NET Runtime itself - Azure Relay Bridge builds are self-contained.\n\n### Supported Operating Systems\n\n* Ubuntu 18+\n* Debian 10+\n* macOS 10+\n* Windows 10\n\n## Usage\n\nBefore you start debugging with AzDebugRelay, there are 3 places you configure it:\n\n1. Azure Portal.\n1. Local machine where you run Visual Studio Code and its Python debugger.\n1. Remote machine where you run the same code files that open locally in VS Code.\n\n### In Azure Portal\n\n1. [Create Azure Relay resource](https://ms.portal.azure.com/#create/Microsoft.Relay). Better make one in a region closest to your location.\n1. Once created, switch to the resource, and select `Hybrid Connections` option in the vertical panel.\n1. Add a hybrid connection (`+ Hybrid Connection` button), give it a memorable name (e.g. `test` ðŸ™‚) - this is your **Relay Name**.\n1. Switch to that new hybrid connection, then select `Shared Access Policies` in the vertical panel.\n1. Add a new policy with `Send` and `Listen` permissions.\n1. Once created, copy its `Primary Connection String`, this is your **Connection String**.\n\n#### **Azure CLI version**\n\nChoose your name instead of `mydebugrelay1` for an Azure Relay resource, and your custom name for Hybrid Connection instead of `debugrelayhc1`.\n\n```cmd\naz group create --name debugRelayResourceGroup --location westus2\n\naz relay namespace create --resource-group debugRelayResourceGroup --name mydebugrelay1 --location westus2\n\naz relay hyco create --resource-group debugRelayResourceGroup --namespace-name mydebugrelay1 --name debugrelayhc1\n\naz relay hyco authorization-rule create --resource-group debugRelayResourceGroup --namespace-name mydebugrelay1 --hybrid-connection-name debugrelayhc1 --name sendlisten --rights Send Listen\n\naz relay hyco authorization-rule keys list --resource-group debugRelayResourceGroup --namespace-name mydebugrelay1 --hybrid-connection-name debugrelayhc1 --name sendlisten\n```\n\nLast command will show you something like this:\n\n```json\n{\n  "keyName": "sendlisten",\n  "primaryConnectionString": "Endpoint=sb://mydebugrelay1.servicebus.windows.net/;SharedAccessKeyName=sendlisten;SharedAccessKey=REDACTED1;EntityPath=debugrelayhc1",\n  "primaryKey": "REDACTED1",\n  "secondaryConnectionString": "Endpoint=sb://mydebugrelay1.servicebus.windows.net/;SharedAccessKeyName=sendlisten;SharedAccessKey=REDACTED2;EntityPath=debugrelayhc1",\n  "secondaryKey": "REDACTED2"\n}\n```\n\nUse `primaryConnectionString` or `secondaryConnectionString` value as your **Connection String**.\n\n**Relay Name** would be the one you choose instead of `debugrelayhc1`.\n</details>\n\n>> You cannot share the same hybrid connection between multiple active debug sessions unless running between same 2 machines via different ports.\n\n### Locally and Remotely\n\nCreate `.azrelay.json` file in your workspace directory or whatever directory will be "current" (next to `remote_server_demo.py` files),\nand set 2 variables:\n\n1. `AZRELAY_CONNECTION_STRING` to your **Connection String**.\n1. `AZRELAY_NAME` to your **Relay Name**.\n\nFor example:\n\n```json\n{\n  "AZRELAY_CONNECTION_STRING": "Endpoint=sb://vladkol-relay.servicebus.windows.net/;SharedAccessKeyName=default;SharedAccessKey=REDACTED;EntityPath=test",\n  "AZRELAY_NAME": "test"\n}\n```\n\n`.azrelay.json` is added in `.gitignore`, and won\'t be committed.\n\n> Alternatively, you can assign these 2 variables as environment variables.\n\n### Locally in Visual Studio Code\n\nThis step must be done before launching the remote code.\n\n1. Open `remote_server_demo.py` and put a breakpoint in `do_work()` function.\n1. Start debugging in your local Visual Studio Code in `Python: Listen` configuration.\n\nIf you are doing this on tops of your own code:\n\n1. Configure `.vscode/tasks.json` with tasks as in this repo\'s `.vscode/tasks.json`.\nThese tasks take care of launching and stopping Azure Relay Bridge when needed.\n1. Configure `.vscode/launch.json` with `Python: Listen` configuration as in this repo\'s `.vscode/launch.json`.\n\nNotice how the debugger maps paths on the local and the remote machines.\nIf your code has a different structure remotely, you may need to provide more sophisticated path mappings. Here is that piece in `.vscode/launch.json`:\n\n```json\n"pathMappings": [\n    {\n        "localRoot": "${workspaceFolder}",\n        "remoteRoot": "."\n    }\n]\n```\n\nIt tells VS Code that the workspace directory locally is mapped to the "current" directory remotely.\n\nWhen the debugger looks goes through a file remotely, it needs to find the corresponding file in your local VS Code workspace.\nWhen debugging `remote_server_demo.py`, the debugger maps `./remote_server_demo.py` remotely to `${workspaceFolder}/remote_server_demo.py` locally.\n\n### Remote Machine\n\n1. Clone the repo.\n1. Start `python3 remote_server_demo.py --debug=attach`.\n\n> Terminal session you start #2 in must have the repo\'s directory as current directory - for a reason of mapping local and remote directories.\n\nIf everything works as it\'s supposed to, you will hit a breakpoint in your local Visual Studio Code.\n\n## AzDebugRelay API\n\n`remote_server_demo.py` shows how you can use AzDebugRelay with your code.\n\n**azdebugrelay** package contains DebugRelay class that install and launches Azure Relay Bridge:\n\n```python\nfrom azdebugrelay import DebugRelay, DebugMode\n\naccess_key_or_connection_string = "AZURE RELAY HYBRID CONNECTION STRING OR ACCESS KEY"\nrelay_name = "RELAY NAME" # your Hybrid Connection name\ndebug_mode = DebugMode.Connect # or DebugMode.WaitForConnection if connecting from another end\nhybrid_connection_url = "HYBRID CONNECTION URL" # can be None if access_key_or_connection_string is a connection string\nhost = "127.0.0.1" # local hostname or ip address the debugger starts on\nport = 5678 # any available port that you can use within your machine\n\ndebug_relay = DebugRelay(access_key_or_connection_string, relay_name, debug_mode, hybrid_connection_url, host, port)\ndebug_relay.open()\n\n# attach to a remote debugger (usually from remote server code) with debug_mode = DebugMode.Connect\ndebugpy.connect((host, port))\n\n# Debug, debug, debug\n# ...\n# ...\n\ndebug_relay.close()\n```\n\n* `access_key_or_connection_string` - SAS Policy key or Connection String for Azure Relay Hybrid Connection. Must have `Send` and `Listen` permissions\n* `relay_name` - name of the Hybrid Connection\n* `debug_mode` - debug connection mode. `DebugMode.WaitForConnection` when starting in listening mode, `DebugMode.Connect` for attaching to a remote debugger.\n* `hybrid_connection_url` - Hybrid Connection URL. Required when access_key_or_connection_string as an access key, otherwise is ignored and may be None.\n* `host` - Local hostname or ip address the debugger starts on, `127.0.0.1` by default\n* `port` - debugging port, `5678` by default\n\n## Troubleshooting\n\nWhy using [Azure Relay Bridge](https://github.com/Azure/azure-relay-bridge) which is a .NET Core application that we have to install and use via `subprocess` calls?\n\nReasons:\n\n1. Azure Relay has SDKs for .NET, Java, and Node. [No Python SDK or examples](https://github.com/Azure/azure-relay/issues/28#issuecomment-390778193).\n1. Azure Relay Bridge does a lot of things we have to implement otherwise. It is a great tool that can help you connecting different networks for many purposes: for RDP, SSH and other protocols over TCP or UDP.\n\nA [private fork](https://github.com/vladkol/azure-relay-bridge) we are currently using is only to provide .NET Core 3.1 builds of the most recent code. There is a pending pul-requests: [one](https://github.com/Azure/azure-relay-bridge/pull/22) and [two](https://github.com/Azure/azure-relay-bridge/pull/19).\n\n### Known issues\n\n> **When VS Code starts debugging in `listen` mode, Azure Relay Bridge doesn\'t close\nif the debugging session was stopped without another side connected and attached**\n(`azbridge` keeps running and connected).\n\n**Reason**: VS Code doesn\'t launch necessary `postDebugTask` if no debugging was actually started/attached.\nJust starting in `listen` mode doesn\'t count.\n\n**Workaround**: Currently only one - killing `azbridge` process manually. Better solution is in progress.\n\n> **On macOS, there may be a situation when Azure Relay Bridge (`azbridge`) cannot connect when creating a local forwarder** (`-L` option).\n\n**Reason**: .NET Core wants you to add your Computer Name to `/etc/hosts` file.\n\n**Workaround**: Make necessary edits of `/etc/hosts` file:\n\n1. Look for your computer\'s name in `Settings â†’ Sharing`.\n2. Open `/etc/hosts` in a text editor in *sudo* mode (VS Code can save it later in *sudo* mode).\n3. Add the following line (**replace `your-computer-name` with your computer\'s name**). Save the file.\n\n```text\n127.0.0.1   your-computer-name\n```\n\n> **I launched the debugger as described and nothing happened**\n\n**Reason**: you *probably* didn\'t put a breakpoint in your VS Code locally. Make sure that breakpoint is in a place that your server process actually runs through.\n\n> **I do everything right, but thing works**\n\n**Reason**: Stop all debugging sessions (if any). Kill all `azbridge` processes. Try again.\n\nDoesn\'t help? [File an issue](../../issues/new)! Thank you!\n',
    'author': 'Vlad Kolesnikov',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
