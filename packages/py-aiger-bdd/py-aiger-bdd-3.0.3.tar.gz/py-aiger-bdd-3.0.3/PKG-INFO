Metadata-Version: 2.1
Name: py-aiger-bdd
Version: 3.0.3
Summary: Aiger to BDD bridge.
Home-page: https://github.com/mvcisback/py-aiger-bdd
License: MIT
Author: Marcell Vazquez-Chanlatte
Author-email: mvc@linux.com
Requires-Python: >=3.7,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: attrs (>=20.0.0,<21.0.0)
Requires-Dist: bidict (>=0.21.0,<0.22.0)
Requires-Dist: dd (>=0.5.4,<0.6.0)
Requires-Dist: funcy (>=1.12,<2.0)
Requires-Dist: py-aiger (>=6.0.0,<7.0.0)
Project-URL: Repository, https://github.com/mvcisback/py-aiger-bdd
Description-Content-Type: text/markdown

# py-aiger-bdd
[![Build Status](https://cloud.drone.io/api/badges/mvcisback/py-aiger-bdd/status.svg)](https://cloud.drone.io/mvcisback/py-aiger-bdd)
[![codecov](https://codecov.io/gh/mvcisback/py-aiger-bdd/branch/master/graph/badge.svg)](https://codecov.io/gh/mvcisback/py-aiger-bdd)

[![PyPI version](https://badge.fury.io/py/py-aiger-bdd.svg)](https://badge.fury.io/py/py-aiger-bdd)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

# Installation

`$ pip install py-aiger-bdd`

For developers, note that this project uses the
[poetry](https://poetry.eustace.io/) python package/dependency
management tool. Please familarize yourself with it and then
run:

`$ poetry install`

# Usage

This tutorial assumes familiarity with [py-aiger](https://github.com/mvcisback/py-aiger) and [py-aiger-bv](https://github.com/mvcisback/py-aiger-bv).

```python
import aiger_bv as BV
from aiger_bdd import to_bdd, from_bdd, count

x = BV.atom(3, 'x', signed=False) 

expr = x < 5  # Could be an AIG or AIGBV or BoolExpr.
bdd, manager, input2var = to_bdd(expr)  # Convert circuit encoded by expr into a BDD.
expr2 = from_bdd(bdd)  # Creates an Aiger Expression from a BDD.

assert count(expr, fraction=True) == 5/8
assert count(expr, fraction=False) == 5
```

