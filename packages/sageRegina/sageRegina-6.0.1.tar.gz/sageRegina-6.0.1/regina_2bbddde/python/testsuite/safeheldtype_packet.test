# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2015-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides tests for the wrapping of Packet subclasses through SafePtr
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

# NOTE: Since the move to pybind11 and Packet::safeDelete(), python references
# to packets never expire.  Therefore we should never raise any exceptions.
# in this test.

from __future__ import print_function

print()
print("-----------------------------------------------------------")
print("Basic:")
print()

print(Example3.poincareHomologySphere().isoSig())
print(Text("Hello World"))
print(Text("Hello World").text())

print()
print("-----------------------------------------------------------")
print("Basic container tests:")
print()

t1 = Triangulation3()
t2 = Example3.poincareHomologySphere()
t3 = Example3.figureEight()
p = PDF()

t = Text()

c = Container()
c.insertChildFirst(t1)

print(c.countChildren())

print(t1.isoSig())
t1.newTetrahedron()

print(c.firstChild())
print(c.firstChild().isoSig())

t1 = None

print(c.firstChild().isoSig())

temp = c.lastChild()

temp.newTetrahedron()

print(temp.isoSig())

print()
print("-----------------------------------------------------------")
print("Erasing container:")
print()

c = None

try:
    print(temp.isoSig())
except RuntimeError:
    print("Got exception")

print()
print("-----------------------------------------------------------")
print("Nested tests:")
print()

t2.insertChildFirst(t3)
t2.insertChildFirst(p)
p.insertChildLast(t)
t.setText("Hello World")

print(t.text())

p.lastChild().setText("Text set")

l = p.firstChild()

print(l.text())

t2.insertChildAfter(Text("New"), t3)

print(t2.countChildren())
print(t2.countDescendants())

m = l.root()

print(m == t2)

print(m.isoSig())

m = None

print(p.isNull())

print(p.totalTreeSize())

it = t2

while it:
    print(it)
    it = it.nextTreePacket()

t2 = None

print()
print("Erase nested:")
print("-----------------------------------------------------------")
print()

try:
    print(l)
except RuntimeError:
    print("Got exception")

try:
    print(t3)
except RuntimeError:
    print("Got exception")

print()
print("Make orphan:")
print("-----------------------------------------------------------")
print()

d1 = Triangulation3(); d1.newTetrahedron()
d2 = Triangulation3(); d2.newTetrahedron(); d2.newTetrahedron()
d3 = Triangulation3(); d3.newTetrahedron(); d3.newTetrahedron(); d3.newTetrahedron()
d1.insertChildLast(d2)
d2.insertChildLast(d3)

print(d1)
print(d2)
print(d3)

d2.makeOrphan()
print(d1)
print(d2)
print(d3)

try:
    d2 = None
    print(d1)
    print(d2)
    print(d3)
except RuntimeError:
    print("Got exception")

