# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides various tests for normal surface enumeration.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

def dumpSurfaces(name, slist):
	print("-------------------------------")
	print(slist.triangulation().label())
	print(name)
	print("-------------------------------")
	print()

	# Dump the hypersurfaces in sort order, since we don't really mind if the
	# ordering changes between releases.
	surfaces = slist.detail().split('\n')
	surfaces.sort()
	# Let the text headers appear up top.
	surfaces.reverse()
	for s in surfaces:
		print(s)

	# Nothing else to say.
	print()

def surfaceStats(tri):
	dumpSurfaces('Vertex hypersurfaces (std)',
		regina.NormalHypersurfaces.enumerate(tri,
		regina.HS_STANDARD, regina.HS_VERTEX))
	dumpSurfaces('Fundamental surfaces (std, primal)',
		regina.NormalHypersurfaces.enumerate(tri,
			regina.HS_STANDARD, regina.HS_FUNDAMENTAL, regina.HS_HILBERT_PRIMAL))
	dumpSurfaces('Fundamental surfaces (std, dual)',
		regina.NormalHypersurfaces.enumerate(tri,
		regina.HS_STANDARD, regina.HS_FUNDAMENTAL, regina.HS_HILBERT_DUAL))

t = regina.Triangulation4()
t.setLabel("Empty triangulation")
surfaceStats(t)

surfaceStats(regina.Example4.fourSphere())
# surfaceStats(regina.Example4.simplicialFourSphere())
surfaceStats(regina.Example4.rp4())
surfaceStats(regina.Example4.s3xs1())
surfaceStats(regina.Example4.s3xs1Twisted())
surfaceStats(regina.Example4.cappellShaneson())
# L(8,3) x S1:
surfaceStats(regina.Triangulation4('kLLLzQMQQccefhihhgihijjijjKb9aGbKbebvbPadbaaebmb9aGasasamb'))
