# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/type/percent.proto, envoy/type/semantic_version.proto, envoy/type/http.proto, envoy/type/range.proto
# plugin: python-betterproto
from dataclasses import dataclass

import betterproto


class FractionalPercentDenominatorType(betterproto.Enum):
    HUNDRED = 0
    TEN_THOUSAND = 1
    MILLION = 2


class CodecClientType(betterproto.Enum):
    HTTP1 = 0
    HTTP2 = 1
    HTTP3 = 2


@dataclass(eq=False, repr=False)
class Percent(betterproto.Message):
    """Identifies a percentage, in the range [0.0, 100.0]."""

    value: float = betterproto.double_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class FractionalPercent(betterproto.Message):
    """
    A fractional percentage is used in cases in which for performance reasons
    performing floating point to integer conversions during randomness
    calculations is undesirable. The message includes both a numerator and
    denominator that together determine the final fractional value. *
    **Example**: 1/100 = 1%. * **Example**: 3/10000 = 0.03%.
    """

    # Specifies the numerator. Defaults to 0.
    numerator: int = betterproto.uint32_field(1)
    # Specifies the denominator. If the denominator specified is less than the
    # numerator, the final fractional percentage is capped at 1 (100%).
    denominator: "FractionalPercentDenominatorType" = betterproto.enum_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SemanticVersion(betterproto.Message):
    """Identifies a percentage, in the range [0.0, 100.0]."""

    major_number: int = betterproto.uint32_field(1)
    minor_number: int = betterproto.uint32_field(2)
    patch: int = betterproto.uint32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Int64Range(betterproto.Message):
    """Identifies a percentage, in the range [0.0, 100.0]."""

    start: int = betterproto.int64_field(1)
    end: int = betterproto.int64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Int32Range(betterproto.Message):
    """
    A fractional percentage is used in cases in which for performance reasons
    performing floating point to integer conversions during randomness
    calculations is undesirable. The message includes both a numerator and
    denominator that together determine the final fractional value. *
    **Example**: 1/100 = 1%. * **Example**: 3/10000 = 0.03%.
    """

    # Specifies the numerator. Defaults to 0.
    start: int = betterproto.int32_field(1)
    # Specifies the denominator. If the denominator specified is less than the
    # numerator, the final fractional percentage is capped at 1 (100%).
    end: int = betterproto.int32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DoubleRange(betterproto.Message):
    start: float = betterproto.double_field(1)
    end: float = betterproto.double_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
