# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/api/v2/cluster/circuit_breaker.proto, envoy/api/v2/cluster/filter.proto, envoy/api/v2/cluster/outlier_detection.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import List, Optional

import betterproto


@dataclass(eq=False, repr=False)
class CircuitBreakers(betterproto.Message):
    """
    :ref:`Circuit breaking<arch_overview_circuit_break>` settings can be
    specified individually for each defined priority.
    """

    # If multiple
    # :ref:`Thresholds<envoy_api_msg_cluster.CircuitBreakers.Thresholds>` are
    # defined with the same
    # :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`, the first one
    # in the list is used. If no Thresholds is defined for a given
    # :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`, the default
    # values are used.
    thresholds: List["CircuitBreakersThresholds"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CircuitBreakersThresholds(betterproto.Message):
    """
    A Thresholds defines CircuitBreaker settings for a
    :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`. [#next-free-
    field: 9]
    """

    # The :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>` the
    # specified CircuitBreaker settings apply to.
    priority: "_core__.RoutingPriority" = betterproto.enum_field(1)
    # The maximum number of connections that Envoy will make to the upstream
    # cluster. If not specified, the default is 1024.
    max_connections: Optional[int] = betterproto.message_field(
        2, wraps=betterproto.TYPE_UINT32
    )
    # The maximum number of pending requests that Envoy will allow to the
    # upstream cluster. If not specified, the default is 1024.
    max_pending_requests: Optional[int] = betterproto.message_field(
        3, wraps=betterproto.TYPE_UINT32
    )
    # The maximum number of parallel requests that Envoy will make to the
    # upstream cluster. If not specified, the default is 1024.
    max_requests: Optional[int] = betterproto.message_field(
        4, wraps=betterproto.TYPE_UINT32
    )
    # The maximum number of parallel retries that Envoy will allow to the
    # upstream cluster. If not specified, the default is 3.
    max_retries: Optional[int] = betterproto.message_field(
        5, wraps=betterproto.TYPE_UINT32
    )
    # Specifies a limit on concurrent retries in relation to the number of active
    # requests. This parameter is optional. .. note::    If this field is set,
    # the retry budget will override any configured retry circuit    breaker.
    retry_budget: "CircuitBreakersThresholdsRetryBudget" = betterproto.message_field(8)
    # If track_remaining is true, then stats will be published that expose the
    # number of resources remaining until the circuit breakers open. If not
    # specified, the default is false. .. note::    If a retry budget is used in
    # lieu of the max_retries circuit breaker,    the remaining retry resources
    # remaining will not be tracked.
    track_remaining: bool = betterproto.bool_field(6)
    # The maximum number of connection pools per cluster that Envoy will
    # concurrently support at once. If not specified, the default is unlimited.
    # Set this for clusters which create a large number of connection pools. See
    # :ref:`Circuit Breaking
    # <arch_overview_circuit_break_cluster_maximum_connection_pools>` for more
    # details.
    max_connection_pools: Optional[int] = betterproto.message_field(
        7, wraps=betterproto.TYPE_UINT32
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CircuitBreakersThresholdsRetryBudget(betterproto.Message):
    # Specifies the limit on concurrent retries as a percentage of the sum of
    # active requests and active pending requests. For example, if there are 100
    # active requests and the budget_percent is set to 25, there may be 25 active
    # retries. This parameter is optional. Defaults to 20%.
    budget_percent: "___type__.Percent" = betterproto.message_field(1)
    # Specifies the minimum retry concurrency allowed for the retry budget. The
    # limit on the number of active retries may never go below this number. This
    # parameter is optional. Defaults to 3.
    min_retry_concurrency: Optional[int] = betterproto.message_field(
        2, wraps=betterproto.TYPE_UINT32
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Filter(betterproto.Message):
    """
    :ref:`Circuit breaking<arch_overview_circuit_break>` settings can be
    specified individually for each defined priority.
    """

    # If multiple
    # :ref:`Thresholds<envoy_api_msg_cluster.CircuitBreakers.Thresholds>` are
    # defined with the same
    # :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`, the first one
    # in the list is used. If no Thresholds is defined for a given
    # :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`, the default
    # values are used.
    name: str = betterproto.string_field(1)
    typed_config: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class OutlierDetection(betterproto.Message):
    """
    :ref:`Circuit breaking<arch_overview_circuit_break>` settings can be
    specified individually for each defined priority.
    """

    # If multiple
    # :ref:`Thresholds<envoy_api_msg_cluster.CircuitBreakers.Thresholds>` are
    # defined with the same
    # :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`, the first one
    # in the list is used. If no Thresholds is defined for a given
    # :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`, the default
    # values are used.
    consecutive_5_xx: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_UINT32
    )
    interval: timedelta = betterproto.message_field(2)
    base_ejection_time: timedelta = betterproto.message_field(3)
    max_ejection_percent: Optional[int] = betterproto.message_field(
        4, wraps=betterproto.TYPE_UINT32
    )
    enforcing_consecutive_5_xx: Optional[int] = betterproto.message_field(
        5, wraps=betterproto.TYPE_UINT32
    )
    enforcing_success_rate: Optional[int] = betterproto.message_field(
        6, wraps=betterproto.TYPE_UINT32
    )
    success_rate_minimum_hosts: Optional[int] = betterproto.message_field(
        7, wraps=betterproto.TYPE_UINT32
    )
    success_rate_request_volume: Optional[int] = betterproto.message_field(
        8, wraps=betterproto.TYPE_UINT32
    )
    success_rate_stdev_factor: Optional[int] = betterproto.message_field(
        9, wraps=betterproto.TYPE_UINT32
    )
    consecutive_gateway_failure: Optional[int] = betterproto.message_field(
        10, wraps=betterproto.TYPE_UINT32
    )
    enforcing_consecutive_gateway_failure: Optional[int] = betterproto.message_field(
        11, wraps=betterproto.TYPE_UINT32
    )
    split_external_local_origin_errors: bool = betterproto.bool_field(12)
    consecutive_local_origin_failure: Optional[int] = betterproto.message_field(
        13, wraps=betterproto.TYPE_UINT32
    )
    enforcing_consecutive_local_origin_failure: Optional[
        int
    ] = betterproto.message_field(14, wraps=betterproto.TYPE_UINT32)
    enforcing_local_origin_success_rate: Optional[int] = betterproto.message_field(
        15, wraps=betterproto.TYPE_UINT32
    )
    failure_percentage_threshold: Optional[int] = betterproto.message_field(
        16, wraps=betterproto.TYPE_UINT32
    )
    enforcing_failure_percentage: Optional[int] = betterproto.message_field(
        17, wraps=betterproto.TYPE_UINT32
    )
    enforcing_failure_percentage_local_origin: Optional[
        int
    ] = betterproto.message_field(18, wraps=betterproto.TYPE_UINT32)
    failure_percentage_minimum_hosts: Optional[int] = betterproto.message_field(
        19, wraps=betterproto.TYPE_UINT32
    )
    failure_percentage_request_volume: Optional[int] = betterproto.message_field(
        20, wraps=betterproto.TYPE_UINT32
    )

    def __post_init__(self) -> None:
        super().__post_init__()


from .. import core as _core__
from .... import type as ___type__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
