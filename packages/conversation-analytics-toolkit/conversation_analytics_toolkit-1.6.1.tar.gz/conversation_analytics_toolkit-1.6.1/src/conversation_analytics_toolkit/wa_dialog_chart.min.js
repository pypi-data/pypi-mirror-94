require.undef("wa_dialog_chart"),define("wa_dialog_chart",["wa_model","wa_tree","wa_node_details","d3"],function(wa_model,Tree,NodeDetails,d3){return function(container,config,data){let visits=null;"visits"in data&&(visits=new wa_model.Visits(JSON.parse(data.visits)));const ws=new wa_model.Workspace(data.workspace),state={search:{foundNodeIds:[],foundNodeId:void 0},ws:ws},_container=container,_chart={container:_container,config:$.extend(!0,{margin:{top:20,right:90,bottom:30,left:120},width:1200,height:800,title:""},config)};config.debugger;const baHeader=$("<div>").addClass("botvis-ba-header").appendTo(_chart.container);$("<a>",{text:"IBM Conversation Analytics Toolkit | Watson Assistant Dialog"}).addClass("botvis-ba-label").appendTo(baHeader),d3.select(_container[0]).selectAll("*").remove();const search_div=d3.select(_chart.container).append("div").attr("class","searchArea"),bodyContainer=d3.select(_chart.container).append("div").attr("class","body_container"),tree=new Tree(bodyContainer.append("div").node(),{}),details=new NodeDetails(bodyContainer.append("div").node());return tree.on(Tree.EVENT_SELECTED_NODE_CHANGED,node=>details.show(node)),details.on(NodeDetails.EVENT_JUMP_TO_NODE,node_id=>{tree.select(ws.nodeById(node_id)),tree.scrollToNode(node_id)}),function(container,tree){container.append("label").attr("for","searchNode").text("Search Node"),container.append("input").attr("id","searchNode").attr("name","searchNode").property("type","text").on("input",(d,i,g)=>{const str=d3.select(g[i]).property("value");!function(term){if(0==term.length)return state.search.foundNodeIds=[],tree.classNodes([],"searchResult"),void counter.text("");if(state.ws){const foundNodes=state.ws.nodes().filter(n=>n.match(term));state.search={foundNodeIds:foundNodes.map(n=>n.id),foundNodeId:void 0},foundNodes.forEach(n=>tree.expand(n)),tree.classNodes(state.search.foundNodeIds,"searchResult"),setTimeout(()=>searchNext(1),0)}}(str)});const counter=container.append("span");function searchNext(delta){const{foundNodeId:foundNodeId,foundNodeIds:foundNodeIds}=state.search;if(0===foundNodeIds.length)return void counter.text("0");const index=foundNodeIds.indexOf(foundNodeId);let nextIndex=index+delta;nextIndex=-1===(nextIndex=nextIndex===foundNodeIds.length?0:nextIndex)?foundNodeIds.length-1:nextIndex;const nextFoundNodeId=foundNodeIds[nextIndex];state.search.foundNodeId=nextFoundNodeId,counter.text(`${nextIndex+1}/${foundNodeIds.length}`),tree.classNodes([nextFoundNodeId],"currentSearchResult"),tree.scrollToNode(nextFoundNodeId)}container.append("input").property("type","button").property("value","<").on("click",()=>searchNext(-1)),container.append("input").property("type","button").property("value",">").on("click",()=>searchNext(1))}(search_div,tree),tree.showWSTree(ws,visits),_chart}});