# pubsubplus-python-client
#
# Copyright 2021 Solace Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# 	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# pylint: disable=no-else-break

"""
This module is an abstract base class for a Message.

``Message`` is the base class for:

- :py:class:`solace.messaging.publisher.outbound_message.OutboundMessage`
- :py:class:`solace.messaging.receiver.inbound_message.InboundMessage`

``Message`` instances are the objects that carry the payload and meta data to and from the
:py:class:`solace.messaging.message_service.MessageService`
"""

import logging
from abc import abstractmethod
from typing import Union, Dict
from solace.messaging.utils.interoperability_support import InteroperabilitySupport

logger = logging.getLogger('solace.messaging.core')


class Message(InteroperabilitySupport):
    """
    An abstract class that abstracts a Solace PubSub+ Message.
    """

    @abstractmethod
    def get_properties(self) -> Dict[str, Union[str, int, bytearray, None]]:
        """
        Return the user properties attached to the message.

        Message Properties are carried in Message meta data in addition to the ``Message`` payload.  Properties are
        stored in a dictionary of key-value pairs where the `key` is controlled by the application.
        """

    @abstractmethod
    def has_property(self, name: str) -> bool:
        """
        Checks if the message has a specific property attached.

        Args:
            name(str): the name of the property

        Returns:
            True if the property is present. False otherwise.
        """

    @abstractmethod
    def get_property(self, name: str) -> Union[str, int, bytearray, None]:
        """
        Retrieves  The value of a specific property.

        Args:
            name(str): The name of the property.

        Returns:
             str, int, bytearray: The value of the named property if found in the message otherwise, returns None.
        """

    @abstractmethod
    def get_payload_as_bytes(self) -> Union[bytearray, None]:
        """
        Retrieves the payload of the message.

        Returns:
            bytearray : the byte array with the message payload. Or None if there is no payload.
        """

    @abstractmethod
    def get_payload_as_string(self) -> Union[str, None]:
        """
        Retrieves the string-encoded payload of message.

        PubSub+ messages can be published with a string-encoded payload. This is a platform-agnostic string format
        that allows strings to be sent and received in messages that is independent of the publisher or consumer
        applications.  For example, in this way a non-Python publishing application can send a Unicode string
        that can still be consumed by a Python-based application.

        If message payload is not specifically encoded as a string, it cannot be retrieved as a string. For instance,
        a publisher if the publisher sends a UTF-8 string as a bytearray, this method cannot be used to extract the
        string.  Even though the payload is a string (``str``), it is not encoded to identify it as such.

        Returns:
            str : String found in the payload or None if there is no payload, or the payload is not a String.
        """

    @abstractmethod
    def get_correlation_id(self) -> Union[str, None]:
        """
        Retrieves the correlation identifier from the message.

        Returns:
            str : A unique identifier for the message set by producer or None.
        """

    @abstractmethod
    def get_expiration(self) -> int:
        """
        The UTC time (in ms, from midnight, January 1, 1970 UTC) when the message is considered
        to expired. A value of 0 means the message never expires. The default value is 0.

        Returns:
            int: The UTC time when the message is discarded or moved to a Dead Message Queue by the PubSub+ broker.
        """

    @abstractmethod
    def get_sequence_number(self) -> Union[int, None]:
        """
        Gets the sequence number of the message.

        Sequence numbers may be set by publisher applications or automatically generated by publisher APIs.  The
        sequence number is carried in the Message meta data in addition to the payload and may be retrieved by
        consumer applications.

        Returns:
            int : The positive sequence number or None if it was not set.
        """

    @abstractmethod
    def get_priority(self) -> Union[int, None]:
        """
        Retrieves the priority value. Valid values range from 0 to 255.

        Returns:
            int: A priority value from 0 to 255, or None if the priority is not set.

        Raises:
            PubSubPlusClientError: Any error if the priority of the message could not be retrieved.
        """
