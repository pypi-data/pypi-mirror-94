from ..field import Field as Field
from ..interface import Interface as Interface
from ..objecttype import ObjectType as ObjectType
from ..scalars import String as String
from ..schema import Schema as Schema
from ..structures import NonNull as NonNull
from ..unmountedtype import UnmountedType as UnmountedType
from typing import Any

class MyType(Interface): ...

class Container(ObjectType):
    field1: Any = ...
    field2: Any = ...

class MyInterface(Interface):
    ifield: Any = ...

class ContainerWithInterface(ObjectType):
    class Meta:
        interfaces: Any = ...
    field1: Any = ...
    field2: Any = ...

class MyScalar(UnmountedType):
    def get_type(self) -> Any: ...

def test_generate_objecttype() -> None: ...
def test_generate_objecttype_with_meta() -> None: ...
def test_generate_lazy_objecttype() -> Any: ...
def test_generate_objecttype_with_fields() -> None: ...
def test_generate_objecttype_with_private_attributes() -> None: ...
def test_ordered_fields_in_objecttype() -> None: ...
def test_generate_objecttype_inherit_abstracttype() -> None: ...
def test_generate_objecttype_inherit_abstracttype_reversed() -> None: ...
def test_generate_objecttype_unmountedtype() -> None: ...
def test_parent_container_get_fields() -> None: ...
def test_parent_container_interface_get_fields() -> None: ...
def test_objecttype_as_container_only_args() -> None: ...
def test_objecttype_as_container_args_kwargs() -> None: ...
def test_objecttype_as_container_few_kwargs() -> None: ...
def test_objecttype_as_container_all_kwargs() -> None: ...
def test_objecttype_as_container_extra_args() -> None: ...
def test_objecttype_as_container_invalid_kwargs() -> None: ...
def test_objecttype_container_benchmark(benchmark: Any) -> None: ...
def test_generate_objecttype_description() -> None: ...
def test_objecttype_with_possible_types() -> None: ...
def test_objecttype_with_possible_types_and_is_type_of_should_raise() -> Any: ...
def test_objecttype_no_fields_output() -> Any: ...
def test_abstract_objecttype_can_str() -> None: ...
