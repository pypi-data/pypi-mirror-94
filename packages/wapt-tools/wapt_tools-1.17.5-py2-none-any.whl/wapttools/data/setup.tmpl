import setuphelpers as wapt
import wapttools

uninstallkey = []

# Declaring specific app values
bin_name_string = 'template_{version}.exe'
silent_inst_arg = '/S'
uninstall_key = 'Template'


def install():
    # put here what to do when package is removed from host
    # implicit context variables are WAPT, control, user, params, run, force
    global WAPT, control, user, params, run, force

    pass


def uninstall():
    # put here what to do when package is removed from host
    # implicit context variables are WAPT, control, user, params, run
    global WAPT, control, user, params, run

    pass


def session_setup():
    # put here what to do when package is configured inside a user session
    # implicit context variables are WAPT, control, user, params
    global WAPT, control, user, params

    logger = wapttools.logger(control['package'])
    logger.info('Session setup for {}'.format(control.asrequirement()))


def audit():
    # put here code to check periodically that state is matching expectations
    # return 'OK', 'WARNING' or 'ERROR' to report status in console.
    # all print statement are reported too

    return 'OK'


def update_package():
    # put here what to do to update package content with newer installers.
    # launched with command wapt-get update-package-sources <path-to-wapt-directory>
    # implicit context variables are WAPT, basedir, control, user, params, run
    # if attributes in control are changed, they should be explicitly saved to package file with
    # control.save_control_to_wapt()
    global WAPT, basedir, control, user, params, run

    latest_version = wapttools.latestVersion()
    print('Latest version: {version}'.format(version=latest_version))

    current_version = control.version.split('-')[0]

    if latest_version != current_version:
        print('Upgrading from {current_version} to {latest_version}'.format(
            current_version=current_version,
            latest_version=latest_version))
        control.version = '%s-0'.format(latest_version)
        control.save_control_to_wapt('.')

    download_sources(False)


def download_sources(use_checksum=True):
    pkg = wapt.PackageEntry().load_control_from_wapt('.')
    current_version = pkg.version.split('-')[0]
    filename = wapt.makepath(
      'sources',
      bin_name_string.format(version=current_version))

    config = wapttools.loadVersionCheck()
    if use_checksum:
        checksum = config['checksum']
    else:
        checksum = None
    wapttools.download(
        config['url_download_file'].format(version=current_version),
        filename,
        checksum=checksum)


if __name__ == '__main__':
    wapttools.commands(downloader=download_sources)
