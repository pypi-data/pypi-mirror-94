# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ListFinancialEventGroupsPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next_token': 'str',
        'financial_event_group_list': 'FinancialEventGroupList'
    }

    attribute_map = {
        'next_token': 'NextToken',
        'financial_event_group_list': 'FinancialEventGroupList'
    }

    def __init__(self, next_token=None, financial_event_group_list=None):  # noqa: E501
        """ListFinancialEventGroupsPayload - a model defined in Swagger"""  # noqa: E501
        self._next_token = None
        self._financial_event_group_list = None
        self.discriminator = None
        if next_token is not None:
            self.next_token = next_token
        if financial_event_group_list is not None:
            self.financial_event_group_list = financial_event_group_list

    @property
    def next_token(self):
        """Gets the next_token of this ListFinancialEventGroupsPayload.  # noqa: E501

        When present and not empty, pass this string token in the next request to return the next response page.  # noqa: E501

        :return: The next_token of this ListFinancialEventGroupsPayload.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListFinancialEventGroupsPayload.

        When present and not empty, pass this string token in the next request to return the next response page.  # noqa: E501

        :param next_token: The next_token of this ListFinancialEventGroupsPayload.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    @property
    def financial_event_group_list(self):
        """Gets the financial_event_group_list of this ListFinancialEventGroupsPayload.  # noqa: E501


        :return: The financial_event_group_list of this ListFinancialEventGroupsPayload.  # noqa: E501
        :rtype: FinancialEventGroupList
        """
        return self._financial_event_group_list

    @financial_event_group_list.setter
    def financial_event_group_list(self, financial_event_group_list):
        """Sets the financial_event_group_list of this ListFinancialEventGroupsPayload.


        :param financial_event_group_list: The financial_event_group_list of this ListFinancialEventGroupsPayload.  # noqa: E501
        :type: FinancialEventGroupList
        """

        self._financial_event_group_list = financial_event_group_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListFinancialEventGroupsPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListFinancialEventGroupsPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
