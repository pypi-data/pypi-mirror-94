# coding: utf-8

"""
    Selling Partner API for FBA Inventory

    The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ResearchingQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_researching_quantity': 'int',
        'researching_quantity_breakdown': 'list[ResearchingQuantityEntry]'
    }

    attribute_map = {
        'total_researching_quantity': 'totalResearchingQuantity',
        'researching_quantity_breakdown': 'researchingQuantityBreakdown'
    }

    def __init__(self, total_researching_quantity=None, researching_quantity_breakdown=None):  # noqa: E501
        """ResearchingQuantity - a model defined in Swagger"""  # noqa: E501
        self._total_researching_quantity = None
        self._researching_quantity_breakdown = None
        self.discriminator = None
        if total_researching_quantity is not None:
            self.total_researching_quantity = total_researching_quantity
        if researching_quantity_breakdown is not None:
            self.researching_quantity_breakdown = researching_quantity_breakdown

    @property
    def total_researching_quantity(self):
        """Gets the total_researching_quantity of this ResearchingQuantity.  # noqa: E501

        The total number of units currently being researched in Amazon's fulfillment network.  # noqa: E501

        :return: The total_researching_quantity of this ResearchingQuantity.  # noqa: E501
        :rtype: int
        """
        return self._total_researching_quantity

    @total_researching_quantity.setter
    def total_researching_quantity(self, total_researching_quantity):
        """Sets the total_researching_quantity of this ResearchingQuantity.

        The total number of units currently being researched in Amazon's fulfillment network.  # noqa: E501

        :param total_researching_quantity: The total_researching_quantity of this ResearchingQuantity.  # noqa: E501
        :type: int
        """

        self._total_researching_quantity = total_researching_quantity

    @property
    def researching_quantity_breakdown(self):
        """Gets the researching_quantity_breakdown of this ResearchingQuantity.  # noqa: E501

        A list of quantity details for items currently being researched.  # noqa: E501

        :return: The researching_quantity_breakdown of this ResearchingQuantity.  # noqa: E501
        :rtype: list[ResearchingQuantityEntry]
        """
        return self._researching_quantity_breakdown

    @researching_quantity_breakdown.setter
    def researching_quantity_breakdown(self, researching_quantity_breakdown):
        """Sets the researching_quantity_breakdown of this ResearchingQuantity.

        A list of quantity details for items currently being researched.  # noqa: E501

        :param researching_quantity_breakdown: The researching_quantity_breakdown of this ResearchingQuantity.  # noqa: E501
        :type: list[ResearchingQuantityEntry]
        """

        self._researching_quantity_breakdown = researching_quantity_breakdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResearchingQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResearchingQuantity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
