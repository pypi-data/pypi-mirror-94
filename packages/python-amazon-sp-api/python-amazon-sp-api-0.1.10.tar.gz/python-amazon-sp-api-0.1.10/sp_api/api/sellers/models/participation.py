# coding: utf-8

"""
    Selling Partner API for Sellers

    The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Participation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_participating': 'bool',
        'has_suspended_listings': 'bool'
    }

    attribute_map = {
        'is_participating': 'isParticipating',
        'has_suspended_listings': 'hasSuspendedListings'
    }

    def __init__(self, is_participating=None, has_suspended_listings=None):  # noqa: E501
        """Participation - a model defined in Swagger"""  # noqa: E501
        self._is_participating = None
        self._has_suspended_listings = None
        self.discriminator = None
        self.is_participating = is_participating
        self.has_suspended_listings = has_suspended_listings

    @property
    def is_participating(self):
        """Gets the is_participating of this Participation.  # noqa: E501


        :return: The is_participating of this Participation.  # noqa: E501
        :rtype: bool
        """
        return self._is_participating

    @is_participating.setter
    def is_participating(self, is_participating):
        """Sets the is_participating of this Participation.


        :param is_participating: The is_participating of this Participation.  # noqa: E501
        :type: bool
        """
        if is_participating is None:
            raise ValueError("Invalid value for `is_participating`, must not be `None`")  # noqa: E501

        self._is_participating = is_participating

    @property
    def has_suspended_listings(self):
        """Gets the has_suspended_listings of this Participation.  # noqa: E501

        Specifies if the seller has suspended listings. True if the seller Listing Status is set to Inactive, otherwise False.  # noqa: E501

        :return: The has_suspended_listings of this Participation.  # noqa: E501
        :rtype: bool
        """
        return self._has_suspended_listings

    @has_suspended_listings.setter
    def has_suspended_listings(self, has_suspended_listings):
        """Sets the has_suspended_listings of this Participation.

        Specifies if the seller has suspended listings. True if the seller Listing Status is set to Inactive, otherwise False.  # noqa: E501

        :param has_suspended_listings: The has_suspended_listings of this Participation.  # noqa: E501
        :type: bool
        """
        if has_suspended_listings is None:
            raise ValueError("Invalid value for `has_suspended_listings`, must not be `None`")  # noqa: E501

        self._has_suspended_listings = has_suspended_listings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Participation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Participation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
