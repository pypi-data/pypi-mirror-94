# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OfferCountType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition': 'str',
        'fulfillment_channel': 'FulfillmentChannelType',
        'offer_count': 'int'
    }

    attribute_map = {
        'condition': 'condition',
        'fulfillment_channel': 'fulfillmentChannel',
        'offer_count': 'OfferCount'
    }

    def __init__(self, condition=None, fulfillment_channel=None, offer_count=None):  # noqa: E501
        """OfferCountType - a model defined in Swagger"""  # noqa: E501
        self._condition = None
        self._fulfillment_channel = None
        self._offer_count = None
        self.discriminator = None
        if condition is not None:
            self.condition = condition
        if fulfillment_channel is not None:
            self.fulfillment_channel = fulfillment_channel
        if offer_count is not None:
            self.offer_count = offer_count

    @property
    def condition(self):
        """Gets the condition of this OfferCountType.  # noqa: E501

        Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.  # noqa: E501

        :return: The condition of this OfferCountType.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this OfferCountType.

        Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.  # noqa: E501

        :param condition: The condition of this OfferCountType.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def fulfillment_channel(self):
        """Gets the fulfillment_channel of this OfferCountType.  # noqa: E501


        :return: The fulfillment_channel of this OfferCountType.  # noqa: E501
        :rtype: FulfillmentChannelType
        """
        return self._fulfillment_channel

    @fulfillment_channel.setter
    def fulfillment_channel(self, fulfillment_channel):
        """Sets the fulfillment_channel of this OfferCountType.


        :param fulfillment_channel: The fulfillment_channel of this OfferCountType.  # noqa: E501
        :type: FulfillmentChannelType
        """

        self._fulfillment_channel = fulfillment_channel

    @property
    def offer_count(self):
        """Gets the offer_count of this OfferCountType.  # noqa: E501

        The number of offers in a fulfillment channel that meet a specific condition.  # noqa: E501

        :return: The offer_count of this OfferCountType.  # noqa: E501
        :rtype: int
        """
        return self._offer_count

    @offer_count.setter
    def offer_count(self, offer_count):
        """Sets the offer_count of this OfferCountType.

        The number of offers in a fulfillment channel that meet a specific condition.  # noqa: E501

        :param offer_count: The offer_count of this OfferCountType.  # noqa: E501
        :type: int
        """

        self._offer_count = offer_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfferCountType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferCountType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
