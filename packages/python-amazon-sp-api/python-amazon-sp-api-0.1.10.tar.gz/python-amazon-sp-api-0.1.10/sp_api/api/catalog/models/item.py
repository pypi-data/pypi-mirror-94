# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifiers': 'IdentifierType',
        'attribute_sets': 'AttributeSetList',
        'relationships': 'RelationshipList',
        'sales_rankings': 'SalesRankList'
    }

    attribute_map = {
        'identifiers': 'Identifiers',
        'attribute_sets': 'AttributeSets',
        'relationships': 'Relationships',
        'sales_rankings': 'SalesRankings'
    }

    def __init__(self, identifiers=None, attribute_sets=None, relationships=None, sales_rankings=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        self._identifiers = None
        self._attribute_sets = None
        self._relationships = None
        self._sales_rankings = None
        self.discriminator = None
        self.identifiers = identifiers
        if attribute_sets is not None:
            self.attribute_sets = attribute_sets
        if relationships is not None:
            self.relationships = relationships
        if sales_rankings is not None:
            self.sales_rankings = sales_rankings

    @property
    def identifiers(self):
        """Gets the identifiers of this Item.  # noqa: E501


        :return: The identifiers of this Item.  # noqa: E501
        :rtype: IdentifierType
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Item.


        :param identifiers: The identifiers of this Item.  # noqa: E501
        :type: IdentifierType
        """
        if identifiers is None:
            raise ValueError("Invalid value for `identifiers`, must not be `None`")  # noqa: E501

        self._identifiers = identifiers

    @property
    def attribute_sets(self):
        """Gets the attribute_sets of this Item.  # noqa: E501


        :return: The attribute_sets of this Item.  # noqa: E501
        :rtype: AttributeSetList
        """
        return self._attribute_sets

    @attribute_sets.setter
    def attribute_sets(self, attribute_sets):
        """Sets the attribute_sets of this Item.


        :param attribute_sets: The attribute_sets of this Item.  # noqa: E501
        :type: AttributeSetList
        """

        self._attribute_sets = attribute_sets

    @property
    def relationships(self):
        """Gets the relationships of this Item.  # noqa: E501


        :return: The relationships of this Item.  # noqa: E501
        :rtype: RelationshipList
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this Item.


        :param relationships: The relationships of this Item.  # noqa: E501
        :type: RelationshipList
        """

        self._relationships = relationships

    @property
    def sales_rankings(self):
        """Gets the sales_rankings of this Item.  # noqa: E501


        :return: The sales_rankings of this Item.  # noqa: E501
        :rtype: SalesRankList
        """
        return self._sales_rankings

    @sales_rankings.setter
    def sales_rankings(self, sales_rankings):
        """Sets the sales_rankings of this Item.


        :param sales_rankings: The sales_rankings of this Item.  # noqa: E501
        :type: SalesRankList
        """

        self._sales_rankings = sales_rankings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
