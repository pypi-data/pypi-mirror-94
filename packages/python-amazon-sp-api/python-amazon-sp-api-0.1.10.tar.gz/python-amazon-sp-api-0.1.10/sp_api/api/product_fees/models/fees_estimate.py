# coding: utf-8

"""
    Selling Partner API for Product Fees

    The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FeesEstimate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_of_fees_estimation': 'datetime',
        'total_fees_estimate': 'MoneyType',
        'fee_detail_list': 'FeeDetailList'
    }

    attribute_map = {
        'time_of_fees_estimation': 'TimeOfFeesEstimation',
        'total_fees_estimate': 'TotalFeesEstimate',
        'fee_detail_list': 'FeeDetailList'
    }

    def __init__(self, time_of_fees_estimation=None, total_fees_estimate=None, fee_detail_list=None):  # noqa: E501
        """FeesEstimate - a model defined in Swagger"""  # noqa: E501
        self._time_of_fees_estimation = None
        self._total_fees_estimate = None
        self._fee_detail_list = None
        self.discriminator = None
        self.time_of_fees_estimation = time_of_fees_estimation
        if total_fees_estimate is not None:
            self.total_fees_estimate = total_fees_estimate
        if fee_detail_list is not None:
            self.fee_detail_list = fee_detail_list

    @property
    def time_of_fees_estimation(self):
        """Gets the time_of_fees_estimation of this FeesEstimate.  # noqa: E501

        The time for which the fees were estimated. This defaults to the time the request is made.  # noqa: E501

        :return: The time_of_fees_estimation of this FeesEstimate.  # noqa: E501
        :rtype: datetime
        """
        return self._time_of_fees_estimation

    @time_of_fees_estimation.setter
    def time_of_fees_estimation(self, time_of_fees_estimation):
        """Sets the time_of_fees_estimation of this FeesEstimate.

        The time for which the fees were estimated. This defaults to the time the request is made.  # noqa: E501

        :param time_of_fees_estimation: The time_of_fees_estimation of this FeesEstimate.  # noqa: E501
        :type: datetime
        """
        if time_of_fees_estimation is None:
            raise ValueError("Invalid value for `time_of_fees_estimation`, must not be `None`")  # noqa: E501

        self._time_of_fees_estimation = time_of_fees_estimation

    @property
    def total_fees_estimate(self):
        """Gets the total_fees_estimate of this FeesEstimate.  # noqa: E501


        :return: The total_fees_estimate of this FeesEstimate.  # noqa: E501
        :rtype: MoneyType
        """
        return self._total_fees_estimate

    @total_fees_estimate.setter
    def total_fees_estimate(self, total_fees_estimate):
        """Sets the total_fees_estimate of this FeesEstimate.


        :param total_fees_estimate: The total_fees_estimate of this FeesEstimate.  # noqa: E501
        :type: MoneyType
        """

        self._total_fees_estimate = total_fees_estimate

    @property
    def fee_detail_list(self):
        """Gets the fee_detail_list of this FeesEstimate.  # noqa: E501


        :return: The fee_detail_list of this FeesEstimate.  # noqa: E501
        :rtype: FeeDetailList
        """
        return self._fee_detail_list

    @fee_detail_list.setter
    def fee_detail_list(self, fee_detail_list):
        """Sets the fee_detail_list of this FeesEstimate.


        :param fee_detail_list: The fee_detail_list of this FeesEstimate.  # noqa: E501
        :type: FeeDetailList
        """

        self._fee_detail_list = fee_detail_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeesEstimate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeesEstimate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
