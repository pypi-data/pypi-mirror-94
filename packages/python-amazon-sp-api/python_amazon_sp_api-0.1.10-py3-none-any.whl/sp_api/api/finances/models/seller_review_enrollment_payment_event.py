# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SellerReviewEnrollmentPaymentEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'posted_date': 'ModelDate',
        'enrollment_id': 'str',
        'parent_asin': 'str',
        'fee_component': 'FeeComponent',
        'charge_component': 'ChargeComponent',
        'total_amount': 'Currency'
    }

    attribute_map = {
        'posted_date': 'PostedDate',
        'enrollment_id': 'EnrollmentId',
        'parent_asin': 'ParentASIN',
        'fee_component': 'FeeComponent',
        'charge_component': 'ChargeComponent',
        'total_amount': 'TotalAmount'
    }

    def __init__(self, posted_date=None, enrollment_id=None, parent_asin=None, fee_component=None, charge_component=None, total_amount=None):  # noqa: E501
        """SellerReviewEnrollmentPaymentEvent - a model defined in Swagger"""  # noqa: E501
        self._posted_date = None
        self._enrollment_id = None
        self._parent_asin = None
        self._fee_component = None
        self._charge_component = None
        self._total_amount = None
        self.discriminator = None
        if posted_date is not None:
            self.posted_date = posted_date
        if enrollment_id is not None:
            self.enrollment_id = enrollment_id
        if parent_asin is not None:
            self.parent_asin = parent_asin
        if fee_component is not None:
            self.fee_component = fee_component
        if charge_component is not None:
            self.charge_component = charge_component
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def posted_date(self):
        """Gets the posted_date of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501


        :return: The posted_date of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :rtype: ModelDate
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this SellerReviewEnrollmentPaymentEvent.


        :param posted_date: The posted_date of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :type: ModelDate
        """

        self._posted_date = posted_date

    @property
    def enrollment_id(self):
        """Gets the enrollment_id of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501

        An enrollment identifier.  # noqa: E501

        :return: The enrollment_id of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_id

    @enrollment_id.setter
    def enrollment_id(self, enrollment_id):
        """Sets the enrollment_id of this SellerReviewEnrollmentPaymentEvent.

        An enrollment identifier.  # noqa: E501

        :param enrollment_id: The enrollment_id of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :type: str
        """

        self._enrollment_id = enrollment_id

    @property
    def parent_asin(self):
        """Gets the parent_asin of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501

        The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program.  # noqa: E501

        :return: The parent_asin of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._parent_asin

    @parent_asin.setter
    def parent_asin(self, parent_asin):
        """Sets the parent_asin of this SellerReviewEnrollmentPaymentEvent.

        The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program.  # noqa: E501

        :param parent_asin: The parent_asin of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :type: str
        """

        self._parent_asin = parent_asin

    @property
    def fee_component(self):
        """Gets the fee_component of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501


        :return: The fee_component of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :rtype: FeeComponent
        """
        return self._fee_component

    @fee_component.setter
    def fee_component(self, fee_component):
        """Sets the fee_component of this SellerReviewEnrollmentPaymentEvent.


        :param fee_component: The fee_component of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :type: FeeComponent
        """

        self._fee_component = fee_component

    @property
    def charge_component(self):
        """Gets the charge_component of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501


        :return: The charge_component of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :rtype: ChargeComponent
        """
        return self._charge_component

    @charge_component.setter
    def charge_component(self, charge_component):
        """Sets the charge_component of this SellerReviewEnrollmentPaymentEvent.


        :param charge_component: The charge_component of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :type: ChargeComponent
        """

        self._charge_component = charge_component

    @property
    def total_amount(self):
        """Gets the total_amount of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501


        :return: The total_amount of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :rtype: Currency
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this SellerReviewEnrollmentPaymentEvent.


        :param total_amount: The total_amount of this SellerReviewEnrollmentPaymentEvent.  # noqa: E501
        :type: Currency
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SellerReviewEnrollmentPaymentEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SellerReviewEnrollmentPaymentEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
