# coding: utf-8

"""
    Selling Partner API for Product Fees

    The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IncludedFeeDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fee_type': 'str',
        'fee_amount': 'MoneyType',
        'fee_promotion': 'MoneyType',
        'tax_amount': 'MoneyType',
        'final_fee': 'MoneyType'
    }

    attribute_map = {
        'fee_type': 'FeeType',
        'fee_amount': 'FeeAmount',
        'fee_promotion': 'FeePromotion',
        'tax_amount': 'TaxAmount',
        'final_fee': 'FinalFee'
    }

    def __init__(self, fee_type=None, fee_amount=None, fee_promotion=None, tax_amount=None, final_fee=None):  # noqa: E501
        """IncludedFeeDetail - a model defined in Swagger"""  # noqa: E501
        self._fee_type = None
        self._fee_amount = None
        self._fee_promotion = None
        self._tax_amount = None
        self._final_fee = None
        self.discriminator = None
        self.fee_type = fee_type
        self.fee_amount = fee_amount
        if fee_promotion is not None:
            self.fee_promotion = fee_promotion
        if tax_amount is not None:
            self.tax_amount = tax_amount
        self.final_fee = final_fee

    @property
    def fee_type(self):
        """Gets the fee_type of this IncludedFeeDetail.  # noqa: E501

        The type of fee charged to a seller.  # noqa: E501

        :return: The fee_type of this IncludedFeeDetail.  # noqa: E501
        :rtype: str
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this IncludedFeeDetail.

        The type of fee charged to a seller.  # noqa: E501

        :param fee_type: The fee_type of this IncludedFeeDetail.  # noqa: E501
        :type: str
        """
        if fee_type is None:
            raise ValueError("Invalid value for `fee_type`, must not be `None`")  # noqa: E501

        self._fee_type = fee_type

    @property
    def fee_amount(self):
        """Gets the fee_amount of this IncludedFeeDetail.  # noqa: E501


        :return: The fee_amount of this IncludedFeeDetail.  # noqa: E501
        :rtype: MoneyType
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this IncludedFeeDetail.


        :param fee_amount: The fee_amount of this IncludedFeeDetail.  # noqa: E501
        :type: MoneyType
        """
        if fee_amount is None:
            raise ValueError("Invalid value for `fee_amount`, must not be `None`")  # noqa: E501

        self._fee_amount = fee_amount

    @property
    def fee_promotion(self):
        """Gets the fee_promotion of this IncludedFeeDetail.  # noqa: E501


        :return: The fee_promotion of this IncludedFeeDetail.  # noqa: E501
        :rtype: MoneyType
        """
        return self._fee_promotion

    @fee_promotion.setter
    def fee_promotion(self, fee_promotion):
        """Sets the fee_promotion of this IncludedFeeDetail.


        :param fee_promotion: The fee_promotion of this IncludedFeeDetail.  # noqa: E501
        :type: MoneyType
        """

        self._fee_promotion = fee_promotion

    @property
    def tax_amount(self):
        """Gets the tax_amount of this IncludedFeeDetail.  # noqa: E501


        :return: The tax_amount of this IncludedFeeDetail.  # noqa: E501
        :rtype: MoneyType
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this IncludedFeeDetail.


        :param tax_amount: The tax_amount of this IncludedFeeDetail.  # noqa: E501
        :type: MoneyType
        """

        self._tax_amount = tax_amount

    @property
    def final_fee(self):
        """Gets the final_fee of this IncludedFeeDetail.  # noqa: E501


        :return: The final_fee of this IncludedFeeDetail.  # noqa: E501
        :rtype: MoneyType
        """
        return self._final_fee

    @final_fee.setter
    def final_fee(self, final_fee):
        """Sets the final_fee of this IncludedFeeDetail.


        :param final_fee: The final_fee of this IncludedFeeDetail.  # noqa: E501
        :type: MoneyType
        """
        if final_fee is None:
            raise ValueError("Invalid value for `final_fee`, must not be `None`")  # noqa: E501

        self._final_fee = final_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncludedFeeDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncludedFeeDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
