# coding: utf-8

"""
    Selling Partner API for FBA Inventory

    The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ReservedQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_reserved_quantity': 'int',
        'pending_customer_order_quantity': 'int',
        'pending_transshipment_quantity': 'int',
        'fc_processing_quantity': 'int'
    }

    attribute_map = {
        'total_reserved_quantity': 'totalReservedQuantity',
        'pending_customer_order_quantity': 'pendingCustomerOrderQuantity',
        'pending_transshipment_quantity': 'pendingTransshipmentQuantity',
        'fc_processing_quantity': 'fcProcessingQuantity'
    }

    def __init__(self, total_reserved_quantity=None, pending_customer_order_quantity=None, pending_transshipment_quantity=None, fc_processing_quantity=None):  # noqa: E501
        """ReservedQuantity - a model defined in Swagger"""  # noqa: E501
        self._total_reserved_quantity = None
        self._pending_customer_order_quantity = None
        self._pending_transshipment_quantity = None
        self._fc_processing_quantity = None
        self.discriminator = None
        if total_reserved_quantity is not None:
            self.total_reserved_quantity = total_reserved_quantity
        if pending_customer_order_quantity is not None:
            self.pending_customer_order_quantity = pending_customer_order_quantity
        if pending_transshipment_quantity is not None:
            self.pending_transshipment_quantity = pending_transshipment_quantity
        if fc_processing_quantity is not None:
            self.fc_processing_quantity = fc_processing_quantity

    @property
    def total_reserved_quantity(self):
        """Gets the total_reserved_quantity of this ReservedQuantity.  # noqa: E501

        The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.  # noqa: E501

        :return: The total_reserved_quantity of this ReservedQuantity.  # noqa: E501
        :rtype: int
        """
        return self._total_reserved_quantity

    @total_reserved_quantity.setter
    def total_reserved_quantity(self, total_reserved_quantity):
        """Sets the total_reserved_quantity of this ReservedQuantity.

        The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.  # noqa: E501

        :param total_reserved_quantity: The total_reserved_quantity of this ReservedQuantity.  # noqa: E501
        :type: int
        """

        self._total_reserved_quantity = total_reserved_quantity

    @property
    def pending_customer_order_quantity(self):
        """Gets the pending_customer_order_quantity of this ReservedQuantity.  # noqa: E501

        The number of units reserved for customer orders.  # noqa: E501

        :return: The pending_customer_order_quantity of this ReservedQuantity.  # noqa: E501
        :rtype: int
        """
        return self._pending_customer_order_quantity

    @pending_customer_order_quantity.setter
    def pending_customer_order_quantity(self, pending_customer_order_quantity):
        """Sets the pending_customer_order_quantity of this ReservedQuantity.

        The number of units reserved for customer orders.  # noqa: E501

        :param pending_customer_order_quantity: The pending_customer_order_quantity of this ReservedQuantity.  # noqa: E501
        :type: int
        """

        self._pending_customer_order_quantity = pending_customer_order_quantity

    @property
    def pending_transshipment_quantity(self):
        """Gets the pending_transshipment_quantity of this ReservedQuantity.  # noqa: E501

        The number of units being transferred from one fulfillment center to another.  # noqa: E501

        :return: The pending_transshipment_quantity of this ReservedQuantity.  # noqa: E501
        :rtype: int
        """
        return self._pending_transshipment_quantity

    @pending_transshipment_quantity.setter
    def pending_transshipment_quantity(self, pending_transshipment_quantity):
        """Sets the pending_transshipment_quantity of this ReservedQuantity.

        The number of units being transferred from one fulfillment center to another.  # noqa: E501

        :param pending_transshipment_quantity: The pending_transshipment_quantity of this ReservedQuantity.  # noqa: E501
        :type: int
        """

        self._pending_transshipment_quantity = pending_transshipment_quantity

    @property
    def fc_processing_quantity(self):
        """Gets the fc_processing_quantity of this ReservedQuantity.  # noqa: E501

        The number of units that have been sidelined at the fulfillment center for additional processing.  # noqa: E501

        :return: The fc_processing_quantity of this ReservedQuantity.  # noqa: E501
        :rtype: int
        """
        return self._fc_processing_quantity

    @fc_processing_quantity.setter
    def fc_processing_quantity(self, fc_processing_quantity):
        """Sets the fc_processing_quantity of this ReservedQuantity.

        The number of units that have been sidelined at the fulfillment center for additional processing.  # noqa: E501

        :param fc_processing_quantity: The fc_processing_quantity of this ReservedQuantity.  # noqa: E501
        :type: int
        """

        self._fc_processing_quantity = fc_processing_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReservedQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReservedQuantity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
