# coding: utf-8

"""
    Selling Partner API for FBA Inventory

    The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UnfulfillableQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_unfulfillable_quantity': 'int',
        'customer_damaged_quantity': 'int',
        'warehouse_damaged_quantity': 'int',
        'distributor_damaged_quantity': 'int',
        'carrier_damaged_quantity': 'int',
        'defective_quantity': 'int',
        'expired_quantity': 'int'
    }

    attribute_map = {
        'total_unfulfillable_quantity': 'totalUnfulfillableQuantity',
        'customer_damaged_quantity': 'customerDamagedQuantity',
        'warehouse_damaged_quantity': 'warehouseDamagedQuantity',
        'distributor_damaged_quantity': 'distributorDamagedQuantity',
        'carrier_damaged_quantity': 'carrierDamagedQuantity',
        'defective_quantity': 'defectiveQuantity',
        'expired_quantity': 'expiredQuantity'
    }

    def __init__(self, total_unfulfillable_quantity=None, customer_damaged_quantity=None, warehouse_damaged_quantity=None, distributor_damaged_quantity=None, carrier_damaged_quantity=None, defective_quantity=None, expired_quantity=None):  # noqa: E501
        """UnfulfillableQuantity - a model defined in Swagger"""  # noqa: E501
        self._total_unfulfillable_quantity = None
        self._customer_damaged_quantity = None
        self._warehouse_damaged_quantity = None
        self._distributor_damaged_quantity = None
        self._carrier_damaged_quantity = None
        self._defective_quantity = None
        self._expired_quantity = None
        self.discriminator = None
        if total_unfulfillable_quantity is not None:
            self.total_unfulfillable_quantity = total_unfulfillable_quantity
        if customer_damaged_quantity is not None:
            self.customer_damaged_quantity = customer_damaged_quantity
        if warehouse_damaged_quantity is not None:
            self.warehouse_damaged_quantity = warehouse_damaged_quantity
        if distributor_damaged_quantity is not None:
            self.distributor_damaged_quantity = distributor_damaged_quantity
        if carrier_damaged_quantity is not None:
            self.carrier_damaged_quantity = carrier_damaged_quantity
        if defective_quantity is not None:
            self.defective_quantity = defective_quantity
        if expired_quantity is not None:
            self.expired_quantity = expired_quantity

    @property
    def total_unfulfillable_quantity(self):
        """Gets the total_unfulfillable_quantity of this UnfulfillableQuantity.  # noqa: E501

        The total number of units in Amazon's fulfillment network in unsellable condition.  # noqa: E501

        :return: The total_unfulfillable_quantity of this UnfulfillableQuantity.  # noqa: E501
        :rtype: int
        """
        return self._total_unfulfillable_quantity

    @total_unfulfillable_quantity.setter
    def total_unfulfillable_quantity(self, total_unfulfillable_quantity):
        """Sets the total_unfulfillable_quantity of this UnfulfillableQuantity.

        The total number of units in Amazon's fulfillment network in unsellable condition.  # noqa: E501

        :param total_unfulfillable_quantity: The total_unfulfillable_quantity of this UnfulfillableQuantity.  # noqa: E501
        :type: int
        """

        self._total_unfulfillable_quantity = total_unfulfillable_quantity

    @property
    def customer_damaged_quantity(self):
        """Gets the customer_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501

        The number of units in customer damaged disposition.  # noqa: E501

        :return: The customer_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501
        :rtype: int
        """
        return self._customer_damaged_quantity

    @customer_damaged_quantity.setter
    def customer_damaged_quantity(self, customer_damaged_quantity):
        """Sets the customer_damaged_quantity of this UnfulfillableQuantity.

        The number of units in customer damaged disposition.  # noqa: E501

        :param customer_damaged_quantity: The customer_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501
        :type: int
        """

        self._customer_damaged_quantity = customer_damaged_quantity

    @property
    def warehouse_damaged_quantity(self):
        """Gets the warehouse_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501

        The number of units in warehouse damaged disposition.  # noqa: E501

        :return: The warehouse_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_damaged_quantity

    @warehouse_damaged_quantity.setter
    def warehouse_damaged_quantity(self, warehouse_damaged_quantity):
        """Sets the warehouse_damaged_quantity of this UnfulfillableQuantity.

        The number of units in warehouse damaged disposition.  # noqa: E501

        :param warehouse_damaged_quantity: The warehouse_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501
        :type: int
        """

        self._warehouse_damaged_quantity = warehouse_damaged_quantity

    @property
    def distributor_damaged_quantity(self):
        """Gets the distributor_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501

        The number of units in distributor damaged disposition.  # noqa: E501

        :return: The distributor_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501
        :rtype: int
        """
        return self._distributor_damaged_quantity

    @distributor_damaged_quantity.setter
    def distributor_damaged_quantity(self, distributor_damaged_quantity):
        """Sets the distributor_damaged_quantity of this UnfulfillableQuantity.

        The number of units in distributor damaged disposition.  # noqa: E501

        :param distributor_damaged_quantity: The distributor_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501
        :type: int
        """

        self._distributor_damaged_quantity = distributor_damaged_quantity

    @property
    def carrier_damaged_quantity(self):
        """Gets the carrier_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501

        The number of units in carrier damaged disposition.  # noqa: E501

        :return: The carrier_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501
        :rtype: int
        """
        return self._carrier_damaged_quantity

    @carrier_damaged_quantity.setter
    def carrier_damaged_quantity(self, carrier_damaged_quantity):
        """Sets the carrier_damaged_quantity of this UnfulfillableQuantity.

        The number of units in carrier damaged disposition.  # noqa: E501

        :param carrier_damaged_quantity: The carrier_damaged_quantity of this UnfulfillableQuantity.  # noqa: E501
        :type: int
        """

        self._carrier_damaged_quantity = carrier_damaged_quantity

    @property
    def defective_quantity(self):
        """Gets the defective_quantity of this UnfulfillableQuantity.  # noqa: E501

        The number of units in defective disposition.  # noqa: E501

        :return: The defective_quantity of this UnfulfillableQuantity.  # noqa: E501
        :rtype: int
        """
        return self._defective_quantity

    @defective_quantity.setter
    def defective_quantity(self, defective_quantity):
        """Sets the defective_quantity of this UnfulfillableQuantity.

        The number of units in defective disposition.  # noqa: E501

        :param defective_quantity: The defective_quantity of this UnfulfillableQuantity.  # noqa: E501
        :type: int
        """

        self._defective_quantity = defective_quantity

    @property
    def expired_quantity(self):
        """Gets the expired_quantity of this UnfulfillableQuantity.  # noqa: E501

        The number of units in expired disposition.  # noqa: E501

        :return: The expired_quantity of this UnfulfillableQuantity.  # noqa: E501
        :rtype: int
        """
        return self._expired_quantity

    @expired_quantity.setter
    def expired_quantity(self, expired_quantity):
        """Sets the expired_quantity of this UnfulfillableQuantity.

        The number of units in expired disposition.  # noqa: E501

        :param expired_quantity: The expired_quantity of this UnfulfillableQuantity.  # noqa: E501
        :type: int
        """

        self._expired_quantity = expired_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnfulfillableQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnfulfillableQuantity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
