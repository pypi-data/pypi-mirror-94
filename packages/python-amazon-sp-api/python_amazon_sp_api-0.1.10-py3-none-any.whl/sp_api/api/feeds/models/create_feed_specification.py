# coding: utf-8

"""
    Selling Partner API for Feeds

    The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.  # noqa: E501

    OpenAPI spec version: 2020-09-04
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateFeedSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feed_type': 'str',
        'marketplace_ids': 'list[str]',
        'input_feed_document_id': 'str',
        'feed_options': 'FeedOptions'
    }

    attribute_map = {
        'feed_type': 'feedType',
        'marketplace_ids': 'marketplaceIds',
        'input_feed_document_id': 'inputFeedDocumentId',
        'feed_options': 'feedOptions'
    }

    def __init__(self, feed_type=None, marketplace_ids=None, input_feed_document_id=None, feed_options=None):  # noqa: E501
        """CreateFeedSpecification - a model defined in Swagger"""  # noqa: E501
        self._feed_type = None
        self._marketplace_ids = None
        self._input_feed_document_id = None
        self._feed_options = None
        self.discriminator = None
        self.feed_type = feed_type
        self.marketplace_ids = marketplace_ids
        self.input_feed_document_id = input_feed_document_id
        if feed_options is not None:
            self.feed_options = feed_options

    @property
    def feed_type(self):
        """Gets the feed_type of this CreateFeedSpecification.  # noqa: E501

        The feed type.  # noqa: E501

        :return: The feed_type of this CreateFeedSpecification.  # noqa: E501
        :rtype: str
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this CreateFeedSpecification.

        The feed type.  # noqa: E501

        :param feed_type: The feed_type of this CreateFeedSpecification.  # noqa: E501
        :type: str
        """
        if feed_type is None:
            raise ValueError("Invalid value for `feed_type`, must not be `None`")  # noqa: E501

        self._feed_type = feed_type

    @property
    def marketplace_ids(self):
        """Gets the marketplace_ids of this CreateFeedSpecification.  # noqa: E501

        A list of identifiers for marketplaces that you want the feed to be applied to.  # noqa: E501

        :return: The marketplace_ids of this CreateFeedSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._marketplace_ids

    @marketplace_ids.setter
    def marketplace_ids(self, marketplace_ids):
        """Sets the marketplace_ids of this CreateFeedSpecification.

        A list of identifiers for marketplaces that you want the feed to be applied to.  # noqa: E501

        :param marketplace_ids: The marketplace_ids of this CreateFeedSpecification.  # noqa: E501
        :type: list[str]
        """
        if marketplace_ids is None:
            raise ValueError("Invalid value for `marketplace_ids`, must not be `None`")  # noqa: E501

        self._marketplace_ids = marketplace_ids

    @property
    def input_feed_document_id(self):
        """Gets the input_feed_document_id of this CreateFeedSpecification.  # noqa: E501

        The document identifier returned by the createFeedDocument operation. Encrypt and upload the feed document contents before calling the createFeed operation.  # noqa: E501

        :return: The input_feed_document_id of this CreateFeedSpecification.  # noqa: E501
        :rtype: str
        """
        return self._input_feed_document_id

    @input_feed_document_id.setter
    def input_feed_document_id(self, input_feed_document_id):
        """Sets the input_feed_document_id of this CreateFeedSpecification.

        The document identifier returned by the createFeedDocument operation. Encrypt and upload the feed document contents before calling the createFeed operation.  # noqa: E501

        :param input_feed_document_id: The input_feed_document_id of this CreateFeedSpecification.  # noqa: E501
        :type: str
        """
        if input_feed_document_id is None:
            raise ValueError("Invalid value for `input_feed_document_id`, must not be `None`")  # noqa: E501

        self._input_feed_document_id = input_feed_document_id

    @property
    def feed_options(self):
        """Gets the feed_options of this CreateFeedSpecification.  # noqa: E501


        :return: The feed_options of this CreateFeedSpecification.  # noqa: E501
        :rtype: FeedOptions
        """
        return self._feed_options

    @feed_options.setter
    def feed_options(self, feed_options):
        """Sets the feed_options of this CreateFeedSpecification.


        :param feed_options: The feed_options of this CreateFeedSpecification.  # noqa: E501
        :type: FeedOptions
        """

        self._feed_options = feed_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFeedSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFeedSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
