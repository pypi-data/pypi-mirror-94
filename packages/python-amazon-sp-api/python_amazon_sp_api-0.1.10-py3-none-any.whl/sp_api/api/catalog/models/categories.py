# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Categories(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_category_id': 'str',
        'product_category_name': 'str',
        'parent': 'object'
    }

    attribute_map = {
        'product_category_id': 'ProductCategoryId',
        'product_category_name': 'ProductCategoryName',
        'parent': 'parent'
    }

    def __init__(self, product_category_id=None, product_category_name=None, parent=None):  # noqa: E501
        """Categories - a model defined in Swagger"""  # noqa: E501
        self._product_category_id = None
        self._product_category_name = None
        self._parent = None
        self.discriminator = None
        if product_category_id is not None:
            self.product_category_id = product_category_id
        if product_category_name is not None:
            self.product_category_name = product_category_name
        if parent is not None:
            self.parent = parent

    @property
    def product_category_id(self):
        """Gets the product_category_id of this Categories.  # noqa: E501

        The identifier for the product category (or browse node).  # noqa: E501

        :return: The product_category_id of this Categories.  # noqa: E501
        :rtype: str
        """
        return self._product_category_id

    @product_category_id.setter
    def product_category_id(self, product_category_id):
        """Sets the product_category_id of this Categories.

        The identifier for the product category (or browse node).  # noqa: E501

        :param product_category_id: The product_category_id of this Categories.  # noqa: E501
        :type: str
        """

        self._product_category_id = product_category_id

    @property
    def product_category_name(self):
        """Gets the product_category_name of this Categories.  # noqa: E501

        The name of the product category (or browse node).  # noqa: E501

        :return: The product_category_name of this Categories.  # noqa: E501
        :rtype: str
        """
        return self._product_category_name

    @product_category_name.setter
    def product_category_name(self, product_category_name):
        """Sets the product_category_name of this Categories.

        The name of the product category (or browse node).  # noqa: E501

        :param product_category_name: The product_category_name of this Categories.  # noqa: E501
        :type: str
        """

        self._product_category_name = product_category_name

    @property
    def parent(self):
        """Gets the parent of this Categories.  # noqa: E501

        The parent product category.  # noqa: E501

        :return: The parent of this Categories.  # noqa: E501
        :rtype: object
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Categories.

        The parent product category.  # noqa: E501

        :param parent: The parent of this Categories.  # noqa: E501
        :type: object
        """

        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Categories, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Categories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
