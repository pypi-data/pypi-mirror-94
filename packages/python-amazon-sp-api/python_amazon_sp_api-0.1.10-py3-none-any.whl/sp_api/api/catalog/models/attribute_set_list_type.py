# coding: utf-8

"""
    Selling Partner API for Catalog Items

    The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AttributeSetListType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actor': 'list[str]',
        'artist': 'list[str]',
        'aspect_ratio': 'str',
        'audience_rating': 'str',
        'author': 'list[str]',
        'back_finding': 'str',
        'band_material_type': 'str',
        'binding': 'str',
        'bluray_region': 'str',
        'brand': 'str',
        'cero_age_rating': 'str',
        'chain_type': 'str',
        'clasp_type': 'str',
        'color': 'str',
        'cpu_manufacturer': 'str',
        'cpu_speed': 'DecimalWithUnits',
        'cpu_type': 'str',
        'creator': 'list[CreatorType]',
        'department': 'str',
        'director': 'list[str]',
        'display_size': 'DecimalWithUnits',
        'edition': 'str',
        'episode_sequence': 'str',
        'esrb_age_rating': 'str',
        'feature': 'list[str]',
        'flavor': 'str',
        'format': 'list[str]',
        'gem_type': 'list[str]',
        'genre': 'str',
        'golf_club_flex': 'str',
        'golf_club_loft': 'DecimalWithUnits',
        'hand_orientation': 'str',
        'hard_disk_interface': 'str',
        'hard_disk_size': 'DecimalWithUnits',
        'hardware_platform': 'str',
        'hazardous_material_type': 'str',
        'item_dimensions': 'DimensionType',
        'is_adult_product': 'bool',
        'is_autographed': 'bool',
        'is_eligible_for_trade_in': 'bool',
        'is_memorabilia': 'bool',
        'issues_per_year': 'str',
        'item_part_number': 'str',
        'label': 'str',
        'languages': 'list[LanguageType]',
        'legal_disclaimer': 'str',
        'list_price': 'Price',
        'manufacturer': 'str',
        'manufacturer_maximum_age': 'DecimalWithUnits',
        'manufacturer_minimum_age': 'DecimalWithUnits',
        'manufacturer_parts_warranty_description': 'str',
        'material_type': 'list[str]',
        'maximum_resolution': 'DecimalWithUnits',
        'media_type': 'list[str]',
        'metal_stamp': 'str',
        'metal_type': 'str',
        'model': 'str',
        'number_of_discs': 'int',
        'number_of_issues': 'int',
        'number_of_items': 'int',
        'number_of_pages': 'int',
        'number_of_tracks': 'int',
        'operating_system': 'list[str]',
        'optical_zoom': 'DecimalWithUnits',
        'package_dimensions': 'DimensionType',
        'package_quantity': 'int',
        'part_number': 'str',
        'pegi_rating': 'str',
        'platform': 'list[str]',
        'processor_count': 'int',
        'product_group': 'str',
        'product_type_name': 'str',
        'product_type_subcategory': 'str',
        'publication_date': 'str',
        'publisher': 'str',
        'region_code': 'str',
        'release_date': 'str',
        'ring_size': 'str',
        'running_time': 'DecimalWithUnits',
        'shaft_material': 'str',
        'scent': 'str',
        'season_sequence': 'str',
        'seikodo_product_code': 'str',
        'size': 'str',
        'size_per_pearl': 'str',
        'small_image': 'Image',
        'studio': 'str',
        'subscription_length': 'DecimalWithUnits',
        'system_memory_size': 'DecimalWithUnits',
        'system_memory_type': 'str',
        'theatrical_release_date': 'str',
        'title': 'str',
        'total_diamond_weight': 'DecimalWithUnits',
        'total_gem_weight': 'DecimalWithUnits',
        'warranty': 'str',
        'weee_tax_value': 'Price'
    }

    attribute_map = {
        'actor': 'Actor',
        'artist': 'Artist',
        'aspect_ratio': 'AspectRatio',
        'audience_rating': 'AudienceRating',
        'author': 'Author',
        'back_finding': 'BackFinding',
        'band_material_type': 'BandMaterialType',
        'binding': 'Binding',
        'bluray_region': 'BlurayRegion',
        'brand': 'Brand',
        'cero_age_rating': 'CeroAgeRating',
        'chain_type': 'ChainType',
        'clasp_type': 'ClaspType',
        'color': 'Color',
        'cpu_manufacturer': 'CpuManufacturer',
        'cpu_speed': 'CpuSpeed',
        'cpu_type': 'CpuType',
        'creator': 'Creator',
        'department': 'Department',
        'director': 'Director',
        'display_size': 'DisplaySize',
        'edition': 'Edition',
        'episode_sequence': 'EpisodeSequence',
        'esrb_age_rating': 'EsrbAgeRating',
        'feature': 'Feature',
        'flavor': 'Flavor',
        'format': 'Format',
        'gem_type': 'GemType',
        'genre': 'Genre',
        'golf_club_flex': 'GolfClubFlex',
        'golf_club_loft': 'GolfClubLoft',
        'hand_orientation': 'HandOrientation',
        'hard_disk_interface': 'HardDiskInterface',
        'hard_disk_size': 'HardDiskSize',
        'hardware_platform': 'HardwarePlatform',
        'hazardous_material_type': 'HazardousMaterialType',
        'item_dimensions': 'ItemDimensions',
        'is_adult_product': 'IsAdultProduct',
        'is_autographed': 'IsAutographed',
        'is_eligible_for_trade_in': 'IsEligibleForTradeIn',
        'is_memorabilia': 'IsMemorabilia',
        'issues_per_year': 'IssuesPerYear',
        'item_part_number': 'ItemPartNumber',
        'label': 'Label',
        'languages': 'Languages',
        'legal_disclaimer': 'LegalDisclaimer',
        'list_price': 'ListPrice',
        'manufacturer': 'Manufacturer',
        'manufacturer_maximum_age': 'ManufacturerMaximumAge',
        'manufacturer_minimum_age': 'ManufacturerMinimumAge',
        'manufacturer_parts_warranty_description': 'ManufacturerPartsWarrantyDescription',
        'material_type': 'MaterialType',
        'maximum_resolution': 'MaximumResolution',
        'media_type': 'MediaType',
        'metal_stamp': 'MetalStamp',
        'metal_type': 'MetalType',
        'model': 'Model',
        'number_of_discs': 'NumberOfDiscs',
        'number_of_issues': 'NumberOfIssues',
        'number_of_items': 'NumberOfItems',
        'number_of_pages': 'NumberOfPages',
        'number_of_tracks': 'NumberOfTracks',
        'operating_system': 'OperatingSystem',
        'optical_zoom': 'OpticalZoom',
        'package_dimensions': 'PackageDimensions',
        'package_quantity': 'PackageQuantity',
        'part_number': 'PartNumber',
        'pegi_rating': 'PegiRating',
        'platform': 'Platform',
        'processor_count': 'ProcessorCount',
        'product_group': 'ProductGroup',
        'product_type_name': 'ProductTypeName',
        'product_type_subcategory': 'ProductTypeSubcategory',
        'publication_date': 'PublicationDate',
        'publisher': 'Publisher',
        'region_code': 'RegionCode',
        'release_date': 'ReleaseDate',
        'ring_size': 'RingSize',
        'running_time': 'RunningTime',
        'shaft_material': 'ShaftMaterial',
        'scent': 'Scent',
        'season_sequence': 'SeasonSequence',
        'seikodo_product_code': 'SeikodoProductCode',
        'size': 'Size',
        'size_per_pearl': 'SizePerPearl',
        'small_image': 'SmallImage',
        'studio': 'Studio',
        'subscription_length': 'SubscriptionLength',
        'system_memory_size': 'SystemMemorySize',
        'system_memory_type': 'SystemMemoryType',
        'theatrical_release_date': 'TheatricalReleaseDate',
        'title': 'Title',
        'total_diamond_weight': 'TotalDiamondWeight',
        'total_gem_weight': 'TotalGemWeight',
        'warranty': 'Warranty',
        'weee_tax_value': 'WeeeTaxValue'
    }

    def __init__(self, actor=None, artist=None, aspect_ratio=None, audience_rating=None, author=None, back_finding=None, band_material_type=None, binding=None, bluray_region=None, brand=None, cero_age_rating=None, chain_type=None, clasp_type=None, color=None, cpu_manufacturer=None, cpu_speed=None, cpu_type=None, creator=None, department=None, director=None, display_size=None, edition=None, episode_sequence=None, esrb_age_rating=None, feature=None, flavor=None, format=None, gem_type=None, genre=None, golf_club_flex=None, golf_club_loft=None, hand_orientation=None, hard_disk_interface=None, hard_disk_size=None, hardware_platform=None, hazardous_material_type=None, item_dimensions=None, is_adult_product=None, is_autographed=None, is_eligible_for_trade_in=None, is_memorabilia=None, issues_per_year=None, item_part_number=None, label=None, languages=None, legal_disclaimer=None, list_price=None, manufacturer=None, manufacturer_maximum_age=None, manufacturer_minimum_age=None, manufacturer_parts_warranty_description=None, material_type=None, maximum_resolution=None, media_type=None, metal_stamp=None, metal_type=None, model=None, number_of_discs=None, number_of_issues=None, number_of_items=None, number_of_pages=None, number_of_tracks=None, operating_system=None, optical_zoom=None, package_dimensions=None, package_quantity=None, part_number=None, pegi_rating=None, platform=None, processor_count=None, product_group=None, product_type_name=None, product_type_subcategory=None, publication_date=None, publisher=None, region_code=None, release_date=None, ring_size=None, running_time=None, shaft_material=None, scent=None, season_sequence=None, seikodo_product_code=None, size=None, size_per_pearl=None, small_image=None, studio=None, subscription_length=None, system_memory_size=None, system_memory_type=None, theatrical_release_date=None, title=None, total_diamond_weight=None, total_gem_weight=None, warranty=None, weee_tax_value=None):  # noqa: E501
        """AttributeSetListType - a model defined in Swagger"""  # noqa: E501
        self._actor = None
        self._artist = None
        self._aspect_ratio = None
        self._audience_rating = None
        self._author = None
        self._back_finding = None
        self._band_material_type = None
        self._binding = None
        self._bluray_region = None
        self._brand = None
        self._cero_age_rating = None
        self._chain_type = None
        self._clasp_type = None
        self._color = None
        self._cpu_manufacturer = None
        self._cpu_speed = None
        self._cpu_type = None
        self._creator = None
        self._department = None
        self._director = None
        self._display_size = None
        self._edition = None
        self._episode_sequence = None
        self._esrb_age_rating = None
        self._feature = None
        self._flavor = None
        self._format = None
        self._gem_type = None
        self._genre = None
        self._golf_club_flex = None
        self._golf_club_loft = None
        self._hand_orientation = None
        self._hard_disk_interface = None
        self._hard_disk_size = None
        self._hardware_platform = None
        self._hazardous_material_type = None
        self._item_dimensions = None
        self._is_adult_product = None
        self._is_autographed = None
        self._is_eligible_for_trade_in = None
        self._is_memorabilia = None
        self._issues_per_year = None
        self._item_part_number = None
        self._label = None
        self._languages = None
        self._legal_disclaimer = None
        self._list_price = None
        self._manufacturer = None
        self._manufacturer_maximum_age = None
        self._manufacturer_minimum_age = None
        self._manufacturer_parts_warranty_description = None
        self._material_type = None
        self._maximum_resolution = None
        self._media_type = None
        self._metal_stamp = None
        self._metal_type = None
        self._model = None
        self._number_of_discs = None
        self._number_of_issues = None
        self._number_of_items = None
        self._number_of_pages = None
        self._number_of_tracks = None
        self._operating_system = None
        self._optical_zoom = None
        self._package_dimensions = None
        self._package_quantity = None
        self._part_number = None
        self._pegi_rating = None
        self._platform = None
        self._processor_count = None
        self._product_group = None
        self._product_type_name = None
        self._product_type_subcategory = None
        self._publication_date = None
        self._publisher = None
        self._region_code = None
        self._release_date = None
        self._ring_size = None
        self._running_time = None
        self._shaft_material = None
        self._scent = None
        self._season_sequence = None
        self._seikodo_product_code = None
        self._size = None
        self._size_per_pearl = None
        self._small_image = None
        self._studio = None
        self._subscription_length = None
        self._system_memory_size = None
        self._system_memory_type = None
        self._theatrical_release_date = None
        self._title = None
        self._total_diamond_weight = None
        self._total_gem_weight = None
        self._warranty = None
        self._weee_tax_value = None
        self.discriminator = None
        if actor is not None:
            self.actor = actor
        if artist is not None:
            self.artist = artist
        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if audience_rating is not None:
            self.audience_rating = audience_rating
        if author is not None:
            self.author = author
        if back_finding is not None:
            self.back_finding = back_finding
        if band_material_type is not None:
            self.band_material_type = band_material_type
        if binding is not None:
            self.binding = binding
        if bluray_region is not None:
            self.bluray_region = bluray_region
        if brand is not None:
            self.brand = brand
        if cero_age_rating is not None:
            self.cero_age_rating = cero_age_rating
        if chain_type is not None:
            self.chain_type = chain_type
        if clasp_type is not None:
            self.clasp_type = clasp_type
        if color is not None:
            self.color = color
        if cpu_manufacturer is not None:
            self.cpu_manufacturer = cpu_manufacturer
        if cpu_speed is not None:
            self.cpu_speed = cpu_speed
        if cpu_type is not None:
            self.cpu_type = cpu_type
        if creator is not None:
            self.creator = creator
        if department is not None:
            self.department = department
        if director is not None:
            self.director = director
        if display_size is not None:
            self.display_size = display_size
        if edition is not None:
            self.edition = edition
        if episode_sequence is not None:
            self.episode_sequence = episode_sequence
        if esrb_age_rating is not None:
            self.esrb_age_rating = esrb_age_rating
        if feature is not None:
            self.feature = feature
        if flavor is not None:
            self.flavor = flavor
        if format is not None:
            self.format = format
        if gem_type is not None:
            self.gem_type = gem_type
        if genre is not None:
            self.genre = genre
        if golf_club_flex is not None:
            self.golf_club_flex = golf_club_flex
        if golf_club_loft is not None:
            self.golf_club_loft = golf_club_loft
        if hand_orientation is not None:
            self.hand_orientation = hand_orientation
        if hard_disk_interface is not None:
            self.hard_disk_interface = hard_disk_interface
        if hard_disk_size is not None:
            self.hard_disk_size = hard_disk_size
        if hardware_platform is not None:
            self.hardware_platform = hardware_platform
        if hazardous_material_type is not None:
            self.hazardous_material_type = hazardous_material_type
        if item_dimensions is not None:
            self.item_dimensions = item_dimensions
        if is_adult_product is not None:
            self.is_adult_product = is_adult_product
        if is_autographed is not None:
            self.is_autographed = is_autographed
        if is_eligible_for_trade_in is not None:
            self.is_eligible_for_trade_in = is_eligible_for_trade_in
        if is_memorabilia is not None:
            self.is_memorabilia = is_memorabilia
        if issues_per_year is not None:
            self.issues_per_year = issues_per_year
        if item_part_number is not None:
            self.item_part_number = item_part_number
        if label is not None:
            self.label = label
        if languages is not None:
            self.languages = languages
        if legal_disclaimer is not None:
            self.legal_disclaimer = legal_disclaimer
        if list_price is not None:
            self.list_price = list_price
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if manufacturer_maximum_age is not None:
            self.manufacturer_maximum_age = manufacturer_maximum_age
        if manufacturer_minimum_age is not None:
            self.manufacturer_minimum_age = manufacturer_minimum_age
        if manufacturer_parts_warranty_description is not None:
            self.manufacturer_parts_warranty_description = manufacturer_parts_warranty_description
        if material_type is not None:
            self.material_type = material_type
        if maximum_resolution is not None:
            self.maximum_resolution = maximum_resolution
        if media_type is not None:
            self.media_type = media_type
        if metal_stamp is not None:
            self.metal_stamp = metal_stamp
        if metal_type is not None:
            self.metal_type = metal_type
        if model is not None:
            self.model = model
        if number_of_discs is not None:
            self.number_of_discs = number_of_discs
        if number_of_issues is not None:
            self.number_of_issues = number_of_issues
        if number_of_items is not None:
            self.number_of_items = number_of_items
        if number_of_pages is not None:
            self.number_of_pages = number_of_pages
        if number_of_tracks is not None:
            self.number_of_tracks = number_of_tracks
        if operating_system is not None:
            self.operating_system = operating_system
        if optical_zoom is not None:
            self.optical_zoom = optical_zoom
        if package_dimensions is not None:
            self.package_dimensions = package_dimensions
        if package_quantity is not None:
            self.package_quantity = package_quantity
        if part_number is not None:
            self.part_number = part_number
        if pegi_rating is not None:
            self.pegi_rating = pegi_rating
        if platform is not None:
            self.platform = platform
        if processor_count is not None:
            self.processor_count = processor_count
        if product_group is not None:
            self.product_group = product_group
        if product_type_name is not None:
            self.product_type_name = product_type_name
        if product_type_subcategory is not None:
            self.product_type_subcategory = product_type_subcategory
        if publication_date is not None:
            self.publication_date = publication_date
        if publisher is not None:
            self.publisher = publisher
        if region_code is not None:
            self.region_code = region_code
        if release_date is not None:
            self.release_date = release_date
        if ring_size is not None:
            self.ring_size = ring_size
        if running_time is not None:
            self.running_time = running_time
        if shaft_material is not None:
            self.shaft_material = shaft_material
        if scent is not None:
            self.scent = scent
        if season_sequence is not None:
            self.season_sequence = season_sequence
        if seikodo_product_code is not None:
            self.seikodo_product_code = seikodo_product_code
        if size is not None:
            self.size = size
        if size_per_pearl is not None:
            self.size_per_pearl = size_per_pearl
        if small_image is not None:
            self.small_image = small_image
        if studio is not None:
            self.studio = studio
        if subscription_length is not None:
            self.subscription_length = subscription_length
        if system_memory_size is not None:
            self.system_memory_size = system_memory_size
        if system_memory_type is not None:
            self.system_memory_type = system_memory_type
        if theatrical_release_date is not None:
            self.theatrical_release_date = theatrical_release_date
        if title is not None:
            self.title = title
        if total_diamond_weight is not None:
            self.total_diamond_weight = total_diamond_weight
        if total_gem_weight is not None:
            self.total_gem_weight = total_gem_weight
        if warranty is not None:
            self.warranty = warranty
        if weee_tax_value is not None:
            self.weee_tax_value = weee_tax_value

    @property
    def actor(self):
        """Gets the actor of this AttributeSetListType.  # noqa: E501

        The actor attributes of the item.  # noqa: E501

        :return: The actor of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this AttributeSetListType.

        The actor attributes of the item.  # noqa: E501

        :param actor: The actor of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._actor = actor

    @property
    def artist(self):
        """Gets the artist of this AttributeSetListType.  # noqa: E501

        The artist attributes of the item.  # noqa: E501

        :return: The artist of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this AttributeSetListType.

        The artist attributes of the item.  # noqa: E501

        :param artist: The artist of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._artist = artist

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this AttributeSetListType.  # noqa: E501

        The aspect ratio attribute of the item.  # noqa: E501

        :return: The aspect_ratio of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this AttributeSetListType.

        The aspect ratio attribute of the item.  # noqa: E501

        :param aspect_ratio: The aspect_ratio of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def audience_rating(self):
        """Gets the audience_rating of this AttributeSetListType.  # noqa: E501

        The audience rating attribute of the item.  # noqa: E501

        :return: The audience_rating of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._audience_rating

    @audience_rating.setter
    def audience_rating(self, audience_rating):
        """Sets the audience_rating of this AttributeSetListType.

        The audience rating attribute of the item.  # noqa: E501

        :param audience_rating: The audience_rating of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._audience_rating = audience_rating

    @property
    def author(self):
        """Gets the author of this AttributeSetListType.  # noqa: E501

        The author attributes of the item.  # noqa: E501

        :return: The author of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this AttributeSetListType.

        The author attributes of the item.  # noqa: E501

        :param author: The author of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._author = author

    @property
    def back_finding(self):
        """Gets the back_finding of this AttributeSetListType.  # noqa: E501

        The back finding attribute of the item.  # noqa: E501

        :return: The back_finding of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._back_finding

    @back_finding.setter
    def back_finding(self, back_finding):
        """Sets the back_finding of this AttributeSetListType.

        The back finding attribute of the item.  # noqa: E501

        :param back_finding: The back_finding of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._back_finding = back_finding

    @property
    def band_material_type(self):
        """Gets the band_material_type of this AttributeSetListType.  # noqa: E501

        The band material type attribute of the item.  # noqa: E501

        :return: The band_material_type of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._band_material_type

    @band_material_type.setter
    def band_material_type(self, band_material_type):
        """Sets the band_material_type of this AttributeSetListType.

        The band material type attribute of the item.  # noqa: E501

        :param band_material_type: The band_material_type of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._band_material_type = band_material_type

    @property
    def binding(self):
        """Gets the binding of this AttributeSetListType.  # noqa: E501

        The binding attribute of the item.  # noqa: E501

        :return: The binding of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._binding

    @binding.setter
    def binding(self, binding):
        """Sets the binding of this AttributeSetListType.

        The binding attribute of the item.  # noqa: E501

        :param binding: The binding of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._binding = binding

    @property
    def bluray_region(self):
        """Gets the bluray_region of this AttributeSetListType.  # noqa: E501

        The Bluray region attribute of the item.  # noqa: E501

        :return: The bluray_region of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._bluray_region

    @bluray_region.setter
    def bluray_region(self, bluray_region):
        """Sets the bluray_region of this AttributeSetListType.

        The Bluray region attribute of the item.  # noqa: E501

        :param bluray_region: The bluray_region of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._bluray_region = bluray_region

    @property
    def brand(self):
        """Gets the brand of this AttributeSetListType.  # noqa: E501

        The brand attribute of the item.  # noqa: E501

        :return: The brand of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this AttributeSetListType.

        The brand attribute of the item.  # noqa: E501

        :param brand: The brand of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def cero_age_rating(self):
        """Gets the cero_age_rating of this AttributeSetListType.  # noqa: E501

        The CERO age rating attribute of the item.  # noqa: E501

        :return: The cero_age_rating of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._cero_age_rating

    @cero_age_rating.setter
    def cero_age_rating(self, cero_age_rating):
        """Sets the cero_age_rating of this AttributeSetListType.

        The CERO age rating attribute of the item.  # noqa: E501

        :param cero_age_rating: The cero_age_rating of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._cero_age_rating = cero_age_rating

    @property
    def chain_type(self):
        """Gets the chain_type of this AttributeSetListType.  # noqa: E501

        The chain type attribute of the item.  # noqa: E501

        :return: The chain_type of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._chain_type

    @chain_type.setter
    def chain_type(self, chain_type):
        """Sets the chain_type of this AttributeSetListType.

        The chain type attribute of the item.  # noqa: E501

        :param chain_type: The chain_type of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._chain_type = chain_type

    @property
    def clasp_type(self):
        """Gets the clasp_type of this AttributeSetListType.  # noqa: E501

        The clasp type attribute of the item.  # noqa: E501

        :return: The clasp_type of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._clasp_type

    @clasp_type.setter
    def clasp_type(self, clasp_type):
        """Sets the clasp_type of this AttributeSetListType.

        The clasp type attribute of the item.  # noqa: E501

        :param clasp_type: The clasp_type of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._clasp_type = clasp_type

    @property
    def color(self):
        """Gets the color of this AttributeSetListType.  # noqa: E501

        The color attribute of the item.  # noqa: E501

        :return: The color of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AttributeSetListType.

        The color attribute of the item.  # noqa: E501

        :param color: The color of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def cpu_manufacturer(self):
        """Gets the cpu_manufacturer of this AttributeSetListType.  # noqa: E501

        The CPU manufacturer attribute of the item.  # noqa: E501

        :return: The cpu_manufacturer of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._cpu_manufacturer

    @cpu_manufacturer.setter
    def cpu_manufacturer(self, cpu_manufacturer):
        """Sets the cpu_manufacturer of this AttributeSetListType.

        The CPU manufacturer attribute of the item.  # noqa: E501

        :param cpu_manufacturer: The cpu_manufacturer of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._cpu_manufacturer = cpu_manufacturer

    @property
    def cpu_speed(self):
        """Gets the cpu_speed of this AttributeSetListType.  # noqa: E501


        :return: The cpu_speed of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._cpu_speed

    @cpu_speed.setter
    def cpu_speed(self, cpu_speed):
        """Sets the cpu_speed of this AttributeSetListType.


        :param cpu_speed: The cpu_speed of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._cpu_speed = cpu_speed

    @property
    def cpu_type(self):
        """Gets the cpu_type of this AttributeSetListType.  # noqa: E501

        The CPU type attribute of the item.  # noqa: E501

        :return: The cpu_type of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._cpu_type

    @cpu_type.setter
    def cpu_type(self, cpu_type):
        """Sets the cpu_type of this AttributeSetListType.

        The CPU type attribute of the item.  # noqa: E501

        :param cpu_type: The cpu_type of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._cpu_type = cpu_type

    @property
    def creator(self):
        """Gets the creator of this AttributeSetListType.  # noqa: E501

        The creator attributes of the item.  # noqa: E501

        :return: The creator of this AttributeSetListType.  # noqa: E501
        :rtype: list[CreatorType]
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this AttributeSetListType.

        The creator attributes of the item.  # noqa: E501

        :param creator: The creator of this AttributeSetListType.  # noqa: E501
        :type: list[CreatorType]
        """

        self._creator = creator

    @property
    def department(self):
        """Gets the department of this AttributeSetListType.  # noqa: E501

        The department attribute of the item.  # noqa: E501

        :return: The department of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this AttributeSetListType.

        The department attribute of the item.  # noqa: E501

        :param department: The department of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def director(self):
        """Gets the director of this AttributeSetListType.  # noqa: E501

        The director attributes of the item.  # noqa: E501

        :return: The director of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._director

    @director.setter
    def director(self, director):
        """Sets the director of this AttributeSetListType.

        The director attributes of the item.  # noqa: E501

        :param director: The director of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._director = director

    @property
    def display_size(self):
        """Gets the display_size of this AttributeSetListType.  # noqa: E501


        :return: The display_size of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._display_size

    @display_size.setter
    def display_size(self, display_size):
        """Sets the display_size of this AttributeSetListType.


        :param display_size: The display_size of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._display_size = display_size

    @property
    def edition(self):
        """Gets the edition of this AttributeSetListType.  # noqa: E501

        The edition attribute of the item.  # noqa: E501

        :return: The edition of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this AttributeSetListType.

        The edition attribute of the item.  # noqa: E501

        :param edition: The edition of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._edition = edition

    @property
    def episode_sequence(self):
        """Gets the episode_sequence of this AttributeSetListType.  # noqa: E501

        The episode sequence attribute of the item.  # noqa: E501

        :return: The episode_sequence of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._episode_sequence

    @episode_sequence.setter
    def episode_sequence(self, episode_sequence):
        """Sets the episode_sequence of this AttributeSetListType.

        The episode sequence attribute of the item.  # noqa: E501

        :param episode_sequence: The episode_sequence of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._episode_sequence = episode_sequence

    @property
    def esrb_age_rating(self):
        """Gets the esrb_age_rating of this AttributeSetListType.  # noqa: E501

        The ESRB age rating attribute of the item.  # noqa: E501

        :return: The esrb_age_rating of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._esrb_age_rating

    @esrb_age_rating.setter
    def esrb_age_rating(self, esrb_age_rating):
        """Sets the esrb_age_rating of this AttributeSetListType.

        The ESRB age rating attribute of the item.  # noqa: E501

        :param esrb_age_rating: The esrb_age_rating of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._esrb_age_rating = esrb_age_rating

    @property
    def feature(self):
        """Gets the feature of this AttributeSetListType.  # noqa: E501

        The feature attributes of the item  # noqa: E501

        :return: The feature of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this AttributeSetListType.

        The feature attributes of the item  # noqa: E501

        :param feature: The feature of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._feature = feature

    @property
    def flavor(self):
        """Gets the flavor of this AttributeSetListType.  # noqa: E501

        The flavor attribute of the item.  # noqa: E501

        :return: The flavor of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this AttributeSetListType.

        The flavor attribute of the item.  # noqa: E501

        :param flavor: The flavor of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    @property
    def format(self):
        """Gets the format of this AttributeSetListType.  # noqa: E501

        The format attributes of the item.  # noqa: E501

        :return: The format of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AttributeSetListType.

        The format attributes of the item.  # noqa: E501

        :param format: The format of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._format = format

    @property
    def gem_type(self):
        """Gets the gem_type of this AttributeSetListType.  # noqa: E501

        The gem type attributes of the item.  # noqa: E501

        :return: The gem_type of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._gem_type

    @gem_type.setter
    def gem_type(self, gem_type):
        """Sets the gem_type of this AttributeSetListType.

        The gem type attributes of the item.  # noqa: E501

        :param gem_type: The gem_type of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._gem_type = gem_type

    @property
    def genre(self):
        """Gets the genre of this AttributeSetListType.  # noqa: E501

        The genre attribute of the item.  # noqa: E501

        :return: The genre of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this AttributeSetListType.

        The genre attribute of the item.  # noqa: E501

        :param genre: The genre of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._genre = genre

    @property
    def golf_club_flex(self):
        """Gets the golf_club_flex of this AttributeSetListType.  # noqa: E501

        The golf club flex attribute of the item.  # noqa: E501

        :return: The golf_club_flex of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._golf_club_flex

    @golf_club_flex.setter
    def golf_club_flex(self, golf_club_flex):
        """Sets the golf_club_flex of this AttributeSetListType.

        The golf club flex attribute of the item.  # noqa: E501

        :param golf_club_flex: The golf_club_flex of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._golf_club_flex = golf_club_flex

    @property
    def golf_club_loft(self):
        """Gets the golf_club_loft of this AttributeSetListType.  # noqa: E501


        :return: The golf_club_loft of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._golf_club_loft

    @golf_club_loft.setter
    def golf_club_loft(self, golf_club_loft):
        """Sets the golf_club_loft of this AttributeSetListType.


        :param golf_club_loft: The golf_club_loft of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._golf_club_loft = golf_club_loft

    @property
    def hand_orientation(self):
        """Gets the hand_orientation of this AttributeSetListType.  # noqa: E501

        The hand orientation attribute of the item.  # noqa: E501

        :return: The hand_orientation of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._hand_orientation

    @hand_orientation.setter
    def hand_orientation(self, hand_orientation):
        """Sets the hand_orientation of this AttributeSetListType.

        The hand orientation attribute of the item.  # noqa: E501

        :param hand_orientation: The hand_orientation of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._hand_orientation = hand_orientation

    @property
    def hard_disk_interface(self):
        """Gets the hard_disk_interface of this AttributeSetListType.  # noqa: E501

        The hard disk interface attribute of the item.  # noqa: E501

        :return: The hard_disk_interface of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._hard_disk_interface

    @hard_disk_interface.setter
    def hard_disk_interface(self, hard_disk_interface):
        """Sets the hard_disk_interface of this AttributeSetListType.

        The hard disk interface attribute of the item.  # noqa: E501

        :param hard_disk_interface: The hard_disk_interface of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._hard_disk_interface = hard_disk_interface

    @property
    def hard_disk_size(self):
        """Gets the hard_disk_size of this AttributeSetListType.  # noqa: E501


        :return: The hard_disk_size of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._hard_disk_size

    @hard_disk_size.setter
    def hard_disk_size(self, hard_disk_size):
        """Sets the hard_disk_size of this AttributeSetListType.


        :param hard_disk_size: The hard_disk_size of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._hard_disk_size = hard_disk_size

    @property
    def hardware_platform(self):
        """Gets the hardware_platform of this AttributeSetListType.  # noqa: E501

        The hardware platform attribute of the item.  # noqa: E501

        :return: The hardware_platform of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._hardware_platform

    @hardware_platform.setter
    def hardware_platform(self, hardware_platform):
        """Sets the hardware_platform of this AttributeSetListType.

        The hardware platform attribute of the item.  # noqa: E501

        :param hardware_platform: The hardware_platform of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._hardware_platform = hardware_platform

    @property
    def hazardous_material_type(self):
        """Gets the hazardous_material_type of this AttributeSetListType.  # noqa: E501

        The hazardous material type attribute of the item.  # noqa: E501

        :return: The hazardous_material_type of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._hazardous_material_type

    @hazardous_material_type.setter
    def hazardous_material_type(self, hazardous_material_type):
        """Sets the hazardous_material_type of this AttributeSetListType.

        The hazardous material type attribute of the item.  # noqa: E501

        :param hazardous_material_type: The hazardous_material_type of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._hazardous_material_type = hazardous_material_type

    @property
    def item_dimensions(self):
        """Gets the item_dimensions of this AttributeSetListType.  # noqa: E501


        :return: The item_dimensions of this AttributeSetListType.  # noqa: E501
        :rtype: DimensionType
        """
        return self._item_dimensions

    @item_dimensions.setter
    def item_dimensions(self, item_dimensions):
        """Sets the item_dimensions of this AttributeSetListType.


        :param item_dimensions: The item_dimensions of this AttributeSetListType.  # noqa: E501
        :type: DimensionType
        """

        self._item_dimensions = item_dimensions

    @property
    def is_adult_product(self):
        """Gets the is_adult_product of this AttributeSetListType.  # noqa: E501

        The adult product attribute of the item.  # noqa: E501

        :return: The is_adult_product of this AttributeSetListType.  # noqa: E501
        :rtype: bool
        """
        return self._is_adult_product

    @is_adult_product.setter
    def is_adult_product(self, is_adult_product):
        """Sets the is_adult_product of this AttributeSetListType.

        The adult product attribute of the item.  # noqa: E501

        :param is_adult_product: The is_adult_product of this AttributeSetListType.  # noqa: E501
        :type: bool
        """

        self._is_adult_product = is_adult_product

    @property
    def is_autographed(self):
        """Gets the is_autographed of this AttributeSetListType.  # noqa: E501

        The autographed attribute of the item.  # noqa: E501

        :return: The is_autographed of this AttributeSetListType.  # noqa: E501
        :rtype: bool
        """
        return self._is_autographed

    @is_autographed.setter
    def is_autographed(self, is_autographed):
        """Sets the is_autographed of this AttributeSetListType.

        The autographed attribute of the item.  # noqa: E501

        :param is_autographed: The is_autographed of this AttributeSetListType.  # noqa: E501
        :type: bool
        """

        self._is_autographed = is_autographed

    @property
    def is_eligible_for_trade_in(self):
        """Gets the is_eligible_for_trade_in of this AttributeSetListType.  # noqa: E501

        The is eligible for trade in attribute of the item.  # noqa: E501

        :return: The is_eligible_for_trade_in of this AttributeSetListType.  # noqa: E501
        :rtype: bool
        """
        return self._is_eligible_for_trade_in

    @is_eligible_for_trade_in.setter
    def is_eligible_for_trade_in(self, is_eligible_for_trade_in):
        """Sets the is_eligible_for_trade_in of this AttributeSetListType.

        The is eligible for trade in attribute of the item.  # noqa: E501

        :param is_eligible_for_trade_in: The is_eligible_for_trade_in of this AttributeSetListType.  # noqa: E501
        :type: bool
        """

        self._is_eligible_for_trade_in = is_eligible_for_trade_in

    @property
    def is_memorabilia(self):
        """Gets the is_memorabilia of this AttributeSetListType.  # noqa: E501

        The is memorabilia attribute of the item.  # noqa: E501

        :return: The is_memorabilia of this AttributeSetListType.  # noqa: E501
        :rtype: bool
        """
        return self._is_memorabilia

    @is_memorabilia.setter
    def is_memorabilia(self, is_memorabilia):
        """Sets the is_memorabilia of this AttributeSetListType.

        The is memorabilia attribute of the item.  # noqa: E501

        :param is_memorabilia: The is_memorabilia of this AttributeSetListType.  # noqa: E501
        :type: bool
        """

        self._is_memorabilia = is_memorabilia

    @property
    def issues_per_year(self):
        """Gets the issues_per_year of this AttributeSetListType.  # noqa: E501

        The issues per year attribute of the item.  # noqa: E501

        :return: The issues_per_year of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._issues_per_year

    @issues_per_year.setter
    def issues_per_year(self, issues_per_year):
        """Sets the issues_per_year of this AttributeSetListType.

        The issues per year attribute of the item.  # noqa: E501

        :param issues_per_year: The issues_per_year of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._issues_per_year = issues_per_year

    @property
    def item_part_number(self):
        """Gets the item_part_number of this AttributeSetListType.  # noqa: E501

        The item part number attribute of the item.  # noqa: E501

        :return: The item_part_number of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._item_part_number

    @item_part_number.setter
    def item_part_number(self, item_part_number):
        """Sets the item_part_number of this AttributeSetListType.

        The item part number attribute of the item.  # noqa: E501

        :param item_part_number: The item_part_number of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._item_part_number = item_part_number

    @property
    def label(self):
        """Gets the label of this AttributeSetListType.  # noqa: E501

        The label attribute of the item.  # noqa: E501

        :return: The label of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AttributeSetListType.

        The label attribute of the item.  # noqa: E501

        :param label: The label of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def languages(self):
        """Gets the languages of this AttributeSetListType.  # noqa: E501

        The languages attribute of the item.  # noqa: E501

        :return: The languages of this AttributeSetListType.  # noqa: E501
        :rtype: list[LanguageType]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this AttributeSetListType.

        The languages attribute of the item.  # noqa: E501

        :param languages: The languages of this AttributeSetListType.  # noqa: E501
        :type: list[LanguageType]
        """

        self._languages = languages

    @property
    def legal_disclaimer(self):
        """Gets the legal_disclaimer of this AttributeSetListType.  # noqa: E501

        The legal disclaimer attribute of the item.  # noqa: E501

        :return: The legal_disclaimer of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._legal_disclaimer

    @legal_disclaimer.setter
    def legal_disclaimer(self, legal_disclaimer):
        """Sets the legal_disclaimer of this AttributeSetListType.

        The legal disclaimer attribute of the item.  # noqa: E501

        :param legal_disclaimer: The legal_disclaimer of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._legal_disclaimer = legal_disclaimer

    @property
    def list_price(self):
        """Gets the list_price of this AttributeSetListType.  # noqa: E501


        :return: The list_price of this AttributeSetListType.  # noqa: E501
        :rtype: Price
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this AttributeSetListType.


        :param list_price: The list_price of this AttributeSetListType.  # noqa: E501
        :type: Price
        """

        self._list_price = list_price

    @property
    def manufacturer(self):
        """Gets the manufacturer of this AttributeSetListType.  # noqa: E501

        The manufacturer attribute of the item.  # noqa: E501

        :return: The manufacturer of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this AttributeSetListType.

        The manufacturer attribute of the item.  # noqa: E501

        :param manufacturer: The manufacturer of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_maximum_age(self):
        """Gets the manufacturer_maximum_age of this AttributeSetListType.  # noqa: E501


        :return: The manufacturer_maximum_age of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._manufacturer_maximum_age

    @manufacturer_maximum_age.setter
    def manufacturer_maximum_age(self, manufacturer_maximum_age):
        """Sets the manufacturer_maximum_age of this AttributeSetListType.


        :param manufacturer_maximum_age: The manufacturer_maximum_age of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._manufacturer_maximum_age = manufacturer_maximum_age

    @property
    def manufacturer_minimum_age(self):
        """Gets the manufacturer_minimum_age of this AttributeSetListType.  # noqa: E501


        :return: The manufacturer_minimum_age of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._manufacturer_minimum_age

    @manufacturer_minimum_age.setter
    def manufacturer_minimum_age(self, manufacturer_minimum_age):
        """Sets the manufacturer_minimum_age of this AttributeSetListType.


        :param manufacturer_minimum_age: The manufacturer_minimum_age of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._manufacturer_minimum_age = manufacturer_minimum_age

    @property
    def manufacturer_parts_warranty_description(self):
        """Gets the manufacturer_parts_warranty_description of this AttributeSetListType.  # noqa: E501

        The manufacturer parts warranty description attribute of the item.  # noqa: E501

        :return: The manufacturer_parts_warranty_description of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_parts_warranty_description

    @manufacturer_parts_warranty_description.setter
    def manufacturer_parts_warranty_description(self, manufacturer_parts_warranty_description):
        """Sets the manufacturer_parts_warranty_description of this AttributeSetListType.

        The manufacturer parts warranty description attribute of the item.  # noqa: E501

        :param manufacturer_parts_warranty_description: The manufacturer_parts_warranty_description of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._manufacturer_parts_warranty_description = manufacturer_parts_warranty_description

    @property
    def material_type(self):
        """Gets the material_type of this AttributeSetListType.  # noqa: E501

        The material type attributes of the item.  # noqa: E501

        :return: The material_type of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._material_type

    @material_type.setter
    def material_type(self, material_type):
        """Sets the material_type of this AttributeSetListType.

        The material type attributes of the item.  # noqa: E501

        :param material_type: The material_type of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._material_type = material_type

    @property
    def maximum_resolution(self):
        """Gets the maximum_resolution of this AttributeSetListType.  # noqa: E501


        :return: The maximum_resolution of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._maximum_resolution

    @maximum_resolution.setter
    def maximum_resolution(self, maximum_resolution):
        """Sets the maximum_resolution of this AttributeSetListType.


        :param maximum_resolution: The maximum_resolution of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._maximum_resolution = maximum_resolution

    @property
    def media_type(self):
        """Gets the media_type of this AttributeSetListType.  # noqa: E501

        The media type attributes of the item.  # noqa: E501

        :return: The media_type of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this AttributeSetListType.

        The media type attributes of the item.  # noqa: E501

        :param media_type: The media_type of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._media_type = media_type

    @property
    def metal_stamp(self):
        """Gets the metal_stamp of this AttributeSetListType.  # noqa: E501

        The metal stamp attribute of the item.  # noqa: E501

        :return: The metal_stamp of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._metal_stamp

    @metal_stamp.setter
    def metal_stamp(self, metal_stamp):
        """Sets the metal_stamp of this AttributeSetListType.

        The metal stamp attribute of the item.  # noqa: E501

        :param metal_stamp: The metal_stamp of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._metal_stamp = metal_stamp

    @property
    def metal_type(self):
        """Gets the metal_type of this AttributeSetListType.  # noqa: E501

        The metal type attribute of the item.  # noqa: E501

        :return: The metal_type of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._metal_type

    @metal_type.setter
    def metal_type(self, metal_type):
        """Sets the metal_type of this AttributeSetListType.

        The metal type attribute of the item.  # noqa: E501

        :param metal_type: The metal_type of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._metal_type = metal_type

    @property
    def model(self):
        """Gets the model of this AttributeSetListType.  # noqa: E501

        The model attribute of the item.  # noqa: E501

        :return: The model of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this AttributeSetListType.

        The model attribute of the item.  # noqa: E501

        :param model: The model of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def number_of_discs(self):
        """Gets the number_of_discs of this AttributeSetListType.  # noqa: E501

        The number of discs attribute of the item.  # noqa: E501

        :return: The number_of_discs of this AttributeSetListType.  # noqa: E501
        :rtype: int
        """
        return self._number_of_discs

    @number_of_discs.setter
    def number_of_discs(self, number_of_discs):
        """Sets the number_of_discs of this AttributeSetListType.

        The number of discs attribute of the item.  # noqa: E501

        :param number_of_discs: The number_of_discs of this AttributeSetListType.  # noqa: E501
        :type: int
        """

        self._number_of_discs = number_of_discs

    @property
    def number_of_issues(self):
        """Gets the number_of_issues of this AttributeSetListType.  # noqa: E501

        The number of issues attribute of the item.  # noqa: E501

        :return: The number_of_issues of this AttributeSetListType.  # noqa: E501
        :rtype: int
        """
        return self._number_of_issues

    @number_of_issues.setter
    def number_of_issues(self, number_of_issues):
        """Sets the number_of_issues of this AttributeSetListType.

        The number of issues attribute of the item.  # noqa: E501

        :param number_of_issues: The number_of_issues of this AttributeSetListType.  # noqa: E501
        :type: int
        """

        self._number_of_issues = number_of_issues

    @property
    def number_of_items(self):
        """Gets the number_of_items of this AttributeSetListType.  # noqa: E501

        The number of items attribute of the item.  # noqa: E501

        :return: The number_of_items of this AttributeSetListType.  # noqa: E501
        :rtype: int
        """
        return self._number_of_items

    @number_of_items.setter
    def number_of_items(self, number_of_items):
        """Sets the number_of_items of this AttributeSetListType.

        The number of items attribute of the item.  # noqa: E501

        :param number_of_items: The number_of_items of this AttributeSetListType.  # noqa: E501
        :type: int
        """

        self._number_of_items = number_of_items

    @property
    def number_of_pages(self):
        """Gets the number_of_pages of this AttributeSetListType.  # noqa: E501

        The number of pages attribute of the item.  # noqa: E501

        :return: The number_of_pages of this AttributeSetListType.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pages

    @number_of_pages.setter
    def number_of_pages(self, number_of_pages):
        """Sets the number_of_pages of this AttributeSetListType.

        The number of pages attribute of the item.  # noqa: E501

        :param number_of_pages: The number_of_pages of this AttributeSetListType.  # noqa: E501
        :type: int
        """

        self._number_of_pages = number_of_pages

    @property
    def number_of_tracks(self):
        """Gets the number_of_tracks of this AttributeSetListType.  # noqa: E501

        The number of tracks attribute of the item.  # noqa: E501

        :return: The number_of_tracks of this AttributeSetListType.  # noqa: E501
        :rtype: int
        """
        return self._number_of_tracks

    @number_of_tracks.setter
    def number_of_tracks(self, number_of_tracks):
        """Sets the number_of_tracks of this AttributeSetListType.

        The number of tracks attribute of the item.  # noqa: E501

        :param number_of_tracks: The number_of_tracks of this AttributeSetListType.  # noqa: E501
        :type: int
        """

        self._number_of_tracks = number_of_tracks

    @property
    def operating_system(self):
        """Gets the operating_system of this AttributeSetListType.  # noqa: E501

        The operating system attributes of the item.  # noqa: E501

        :return: The operating_system of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this AttributeSetListType.

        The operating system attributes of the item.  # noqa: E501

        :param operating_system: The operating_system of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._operating_system = operating_system

    @property
    def optical_zoom(self):
        """Gets the optical_zoom of this AttributeSetListType.  # noqa: E501


        :return: The optical_zoom of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._optical_zoom

    @optical_zoom.setter
    def optical_zoom(self, optical_zoom):
        """Sets the optical_zoom of this AttributeSetListType.


        :param optical_zoom: The optical_zoom of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._optical_zoom = optical_zoom

    @property
    def package_dimensions(self):
        """Gets the package_dimensions of this AttributeSetListType.  # noqa: E501


        :return: The package_dimensions of this AttributeSetListType.  # noqa: E501
        :rtype: DimensionType
        """
        return self._package_dimensions

    @package_dimensions.setter
    def package_dimensions(self, package_dimensions):
        """Sets the package_dimensions of this AttributeSetListType.


        :param package_dimensions: The package_dimensions of this AttributeSetListType.  # noqa: E501
        :type: DimensionType
        """

        self._package_dimensions = package_dimensions

    @property
    def package_quantity(self):
        """Gets the package_quantity of this AttributeSetListType.  # noqa: E501

        The package quantity attribute of the item.  # noqa: E501

        :return: The package_quantity of this AttributeSetListType.  # noqa: E501
        :rtype: int
        """
        return self._package_quantity

    @package_quantity.setter
    def package_quantity(self, package_quantity):
        """Sets the package_quantity of this AttributeSetListType.

        The package quantity attribute of the item.  # noqa: E501

        :param package_quantity: The package_quantity of this AttributeSetListType.  # noqa: E501
        :type: int
        """

        self._package_quantity = package_quantity

    @property
    def part_number(self):
        """Gets the part_number of this AttributeSetListType.  # noqa: E501

        The part number attribute of the item.  # noqa: E501

        :return: The part_number of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this AttributeSetListType.

        The part number attribute of the item.  # noqa: E501

        :param part_number: The part_number of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def pegi_rating(self):
        """Gets the pegi_rating of this AttributeSetListType.  # noqa: E501

        The PEGI rating attribute of the item.  # noqa: E501

        :return: The pegi_rating of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._pegi_rating

    @pegi_rating.setter
    def pegi_rating(self, pegi_rating):
        """Sets the pegi_rating of this AttributeSetListType.

        The PEGI rating attribute of the item.  # noqa: E501

        :param pegi_rating: The pegi_rating of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._pegi_rating = pegi_rating

    @property
    def platform(self):
        """Gets the platform of this AttributeSetListType.  # noqa: E501

        The platform attributes of the item.  # noqa: E501

        :return: The platform of this AttributeSetListType.  # noqa: E501
        :rtype: list[str]
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AttributeSetListType.

        The platform attributes of the item.  # noqa: E501

        :param platform: The platform of this AttributeSetListType.  # noqa: E501
        :type: list[str]
        """

        self._platform = platform

    @property
    def processor_count(self):
        """Gets the processor_count of this AttributeSetListType.  # noqa: E501

        The processor count attribute of the item.  # noqa: E501

        :return: The processor_count of this AttributeSetListType.  # noqa: E501
        :rtype: int
        """
        return self._processor_count

    @processor_count.setter
    def processor_count(self, processor_count):
        """Sets the processor_count of this AttributeSetListType.

        The processor count attribute of the item.  # noqa: E501

        :param processor_count: The processor_count of this AttributeSetListType.  # noqa: E501
        :type: int
        """

        self._processor_count = processor_count

    @property
    def product_group(self):
        """Gets the product_group of this AttributeSetListType.  # noqa: E501

        The product group attribute of the item.  # noqa: E501

        :return: The product_group of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._product_group

    @product_group.setter
    def product_group(self, product_group):
        """Sets the product_group of this AttributeSetListType.

        The product group attribute of the item.  # noqa: E501

        :param product_group: The product_group of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._product_group = product_group

    @property
    def product_type_name(self):
        """Gets the product_type_name of this AttributeSetListType.  # noqa: E501

        The product type name attribute of the item.  # noqa: E501

        :return: The product_type_name of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._product_type_name

    @product_type_name.setter
    def product_type_name(self, product_type_name):
        """Sets the product_type_name of this AttributeSetListType.

        The product type name attribute of the item.  # noqa: E501

        :param product_type_name: The product_type_name of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._product_type_name = product_type_name

    @property
    def product_type_subcategory(self):
        """Gets the product_type_subcategory of this AttributeSetListType.  # noqa: E501

        The product type subcategory attribute of the item.  # noqa: E501

        :return: The product_type_subcategory of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._product_type_subcategory

    @product_type_subcategory.setter
    def product_type_subcategory(self, product_type_subcategory):
        """Sets the product_type_subcategory of this AttributeSetListType.

        The product type subcategory attribute of the item.  # noqa: E501

        :param product_type_subcategory: The product_type_subcategory of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._product_type_subcategory = product_type_subcategory

    @property
    def publication_date(self):
        """Gets the publication_date of this AttributeSetListType.  # noqa: E501

        The publication date attribute of the item.  # noqa: E501

        :return: The publication_date of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this AttributeSetListType.

        The publication date attribute of the item.  # noqa: E501

        :param publication_date: The publication_date of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._publication_date = publication_date

    @property
    def publisher(self):
        """Gets the publisher of this AttributeSetListType.  # noqa: E501

        The publisher attribute of the item.  # noqa: E501

        :return: The publisher of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this AttributeSetListType.

        The publisher attribute of the item.  # noqa: E501

        :param publisher: The publisher of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def region_code(self):
        """Gets the region_code of this AttributeSetListType.  # noqa: E501

        The region code attribute of the item.  # noqa: E501

        :return: The region_code of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this AttributeSetListType.

        The region code attribute of the item.  # noqa: E501

        :param region_code: The region_code of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def release_date(self):
        """Gets the release_date of this AttributeSetListType.  # noqa: E501

        The release date attribute of the item.  # noqa: E501

        :return: The release_date of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this AttributeSetListType.

        The release date attribute of the item.  # noqa: E501

        :param release_date: The release_date of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._release_date = release_date

    @property
    def ring_size(self):
        """Gets the ring_size of this AttributeSetListType.  # noqa: E501

        The ring size attribute of the item.  # noqa: E501

        :return: The ring_size of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._ring_size

    @ring_size.setter
    def ring_size(self, ring_size):
        """Sets the ring_size of this AttributeSetListType.

        The ring size attribute of the item.  # noqa: E501

        :param ring_size: The ring_size of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._ring_size = ring_size

    @property
    def running_time(self):
        """Gets the running_time of this AttributeSetListType.  # noqa: E501


        :return: The running_time of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._running_time

    @running_time.setter
    def running_time(self, running_time):
        """Sets the running_time of this AttributeSetListType.


        :param running_time: The running_time of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._running_time = running_time

    @property
    def shaft_material(self):
        """Gets the shaft_material of this AttributeSetListType.  # noqa: E501

        The shaft material attribute of the item.  # noqa: E501

        :return: The shaft_material of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._shaft_material

    @shaft_material.setter
    def shaft_material(self, shaft_material):
        """Sets the shaft_material of this AttributeSetListType.

        The shaft material attribute of the item.  # noqa: E501

        :param shaft_material: The shaft_material of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._shaft_material = shaft_material

    @property
    def scent(self):
        """Gets the scent of this AttributeSetListType.  # noqa: E501

        The scent attribute of the item.  # noqa: E501

        :return: The scent of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._scent

    @scent.setter
    def scent(self, scent):
        """Sets the scent of this AttributeSetListType.

        The scent attribute of the item.  # noqa: E501

        :param scent: The scent of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._scent = scent

    @property
    def season_sequence(self):
        """Gets the season_sequence of this AttributeSetListType.  # noqa: E501

        The season sequence attribute of the item.  # noqa: E501

        :return: The season_sequence of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._season_sequence

    @season_sequence.setter
    def season_sequence(self, season_sequence):
        """Sets the season_sequence of this AttributeSetListType.

        The season sequence attribute of the item.  # noqa: E501

        :param season_sequence: The season_sequence of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._season_sequence = season_sequence

    @property
    def seikodo_product_code(self):
        """Gets the seikodo_product_code of this AttributeSetListType.  # noqa: E501

        The Seikodo product code attribute of the item.  # noqa: E501

        :return: The seikodo_product_code of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._seikodo_product_code

    @seikodo_product_code.setter
    def seikodo_product_code(self, seikodo_product_code):
        """Sets the seikodo_product_code of this AttributeSetListType.

        The Seikodo product code attribute of the item.  # noqa: E501

        :param seikodo_product_code: The seikodo_product_code of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._seikodo_product_code = seikodo_product_code

    @property
    def size(self):
        """Gets the size of this AttributeSetListType.  # noqa: E501

        The size attribute of the item.  # noqa: E501

        :return: The size of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AttributeSetListType.

        The size attribute of the item.  # noqa: E501

        :param size: The size of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def size_per_pearl(self):
        """Gets the size_per_pearl of this AttributeSetListType.  # noqa: E501

        The size per pearl attribute of the item.  # noqa: E501

        :return: The size_per_pearl of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._size_per_pearl

    @size_per_pearl.setter
    def size_per_pearl(self, size_per_pearl):
        """Sets the size_per_pearl of this AttributeSetListType.

        The size per pearl attribute of the item.  # noqa: E501

        :param size_per_pearl: The size_per_pearl of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._size_per_pearl = size_per_pearl

    @property
    def small_image(self):
        """Gets the small_image of this AttributeSetListType.  # noqa: E501


        :return: The small_image of this AttributeSetListType.  # noqa: E501
        :rtype: Image
        """
        return self._small_image

    @small_image.setter
    def small_image(self, small_image):
        """Sets the small_image of this AttributeSetListType.


        :param small_image: The small_image of this AttributeSetListType.  # noqa: E501
        :type: Image
        """

        self._small_image = small_image

    @property
    def studio(self):
        """Gets the studio of this AttributeSetListType.  # noqa: E501

        The studio attribute of the item.  # noqa: E501

        :return: The studio of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._studio

    @studio.setter
    def studio(self, studio):
        """Sets the studio of this AttributeSetListType.

        The studio attribute of the item.  # noqa: E501

        :param studio: The studio of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._studio = studio

    @property
    def subscription_length(self):
        """Gets the subscription_length of this AttributeSetListType.  # noqa: E501


        :return: The subscription_length of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._subscription_length

    @subscription_length.setter
    def subscription_length(self, subscription_length):
        """Sets the subscription_length of this AttributeSetListType.


        :param subscription_length: The subscription_length of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._subscription_length = subscription_length

    @property
    def system_memory_size(self):
        """Gets the system_memory_size of this AttributeSetListType.  # noqa: E501


        :return: The system_memory_size of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._system_memory_size

    @system_memory_size.setter
    def system_memory_size(self, system_memory_size):
        """Sets the system_memory_size of this AttributeSetListType.


        :param system_memory_size: The system_memory_size of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._system_memory_size = system_memory_size

    @property
    def system_memory_type(self):
        """Gets the system_memory_type of this AttributeSetListType.  # noqa: E501

        The system memory type attribute of the item.  # noqa: E501

        :return: The system_memory_type of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._system_memory_type

    @system_memory_type.setter
    def system_memory_type(self, system_memory_type):
        """Sets the system_memory_type of this AttributeSetListType.

        The system memory type attribute of the item.  # noqa: E501

        :param system_memory_type: The system_memory_type of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._system_memory_type = system_memory_type

    @property
    def theatrical_release_date(self):
        """Gets the theatrical_release_date of this AttributeSetListType.  # noqa: E501

        The theatrical release date attribute of the item.  # noqa: E501

        :return: The theatrical_release_date of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._theatrical_release_date

    @theatrical_release_date.setter
    def theatrical_release_date(self, theatrical_release_date):
        """Sets the theatrical_release_date of this AttributeSetListType.

        The theatrical release date attribute of the item.  # noqa: E501

        :param theatrical_release_date: The theatrical_release_date of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._theatrical_release_date = theatrical_release_date

    @property
    def title(self):
        """Gets the title of this AttributeSetListType.  # noqa: E501

        The title attribute of the item.  # noqa: E501

        :return: The title of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AttributeSetListType.

        The title attribute of the item.  # noqa: E501

        :param title: The title of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def total_diamond_weight(self):
        """Gets the total_diamond_weight of this AttributeSetListType.  # noqa: E501


        :return: The total_diamond_weight of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._total_diamond_weight

    @total_diamond_weight.setter
    def total_diamond_weight(self, total_diamond_weight):
        """Sets the total_diamond_weight of this AttributeSetListType.


        :param total_diamond_weight: The total_diamond_weight of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._total_diamond_weight = total_diamond_weight

    @property
    def total_gem_weight(self):
        """Gets the total_gem_weight of this AttributeSetListType.  # noqa: E501


        :return: The total_gem_weight of this AttributeSetListType.  # noqa: E501
        :rtype: DecimalWithUnits
        """
        return self._total_gem_weight

    @total_gem_weight.setter
    def total_gem_weight(self, total_gem_weight):
        """Sets the total_gem_weight of this AttributeSetListType.


        :param total_gem_weight: The total_gem_weight of this AttributeSetListType.  # noqa: E501
        :type: DecimalWithUnits
        """

        self._total_gem_weight = total_gem_weight

    @property
    def warranty(self):
        """Gets the warranty of this AttributeSetListType.  # noqa: E501

        The warranty attribute of the item.  # noqa: E501

        :return: The warranty of this AttributeSetListType.  # noqa: E501
        :rtype: str
        """
        return self._warranty

    @warranty.setter
    def warranty(self, warranty):
        """Sets the warranty of this AttributeSetListType.

        The warranty attribute of the item.  # noqa: E501

        :param warranty: The warranty of this AttributeSetListType.  # noqa: E501
        :type: str
        """

        self._warranty = warranty

    @property
    def weee_tax_value(self):
        """Gets the weee_tax_value of this AttributeSetListType.  # noqa: E501


        :return: The weee_tax_value of this AttributeSetListType.  # noqa: E501
        :rtype: Price
        """
        return self._weee_tax_value

    @weee_tax_value.setter
    def weee_tax_value(self, weee_tax_value):
        """Sets the weee_tax_value of this AttributeSetListType.


        :param weee_tax_value: The weee_tax_value of this AttributeSetListType.  # noqa: E501
        :type: Price
        """

        self._weee_tax_value = weee_tax_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttributeSetListType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributeSetListType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
