# ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# ---------------------------------------------------------

import sys
import inspect
import importlib
from enum import Enum
from typing import Union

from msrest.exceptions import HttpOperationError

from azure.ml.component._restclients.designer.exceptions import ComponentServiceError, ErrorResponseException
from azureml.exceptions._azureml_exception import UserErrorException
from azureml.exceptions import ExperimentExecutionException, ActivityFailedException


# The following usererrors are used to summarize different kinds of user errors in the dashboard.
# TODO: Refine all directly raised UserErrorException to several different kinds of exceptions.
class PipelineValidationError(UserErrorException):
    """
    PipelineComponent level validation error.
    """

    UNKNOWN = 'Unknown'
    # ModuleCycle error situation is: a cycle generated by a set of module nodes, like:
    # module1.input = module3.output
    # module2.input = module1.output
    # module3,input = module2.output
    MODULE_CYCLE = 'ModuleCycle'
    # PipelineRecursion error situation is: there is a loop between pipelines, like:
    # def pipeline1():
    #    pipeline2()
    # def pipeline2():
    #    pipeline1()
    PIPELINE_RECURSION = 'PipelineRecursion'

    AGGREGATED = 'Aggregated'

    def __init__(self, message, inner_exception=None, error_type=UNKNOWN):
        super().__init__(message)
        self.inner_exception = inner_exception
        self.error_type = error_type


class ComponentValidationError(UserErrorException):
    """
    Exception raised when the component validation fails.
    """

    UNKNOWN = 'Unknown'
    MISSING_INPUT = 'MissingInput'
    INVALID_INPUT = 'InvalidInput'
    MISSING_PARAMETER = 'MissingParameter'
    MISSING_RUNSETTING_PARAMETER = 'MissingRunSettingParameter'
    PARAMETER_TYPE_MISMATCH = 'ParameterTypeMismatch'
    INVALID_PARAMETER = 'InvalidParameter'
    INVALID_RUNSETTING_PARAMETER = 'InvalidRunSettingParameter'
    INVALID_DATASTORE_TYPE = 'InvalidDatastoreType'

    def __init__(self, message, inner_exception=None, error_type=UNKNOWN):
        super().__init__(message)
        self.inner_exception = inner_exception
        self.error_type = error_type


class UnexpectedKeywordError(UserErrorException):
    """Exception raised when an unexpected keyword parameter is provided in dynamic functions."""

    def __init__(self, func_name, keyword, keywords=None):
        message = "%s() got an unexpected keyword argument %r" % (func_name, keyword)
        message += ", valid keywords: %s." % ', '.join('%r' % key for key in keywords) if keywords else "."
        super().__init__(message)


class InvalidTargetSpecifiedError(UserErrorException):
    """Exception raised when an invalid target parameter is provided."""

    def __init__(self, target_name, message):
        error_message = "%s got an unexpected value. " % target_name
        error_message += message if message else None
        super().__init__(error_message)


class CustomerCodeError(UserErrorException):
    """Exception raised when user's code has errors."""
    def __init__(self, error_message, inner_exception=None,):
        msg = "There are some problems in user script, error message: {}".format(error_message)
        super(CustomerCodeError, self).__init__(msg, inner_exception=inner_exception)


class ErrorCategory(Enum):
    # This error indicates that the user provided data is incorrect and causes backend 40x exception
    MTUserError = 'MTUserError'
    SDKUserError = 'SDKUserError'  # This error indicates that the user provided parameter doesn't pass validation
    CustomerUserError = 'CustomerUserError'  # This error indicates that the user's code has errors

    MTError = 'MTError'  # This error indicates that backend has some problems
    InternalSDKError = 'InternalSDKError'  # This error indicates that our package has some problems
    ExternalSDKError = 'ExternalSDKError'  # This error indicates that some dependent packages has problems


def _is_func(frame, module, func_name):
    if frame is None:
        return False
    code = frame.f_code
    mod = importlib.import_module(module)
    return code.co_filename == inspect.getfile(mod) and code.co_name == func_name


def _is_dsl_pipeline_customer_code_error():
    """Check whether the error is raised by customer code in dsl.pipeline"""
    _, _, traceback = sys.exc_info()
    if traceback is None:
        return False
    while traceback.tb_next is not None:
        traceback = traceback.tb_next
    last_frame = traceback.tb_frame.f_back
    module, func_name = 'azure.ml.component._pipeline_component_definition_builder', 'wrapper_func'
    # Return True if the last frame of the traceback frame is construcing sub pipeline.
    return _is_func(last_frame, module, func_name)


def _is_wrong_func_call_traceback():
    """Check whether the error is raised due to wrong function call, including following scenarios:

    Unexpected keyword: f(unexpected=xx) for f()
    Too many positional argument: f(xx) for f()
    Repeated argument: f(a=1, a=2) for f(a)
    """
    _, _, traceback = sys.exc_info()
    # For such cases, the exception is called in the current frame, so it must not have a traceback.
    return traceback is not None and traceback.tb_next is None


def _is_user_error_from_exception_type(e: Union[Exception, None]):
    """Determine whether if an exception is user error from it's exception type."""
    # Connection error happens on user's network failure, should be user error
    if isinstance(e, ConnectionError):
        return True

    # UserErrorException and KeyboardInterrupt should be sdk user error
    if isinstance(e, (UserErrorException, KeyboardInterrupt)):
        return True


def get_error_category(e: Exception):
    # Sometimes we wrap a exception with another, eg: any exception happens when calling rest client will be wrapped
    # to a ServiceError. We need to check both current exception and it's cause to get the right category.
    if _is_user_error_from_exception_type(e) or _is_user_error_from_exception_type(e.__cause__):
        return ErrorCategory.SDKUserError
    if isinstance(e, CustomerCodeError):
        return ErrorCategory.CustomerUserError
    if _is_dsl_pipeline_customer_code_error():
        return ErrorCategory.CustomerUserError
    if isinstance(e, (ComponentServiceError, ErrorResponseException)):
        code = e.status_code if isinstance(e, ComponentServiceError) else e.response.status_code
        if str(code).startswith('40'):
            # Currently all the 400/401/403/404s are treated as UserErrors.
            # Maybe it could be refined in the future according to more detailed information.
            return ErrorCategory.MTUserError
        return ErrorCategory.MTError

    # HttpOperationError is the exception raised by APIs in other AzureML SDKs.
    if isinstance(e, HttpOperationError):
        if str(e.response.status_code).startswith('40'):
            return ErrorCategory.SDKUserError
        return ErrorCategory.ExternalSDKError

    # ActivityFailedException is raised when an run submitted by user failed;
    # ExperimentExecutionException is raised when an run's output streaming is interrupted by user.
    # So currently we treat these two exceptions as UserError.
    if isinstance(e, (ActivityFailedException, ExperimentExecutionException)):
        return ErrorCategory.CustomerUserError

    return ErrorCategory.InternalSDKError
