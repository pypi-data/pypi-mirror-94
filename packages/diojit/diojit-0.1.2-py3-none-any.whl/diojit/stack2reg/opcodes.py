import opcode
UNKNOWN_INSTR = object()
POP_TOP = opcode.opmap.get('POP_TOP', UNKNOWN_INSTR)
ROT_TWO = opcode.opmap.get('ROT_TWO', UNKNOWN_INSTR)
ROT_THREE = opcode.opmap.get('ROT_THREE', UNKNOWN_INSTR)
DUP_TOP = opcode.opmap.get('DUP_TOP', UNKNOWN_INSTR)
DUP_TOP_TWO = opcode.opmap.get('DUP_TOP_TWO', UNKNOWN_INSTR)
ROT_FOUR = opcode.opmap.get('ROT_FOUR', UNKNOWN_INSTR)
NOP = opcode.opmap.get('NOP', UNKNOWN_INSTR)
UNARY_POSITIVE = opcode.opmap.get('UNARY_POSITIVE', UNKNOWN_INSTR)
UNARY_NEGATIVE = opcode.opmap.get('UNARY_NEGATIVE', UNKNOWN_INSTR)
UNARY_NOT = opcode.opmap.get('UNARY_NOT', UNKNOWN_INSTR)
UNARY_INVERT = opcode.opmap.get('UNARY_INVERT', UNKNOWN_INSTR)
BINARY_MATRIX_MULTIPLY = opcode.opmap.get('BINARY_MATRIX_MULTIPLY', UNKNOWN_INSTR)
INPLACE_MATRIX_MULTIPLY = opcode.opmap.get('INPLACE_MATRIX_MULTIPLY', UNKNOWN_INSTR)
BINARY_POWER = opcode.opmap.get('BINARY_POWER', UNKNOWN_INSTR)
BINARY_MULTIPLY = opcode.opmap.get('BINARY_MULTIPLY', UNKNOWN_INSTR)
BINARY_MODULO = opcode.opmap.get('BINARY_MODULO', UNKNOWN_INSTR)
BINARY_ADD = opcode.opmap.get('BINARY_ADD', UNKNOWN_INSTR)
BINARY_SUBTRACT = opcode.opmap.get('BINARY_SUBTRACT', UNKNOWN_INSTR)
BINARY_SUBSCR = opcode.opmap.get('BINARY_SUBSCR', UNKNOWN_INSTR)
BINARY_FLOOR_DIVIDE = opcode.opmap.get('BINARY_FLOOR_DIVIDE', UNKNOWN_INSTR)
BINARY_TRUE_DIVIDE = opcode.opmap.get('BINARY_TRUE_DIVIDE', UNKNOWN_INSTR)
INPLACE_FLOOR_DIVIDE = opcode.opmap.get('INPLACE_FLOOR_DIVIDE', UNKNOWN_INSTR)
INPLACE_TRUE_DIVIDE = opcode.opmap.get('INPLACE_TRUE_DIVIDE', UNKNOWN_INSTR)
RERAISE = opcode.opmap.get('RERAISE', UNKNOWN_INSTR)
WITH_EXCEPT_START = opcode.opmap.get('WITH_EXCEPT_START', UNKNOWN_INSTR)
GET_AITER = opcode.opmap.get('GET_AITER', UNKNOWN_INSTR)
GET_ANEXT = opcode.opmap.get('GET_ANEXT', UNKNOWN_INSTR)
BEFORE_ASYNC_WITH = opcode.opmap.get('BEFORE_ASYNC_WITH', UNKNOWN_INSTR)
END_ASYNC_FOR = opcode.opmap.get('END_ASYNC_FOR', UNKNOWN_INSTR)
INPLACE_ADD = opcode.opmap.get('INPLACE_ADD', UNKNOWN_INSTR)
INPLACE_SUBTRACT = opcode.opmap.get('INPLACE_SUBTRACT', UNKNOWN_INSTR)
INPLACE_MULTIPLY = opcode.opmap.get('INPLACE_MULTIPLY', UNKNOWN_INSTR)
INPLACE_MODULO = opcode.opmap.get('INPLACE_MODULO', UNKNOWN_INSTR)
STORE_SUBSCR = opcode.opmap.get('STORE_SUBSCR', UNKNOWN_INSTR)
DELETE_SUBSCR = opcode.opmap.get('DELETE_SUBSCR', UNKNOWN_INSTR)
BINARY_LSHIFT = opcode.opmap.get('BINARY_LSHIFT', UNKNOWN_INSTR)
BINARY_RSHIFT = opcode.opmap.get('BINARY_RSHIFT', UNKNOWN_INSTR)
BINARY_AND = opcode.opmap.get('BINARY_AND', UNKNOWN_INSTR)
BINARY_XOR = opcode.opmap.get('BINARY_XOR', UNKNOWN_INSTR)
BINARY_OR = opcode.opmap.get('BINARY_OR', UNKNOWN_INSTR)
INPLACE_POWER = opcode.opmap.get('INPLACE_POWER', UNKNOWN_INSTR)
GET_ITER = opcode.opmap.get('GET_ITER', UNKNOWN_INSTR)
GET_YIELD_FROM_ITER = opcode.opmap.get('GET_YIELD_FROM_ITER', UNKNOWN_INSTR)
PRINT_EXPR = opcode.opmap.get('PRINT_EXPR', UNKNOWN_INSTR)
LOAD_BUILD_CLASS = opcode.opmap.get('LOAD_BUILD_CLASS', UNKNOWN_INSTR)
YIELD_FROM = opcode.opmap.get('YIELD_FROM', UNKNOWN_INSTR)
GET_AWAITABLE = opcode.opmap.get('GET_AWAITABLE', UNKNOWN_INSTR)
LOAD_ASSERTION_ERROR = opcode.opmap.get('LOAD_ASSERTION_ERROR', UNKNOWN_INSTR)
INPLACE_LSHIFT = opcode.opmap.get('INPLACE_LSHIFT', UNKNOWN_INSTR)
INPLACE_RSHIFT = opcode.opmap.get('INPLACE_RSHIFT', UNKNOWN_INSTR)
INPLACE_AND = opcode.opmap.get('INPLACE_AND', UNKNOWN_INSTR)
INPLACE_XOR = opcode.opmap.get('INPLACE_XOR', UNKNOWN_INSTR)
INPLACE_OR = opcode.opmap.get('INPLACE_OR', UNKNOWN_INSTR)
LIST_TO_TUPLE = opcode.opmap.get('LIST_TO_TUPLE', UNKNOWN_INSTR)
RETURN_VALUE = opcode.opmap.get('RETURN_VALUE', UNKNOWN_INSTR)
IMPORT_STAR = opcode.opmap.get('IMPORT_STAR', UNKNOWN_INSTR)
SETUP_ANNOTATIONS = opcode.opmap.get('SETUP_ANNOTATIONS', UNKNOWN_INSTR)
YIELD_VALUE = opcode.opmap.get('YIELD_VALUE', UNKNOWN_INSTR)
POP_BLOCK = opcode.opmap.get('POP_BLOCK', UNKNOWN_INSTR)
POP_EXCEPT = opcode.opmap.get('POP_EXCEPT', UNKNOWN_INSTR)
STORE_NAME = opcode.opmap.get('STORE_NAME', UNKNOWN_INSTR)
DELETE_NAME = opcode.opmap.get('DELETE_NAME', UNKNOWN_INSTR)
UNPACK_SEQUENCE = opcode.opmap.get('UNPACK_SEQUENCE', UNKNOWN_INSTR)
FOR_ITER = opcode.opmap.get('FOR_ITER', UNKNOWN_INSTR)
UNPACK_EX = opcode.opmap.get('UNPACK_EX', UNKNOWN_INSTR)
STORE_ATTR = opcode.opmap.get('STORE_ATTR', UNKNOWN_INSTR)
DELETE_ATTR = opcode.opmap.get('DELETE_ATTR', UNKNOWN_INSTR)
STORE_GLOBAL = opcode.opmap.get('STORE_GLOBAL', UNKNOWN_INSTR)
DELETE_GLOBAL = opcode.opmap.get('DELETE_GLOBAL', UNKNOWN_INSTR)
LOAD_CONST = opcode.opmap.get('LOAD_CONST', UNKNOWN_INSTR)
LOAD_NAME = opcode.opmap.get('LOAD_NAME', UNKNOWN_INSTR)
BUILD_TUPLE = opcode.opmap.get('BUILD_TUPLE', UNKNOWN_INSTR)
BUILD_LIST = opcode.opmap.get('BUILD_LIST', UNKNOWN_INSTR)
BUILD_SET = opcode.opmap.get('BUILD_SET', UNKNOWN_INSTR)
BUILD_MAP = opcode.opmap.get('BUILD_MAP', UNKNOWN_INSTR)
LOAD_ATTR = opcode.opmap.get('LOAD_ATTR', UNKNOWN_INSTR)
COMPARE_OP = opcode.opmap.get('COMPARE_OP', UNKNOWN_INSTR)
IMPORT_NAME = opcode.opmap.get('IMPORT_NAME', UNKNOWN_INSTR)
IMPORT_FROM = opcode.opmap.get('IMPORT_FROM', UNKNOWN_INSTR)
JUMP_FORWARD = opcode.opmap.get('JUMP_FORWARD', UNKNOWN_INSTR)
JUMP_IF_FALSE_OR_POP = opcode.opmap.get('JUMP_IF_FALSE_OR_POP', UNKNOWN_INSTR)
JUMP_IF_TRUE_OR_POP = opcode.opmap.get('JUMP_IF_TRUE_OR_POP', UNKNOWN_INSTR)
JUMP_ABSOLUTE = opcode.opmap.get('JUMP_ABSOLUTE', UNKNOWN_INSTR)
POP_JUMP_IF_FALSE = opcode.opmap.get('POP_JUMP_IF_FALSE', UNKNOWN_INSTR)
POP_JUMP_IF_TRUE = opcode.opmap.get('POP_JUMP_IF_TRUE', UNKNOWN_INSTR)
LOAD_GLOBAL = opcode.opmap.get('LOAD_GLOBAL', UNKNOWN_INSTR)
IS_OP = opcode.opmap.get('IS_OP', UNKNOWN_INSTR)
CONTAINS_OP = opcode.opmap.get('CONTAINS_OP', UNKNOWN_INSTR)
JUMP_IF_NOT_EXC_MATCH = opcode.opmap.get('JUMP_IF_NOT_EXC_MATCH', UNKNOWN_INSTR)
SETUP_FINALLY = opcode.opmap.get('SETUP_FINALLY', UNKNOWN_INSTR)
LOAD_FAST = opcode.opmap.get('LOAD_FAST', UNKNOWN_INSTR)
STORE_FAST = opcode.opmap.get('STORE_FAST', UNKNOWN_INSTR)
DELETE_FAST = opcode.opmap.get('DELETE_FAST', UNKNOWN_INSTR)
RAISE_VARARGS = opcode.opmap.get('RAISE_VARARGS', UNKNOWN_INSTR)
CALL_FUNCTION = opcode.opmap.get('CALL_FUNCTION', UNKNOWN_INSTR)
MAKE_FUNCTION = opcode.opmap.get('MAKE_FUNCTION', UNKNOWN_INSTR)
BUILD_SLICE = opcode.opmap.get('BUILD_SLICE', UNKNOWN_INSTR)
LOAD_CLOSURE = opcode.opmap.get('LOAD_CLOSURE', UNKNOWN_INSTR)
LOAD_DEREF = opcode.opmap.get('LOAD_DEREF', UNKNOWN_INSTR)
STORE_DEREF = opcode.opmap.get('STORE_DEREF', UNKNOWN_INSTR)
DELETE_DEREF = opcode.opmap.get('DELETE_DEREF', UNKNOWN_INSTR)
CALL_FUNCTION_KW = opcode.opmap.get('CALL_FUNCTION_KW', UNKNOWN_INSTR)
CALL_FUNCTION_EX = opcode.opmap.get('CALL_FUNCTION_EX', UNKNOWN_INSTR)
SETUP_WITH = opcode.opmap.get('SETUP_WITH', UNKNOWN_INSTR)
LIST_APPEND = opcode.opmap.get('LIST_APPEND', UNKNOWN_INSTR)
SET_ADD = opcode.opmap.get('SET_ADD', UNKNOWN_INSTR)
MAP_ADD = opcode.opmap.get('MAP_ADD', UNKNOWN_INSTR)
LOAD_CLASSDEREF = opcode.opmap.get('LOAD_CLASSDEREF', UNKNOWN_INSTR)
EXTENDED_ARG = opcode.opmap.get('EXTENDED_ARG', UNKNOWN_INSTR)
SETUP_ASYNC_WITH = opcode.opmap.get('SETUP_ASYNC_WITH', UNKNOWN_INSTR)
FORMAT_VALUE = opcode.opmap.get('FORMAT_VALUE', UNKNOWN_INSTR)
BUILD_CONST_KEY_MAP = opcode.opmap.get('BUILD_CONST_KEY_MAP', UNKNOWN_INSTR)
BUILD_STRING = opcode.opmap.get('BUILD_STRING', UNKNOWN_INSTR)
LOAD_METHOD = opcode.opmap.get('LOAD_METHOD', UNKNOWN_INSTR)
CALL_METHOD = opcode.opmap.get('CALL_METHOD', UNKNOWN_INSTR)
LIST_EXTEND = opcode.opmap.get('LIST_EXTEND', UNKNOWN_INSTR)
SET_UPDATE = opcode.opmap.get('SET_UPDATE', UNKNOWN_INSTR)
DICT_MERGE = opcode.opmap.get('DICT_MERGE', UNKNOWN_INSTR)
DICT_UPDATE = opcode.opmap.get('DICT_UPDATE', UNKNOWN_INSTR)

