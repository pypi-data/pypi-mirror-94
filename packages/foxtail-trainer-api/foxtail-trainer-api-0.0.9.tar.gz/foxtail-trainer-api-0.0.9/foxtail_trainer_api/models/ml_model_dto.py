# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class MLModelDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'model_type': 'ModelType',
        'data_set_url': 'str',
        'status': 'ModelStatus',
        'download_url': 'str',
        'custom_model_hyperparameters': 'list[CustomModelHyperparameterDto]',
        'training_result_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'model_type': 'modelType',
        'data_set_url': 'dataSetUrl',
        'status': 'status',
        'download_url': 'downloadUrl',
        'custom_model_hyperparameters': 'customModelHyperparameters',
        'training_result_id': 'trainingResultId'
    }

    def __init__(self, id=None, name=None, model_type=None, data_set_url=None, status=None, download_url=None, custom_model_hyperparameters=None, training_result_id=None, local_vars_configuration=None):  # noqa: E501
        """MLModelDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._model_type = None
        self._data_set_url = None
        self._status = None
        self._download_url = None
        self._custom_model_hyperparameters = None
        self._training_result_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if model_type is not None:
            self.model_type = model_type
        self.data_set_url = data_set_url
        if status is not None:
            self.status = status
        self.download_url = download_url
        self.custom_model_hyperparameters = custom_model_hyperparameters
        if training_result_id is not None:
            self.training_result_id = training_result_id

    @property
    def id(self):
        """Gets the id of this MLModelDto.  # noqa: E501


        :return: The id of this MLModelDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MLModelDto.


        :param id: The id of this MLModelDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MLModelDto.  # noqa: E501


        :return: The name of this MLModelDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MLModelDto.


        :param name: The name of this MLModelDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model_type(self):
        """Gets the model_type of this MLModelDto.  # noqa: E501


        :return: The model_type of this MLModelDto.  # noqa: E501
        :rtype: ModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this MLModelDto.


        :param model_type: The model_type of this MLModelDto.  # noqa: E501
        :type: ModelType
        """

        self._model_type = model_type

    @property
    def data_set_url(self):
        """Gets the data_set_url of this MLModelDto.  # noqa: E501


        :return: The data_set_url of this MLModelDto.  # noqa: E501
        :rtype: str
        """
        return self._data_set_url

    @data_set_url.setter
    def data_set_url(self, data_set_url):
        """Sets the data_set_url of this MLModelDto.


        :param data_set_url: The data_set_url of this MLModelDto.  # noqa: E501
        :type: str
        """

        self._data_set_url = data_set_url

    @property
    def status(self):
        """Gets the status of this MLModelDto.  # noqa: E501


        :return: The status of this MLModelDto.  # noqa: E501
        :rtype: ModelStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MLModelDto.


        :param status: The status of this MLModelDto.  # noqa: E501
        :type: ModelStatus
        """

        self._status = status

    @property
    def download_url(self):
        """Gets the download_url of this MLModelDto.  # noqa: E501


        :return: The download_url of this MLModelDto.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this MLModelDto.


        :param download_url: The download_url of this MLModelDto.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def custom_model_hyperparameters(self):
        """Gets the custom_model_hyperparameters of this MLModelDto.  # noqa: E501


        :return: The custom_model_hyperparameters of this MLModelDto.  # noqa: E501
        :rtype: list[CustomModelHyperparameterDto]
        """
        return self._custom_model_hyperparameters

    @custom_model_hyperparameters.setter
    def custom_model_hyperparameters(self, custom_model_hyperparameters):
        """Sets the custom_model_hyperparameters of this MLModelDto.


        :param custom_model_hyperparameters: The custom_model_hyperparameters of this MLModelDto.  # noqa: E501
        :type: list[CustomModelHyperparameterDto]
        """

        self._custom_model_hyperparameters = custom_model_hyperparameters

    @property
    def training_result_id(self):
        """Gets the training_result_id of this MLModelDto.  # noqa: E501


        :return: The training_result_id of this MLModelDto.  # noqa: E501
        :rtype: str
        """
        return self._training_result_id

    @training_result_id.setter
    def training_result_id(self, training_result_id):
        """Sets the training_result_id of this MLModelDto.


        :param training_result_id: The training_result_id of this MLModelDto.  # noqa: E501
        :type: str
        """

        self._training_result_id = training_result_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MLModelDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MLModelDto):
            return True

        return self.to_dict() != other.to_dict()
