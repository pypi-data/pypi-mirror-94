# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class MLModelMetricReportDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_id': 'str',
        'training_metrics': 'list[MetricReportDto]',
        'validation_metrics': 'list[MetricReportDto]',
        'test_metrics': 'list[MetricReportDto]'
    }

    attribute_map = {
        'model_id': 'modelId',
        'training_metrics': 'trainingMetrics',
        'validation_metrics': 'validationMetrics',
        'test_metrics': 'testMetrics'
    }

    def __init__(self, model_id=None, training_metrics=None, validation_metrics=None, test_metrics=None, local_vars_configuration=None):  # noqa: E501
        """MLModelMetricReportDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model_id = None
        self._training_metrics = None
        self._validation_metrics = None
        self._test_metrics = None
        self.discriminator = None

        if model_id is not None:
            self.model_id = model_id
        self.training_metrics = training_metrics
        self.validation_metrics = validation_metrics
        self.test_metrics = test_metrics

    @property
    def model_id(self):
        """Gets the model_id of this MLModelMetricReportDto.  # noqa: E501


        :return: The model_id of this MLModelMetricReportDto.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this MLModelMetricReportDto.


        :param model_id: The model_id of this MLModelMetricReportDto.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def training_metrics(self):
        """Gets the training_metrics of this MLModelMetricReportDto.  # noqa: E501


        :return: The training_metrics of this MLModelMetricReportDto.  # noqa: E501
        :rtype: list[MetricReportDto]
        """
        return self._training_metrics

    @training_metrics.setter
    def training_metrics(self, training_metrics):
        """Sets the training_metrics of this MLModelMetricReportDto.


        :param training_metrics: The training_metrics of this MLModelMetricReportDto.  # noqa: E501
        :type: list[MetricReportDto]
        """

        self._training_metrics = training_metrics

    @property
    def validation_metrics(self):
        """Gets the validation_metrics of this MLModelMetricReportDto.  # noqa: E501


        :return: The validation_metrics of this MLModelMetricReportDto.  # noqa: E501
        :rtype: list[MetricReportDto]
        """
        return self._validation_metrics

    @validation_metrics.setter
    def validation_metrics(self, validation_metrics):
        """Sets the validation_metrics of this MLModelMetricReportDto.


        :param validation_metrics: The validation_metrics of this MLModelMetricReportDto.  # noqa: E501
        :type: list[MetricReportDto]
        """

        self._validation_metrics = validation_metrics

    @property
    def test_metrics(self):
        """Gets the test_metrics of this MLModelMetricReportDto.  # noqa: E501


        :return: The test_metrics of this MLModelMetricReportDto.  # noqa: E501
        :rtype: list[MetricReportDto]
        """
        return self._test_metrics

    @test_metrics.setter
    def test_metrics(self, test_metrics):
        """Sets the test_metrics of this MLModelMetricReportDto.


        :param test_metrics: The test_metrics of this MLModelMetricReportDto.  # noqa: E501
        :type: list[MetricReportDto]
        """

        self._test_metrics = test_metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MLModelMetricReportDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MLModelMetricReportDto):
            return True

        return self.to_dict() != other.to_dict()
