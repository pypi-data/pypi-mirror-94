# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class UpdateDataSetsSizesDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'realative_size': 'bool',
        'training_set_apsolute_size': 'int',
        'training_set_realtive_size': 'float',
        'validation_set_apsolute_size': 'int',
        'validation_set_realtive_size': 'float',
        'test_set_apsolute_size': 'int',
        'test_set_realtive_size': 'float'
    }

    attribute_map = {
        'realative_size': 'realativeSize',
        'training_set_apsolute_size': 'trainingSetApsoluteSize',
        'training_set_realtive_size': 'trainingSetRealtiveSize',
        'validation_set_apsolute_size': 'validationSetApsoluteSize',
        'validation_set_realtive_size': 'validationSetRealtiveSize',
        'test_set_apsolute_size': 'testSetApsoluteSize',
        'test_set_realtive_size': 'testSetRealtiveSize'
    }

    def __init__(self, realative_size=None, training_set_apsolute_size=None, training_set_realtive_size=None, validation_set_apsolute_size=None, validation_set_realtive_size=None, test_set_apsolute_size=None, test_set_realtive_size=None, local_vars_configuration=None):  # noqa: E501
        """UpdateDataSetsSizesDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._realative_size = None
        self._training_set_apsolute_size = None
        self._training_set_realtive_size = None
        self._validation_set_apsolute_size = None
        self._validation_set_realtive_size = None
        self._test_set_apsolute_size = None
        self._test_set_realtive_size = None
        self.discriminator = None

        self.realative_size = realative_size
        self.training_set_apsolute_size = training_set_apsolute_size
        self.training_set_realtive_size = training_set_realtive_size
        self.validation_set_apsolute_size = validation_set_apsolute_size
        self.validation_set_realtive_size = validation_set_realtive_size
        self.test_set_apsolute_size = test_set_apsolute_size
        self.test_set_realtive_size = test_set_realtive_size

    @property
    def realative_size(self):
        """Gets the realative_size of this UpdateDataSetsSizesDto.  # noqa: E501


        :return: The realative_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :rtype: bool
        """
        return self._realative_size

    @realative_size.setter
    def realative_size(self, realative_size):
        """Sets the realative_size of this UpdateDataSetsSizesDto.


        :param realative_size: The realative_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :type: bool
        """

        self._realative_size = realative_size

    @property
    def training_set_apsolute_size(self):
        """Gets the training_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501


        :return: The training_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :rtype: int
        """
        return self._training_set_apsolute_size

    @training_set_apsolute_size.setter
    def training_set_apsolute_size(self, training_set_apsolute_size):
        """Sets the training_set_apsolute_size of this UpdateDataSetsSizesDto.


        :param training_set_apsolute_size: The training_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :type: int
        """

        self._training_set_apsolute_size = training_set_apsolute_size

    @property
    def training_set_realtive_size(self):
        """Gets the training_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501


        :return: The training_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :rtype: float
        """
        return self._training_set_realtive_size

    @training_set_realtive_size.setter
    def training_set_realtive_size(self, training_set_realtive_size):
        """Sets the training_set_realtive_size of this UpdateDataSetsSizesDto.


        :param training_set_realtive_size: The training_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :type: float
        """

        self._training_set_realtive_size = training_set_realtive_size

    @property
    def validation_set_apsolute_size(self):
        """Gets the validation_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501


        :return: The validation_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :rtype: int
        """
        return self._validation_set_apsolute_size

    @validation_set_apsolute_size.setter
    def validation_set_apsolute_size(self, validation_set_apsolute_size):
        """Sets the validation_set_apsolute_size of this UpdateDataSetsSizesDto.


        :param validation_set_apsolute_size: The validation_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :type: int
        """

        self._validation_set_apsolute_size = validation_set_apsolute_size

    @property
    def validation_set_realtive_size(self):
        """Gets the validation_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501


        :return: The validation_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :rtype: float
        """
        return self._validation_set_realtive_size

    @validation_set_realtive_size.setter
    def validation_set_realtive_size(self, validation_set_realtive_size):
        """Sets the validation_set_realtive_size of this UpdateDataSetsSizesDto.


        :param validation_set_realtive_size: The validation_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :type: float
        """

        self._validation_set_realtive_size = validation_set_realtive_size

    @property
    def test_set_apsolute_size(self):
        """Gets the test_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501


        :return: The test_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :rtype: int
        """
        return self._test_set_apsolute_size

    @test_set_apsolute_size.setter
    def test_set_apsolute_size(self, test_set_apsolute_size):
        """Sets the test_set_apsolute_size of this UpdateDataSetsSizesDto.


        :param test_set_apsolute_size: The test_set_apsolute_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :type: int
        """

        self._test_set_apsolute_size = test_set_apsolute_size

    @property
    def test_set_realtive_size(self):
        """Gets the test_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501


        :return: The test_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :rtype: float
        """
        return self._test_set_realtive_size

    @test_set_realtive_size.setter
    def test_set_realtive_size(self, test_set_realtive_size):
        """Sets the test_set_realtive_size of this UpdateDataSetsSizesDto.


        :param test_set_realtive_size: The test_set_realtive_size of this UpdateDataSetsSizesDto.  # noqa: E501
        :type: float
        """

        self._test_set_realtive_size = test_set_realtive_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateDataSetsSizesDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateDataSetsSizesDto):
            return True

        return self.to_dict() != other.to_dict()
