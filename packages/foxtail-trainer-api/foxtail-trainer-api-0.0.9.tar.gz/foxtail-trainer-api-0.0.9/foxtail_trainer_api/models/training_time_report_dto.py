# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class TrainingTimeReportDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'models_count': 'int',
        'average_time_in_seconds': 'float',
        'standard_deviation_time_in_seconds': 'float',
        'minimum_time_in_seconds': 'float',
        'maximum_time_in_seconds': 'float'
    }

    attribute_map = {
        'models_count': 'modelsCount',
        'average_time_in_seconds': 'averageTimeInSeconds',
        'standard_deviation_time_in_seconds': 'standardDeviationTimeInSeconds',
        'minimum_time_in_seconds': 'minimumTimeInSeconds',
        'maximum_time_in_seconds': 'maximumTimeInSeconds'
    }

    def __init__(self, models_count=None, average_time_in_seconds=None, standard_deviation_time_in_seconds=None, minimum_time_in_seconds=None, maximum_time_in_seconds=None, local_vars_configuration=None):  # noqa: E501
        """TrainingTimeReportDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._models_count = None
        self._average_time_in_seconds = None
        self._standard_deviation_time_in_seconds = None
        self._minimum_time_in_seconds = None
        self._maximum_time_in_seconds = None
        self.discriminator = None

        if models_count is not None:
            self.models_count = models_count
        if average_time_in_seconds is not None:
            self.average_time_in_seconds = average_time_in_seconds
        if standard_deviation_time_in_seconds is not None:
            self.standard_deviation_time_in_seconds = standard_deviation_time_in_seconds
        if minimum_time_in_seconds is not None:
            self.minimum_time_in_seconds = minimum_time_in_seconds
        if maximum_time_in_seconds is not None:
            self.maximum_time_in_seconds = maximum_time_in_seconds

    @property
    def models_count(self):
        """Gets the models_count of this TrainingTimeReportDto.  # noqa: E501


        :return: The models_count of this TrainingTimeReportDto.  # noqa: E501
        :rtype: int
        """
        return self._models_count

    @models_count.setter
    def models_count(self, models_count):
        """Sets the models_count of this TrainingTimeReportDto.


        :param models_count: The models_count of this TrainingTimeReportDto.  # noqa: E501
        :type: int
        """

        self._models_count = models_count

    @property
    def average_time_in_seconds(self):
        """Gets the average_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501


        :return: The average_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501
        :rtype: float
        """
        return self._average_time_in_seconds

    @average_time_in_seconds.setter
    def average_time_in_seconds(self, average_time_in_seconds):
        """Sets the average_time_in_seconds of this TrainingTimeReportDto.


        :param average_time_in_seconds: The average_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501
        :type: float
        """

        self._average_time_in_seconds = average_time_in_seconds

    @property
    def standard_deviation_time_in_seconds(self):
        """Gets the standard_deviation_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501


        :return: The standard_deviation_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501
        :rtype: float
        """
        return self._standard_deviation_time_in_seconds

    @standard_deviation_time_in_seconds.setter
    def standard_deviation_time_in_seconds(self, standard_deviation_time_in_seconds):
        """Sets the standard_deviation_time_in_seconds of this TrainingTimeReportDto.


        :param standard_deviation_time_in_seconds: The standard_deviation_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501
        :type: float
        """

        self._standard_deviation_time_in_seconds = standard_deviation_time_in_seconds

    @property
    def minimum_time_in_seconds(self):
        """Gets the minimum_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501


        :return: The minimum_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501
        :rtype: float
        """
        return self._minimum_time_in_seconds

    @minimum_time_in_seconds.setter
    def minimum_time_in_seconds(self, minimum_time_in_seconds):
        """Sets the minimum_time_in_seconds of this TrainingTimeReportDto.


        :param minimum_time_in_seconds: The minimum_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501
        :type: float
        """

        self._minimum_time_in_seconds = minimum_time_in_seconds

    @property
    def maximum_time_in_seconds(self):
        """Gets the maximum_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501


        :return: The maximum_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501
        :rtype: float
        """
        return self._maximum_time_in_seconds

    @maximum_time_in_seconds.setter
    def maximum_time_in_seconds(self, maximum_time_in_seconds):
        """Sets the maximum_time_in_seconds of this TrainingTimeReportDto.


        :param maximum_time_in_seconds: The maximum_time_in_seconds of this TrainingTimeReportDto.  # noqa: E501
        :type: float
        """

        self._maximum_time_in_seconds = maximum_time_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrainingTimeReportDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrainingTimeReportDto):
            return True

        return self.to_dict() != other.to_dict()
