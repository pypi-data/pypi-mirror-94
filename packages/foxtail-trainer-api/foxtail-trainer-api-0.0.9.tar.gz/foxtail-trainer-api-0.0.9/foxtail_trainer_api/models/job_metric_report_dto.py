# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class JobMetricReportDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'problem_type': 'ProblemType',
        'training_aggregated_metrics': 'list[AggregatedMetricReportDto]',
        'validation_aggregated_metrics': 'list[AggregatedMetricReportDto]',
        'test_aggregated_metrics': 'list[AggregatedMetricReportDto]'
    }

    attribute_map = {
        'problem_type': 'problemType',
        'training_aggregated_metrics': 'trainingAggregatedMetrics',
        'validation_aggregated_metrics': 'validationAggregatedMetrics',
        'test_aggregated_metrics': 'testAggregatedMetrics'
    }

    def __init__(self, problem_type=None, training_aggregated_metrics=None, validation_aggregated_metrics=None, test_aggregated_metrics=None, local_vars_configuration=None):  # noqa: E501
        """JobMetricReportDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._problem_type = None
        self._training_aggregated_metrics = None
        self._validation_aggregated_metrics = None
        self._test_aggregated_metrics = None
        self.discriminator = None

        if problem_type is not None:
            self.problem_type = problem_type
        self.training_aggregated_metrics = training_aggregated_metrics
        self.validation_aggregated_metrics = validation_aggregated_metrics
        self.test_aggregated_metrics = test_aggregated_metrics

    @property
    def problem_type(self):
        """Gets the problem_type of this JobMetricReportDto.  # noqa: E501


        :return: The problem_type of this JobMetricReportDto.  # noqa: E501
        :rtype: ProblemType
        """
        return self._problem_type

    @problem_type.setter
    def problem_type(self, problem_type):
        """Sets the problem_type of this JobMetricReportDto.


        :param problem_type: The problem_type of this JobMetricReportDto.  # noqa: E501
        :type: ProblemType
        """

        self._problem_type = problem_type

    @property
    def training_aggregated_metrics(self):
        """Gets the training_aggregated_metrics of this JobMetricReportDto.  # noqa: E501


        :return: The training_aggregated_metrics of this JobMetricReportDto.  # noqa: E501
        :rtype: list[AggregatedMetricReportDto]
        """
        return self._training_aggregated_metrics

    @training_aggregated_metrics.setter
    def training_aggregated_metrics(self, training_aggregated_metrics):
        """Sets the training_aggregated_metrics of this JobMetricReportDto.


        :param training_aggregated_metrics: The training_aggregated_metrics of this JobMetricReportDto.  # noqa: E501
        :type: list[AggregatedMetricReportDto]
        """

        self._training_aggregated_metrics = training_aggregated_metrics

    @property
    def validation_aggregated_metrics(self):
        """Gets the validation_aggregated_metrics of this JobMetricReportDto.  # noqa: E501


        :return: The validation_aggregated_metrics of this JobMetricReportDto.  # noqa: E501
        :rtype: list[AggregatedMetricReportDto]
        """
        return self._validation_aggregated_metrics

    @validation_aggregated_metrics.setter
    def validation_aggregated_metrics(self, validation_aggregated_metrics):
        """Sets the validation_aggregated_metrics of this JobMetricReportDto.


        :param validation_aggregated_metrics: The validation_aggregated_metrics of this JobMetricReportDto.  # noqa: E501
        :type: list[AggregatedMetricReportDto]
        """

        self._validation_aggregated_metrics = validation_aggregated_metrics

    @property
    def test_aggregated_metrics(self):
        """Gets the test_aggregated_metrics of this JobMetricReportDto.  # noqa: E501


        :return: The test_aggregated_metrics of this JobMetricReportDto.  # noqa: E501
        :rtype: list[AggregatedMetricReportDto]
        """
        return self._test_aggregated_metrics

    @test_aggregated_metrics.setter
    def test_aggregated_metrics(self, test_aggregated_metrics):
        """Sets the test_aggregated_metrics of this JobMetricReportDto.


        :param test_aggregated_metrics: The test_aggregated_metrics of this JobMetricReportDto.  # noqa: E501
        :type: list[AggregatedMetricReportDto]
        """

        self._test_aggregated_metrics = test_aggregated_metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobMetricReportDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobMetricReportDto):
            return True

        return self.to_dict() != other.to_dict()
