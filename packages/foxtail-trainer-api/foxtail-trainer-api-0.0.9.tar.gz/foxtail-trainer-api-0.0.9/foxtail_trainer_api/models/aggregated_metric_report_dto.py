# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class AggregatedMetricReportDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'models_count': 'int',
        'metric_type': 'MetricType',
        'average_value': 'float',
        'standard_deviation_value': 'float',
        'minimim_value': 'float',
        'maximum_value': 'float'
    }

    attribute_map = {
        'models_count': 'modelsCount',
        'metric_type': 'metricType',
        'average_value': 'averageValue',
        'standard_deviation_value': 'standardDeviationValue',
        'minimim_value': 'minimimValue',
        'maximum_value': 'maximumValue'
    }

    def __init__(self, models_count=None, metric_type=None, average_value=None, standard_deviation_value=None, minimim_value=None, maximum_value=None, local_vars_configuration=None):  # noqa: E501
        """AggregatedMetricReportDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._models_count = None
        self._metric_type = None
        self._average_value = None
        self._standard_deviation_value = None
        self._minimim_value = None
        self._maximum_value = None
        self.discriminator = None

        if models_count is not None:
            self.models_count = models_count
        if metric_type is not None:
            self.metric_type = metric_type
        if average_value is not None:
            self.average_value = average_value
        if standard_deviation_value is not None:
            self.standard_deviation_value = standard_deviation_value
        if minimim_value is not None:
            self.minimim_value = minimim_value
        if maximum_value is not None:
            self.maximum_value = maximum_value

    @property
    def models_count(self):
        """Gets the models_count of this AggregatedMetricReportDto.  # noqa: E501


        :return: The models_count of this AggregatedMetricReportDto.  # noqa: E501
        :rtype: int
        """
        return self._models_count

    @models_count.setter
    def models_count(self, models_count):
        """Sets the models_count of this AggregatedMetricReportDto.


        :param models_count: The models_count of this AggregatedMetricReportDto.  # noqa: E501
        :type: int
        """

        self._models_count = models_count

    @property
    def metric_type(self):
        """Gets the metric_type of this AggregatedMetricReportDto.  # noqa: E501


        :return: The metric_type of this AggregatedMetricReportDto.  # noqa: E501
        :rtype: MetricType
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this AggregatedMetricReportDto.


        :param metric_type: The metric_type of this AggregatedMetricReportDto.  # noqa: E501
        :type: MetricType
        """

        self._metric_type = metric_type

    @property
    def average_value(self):
        """Gets the average_value of this AggregatedMetricReportDto.  # noqa: E501


        :return: The average_value of this AggregatedMetricReportDto.  # noqa: E501
        :rtype: float
        """
        return self._average_value

    @average_value.setter
    def average_value(self, average_value):
        """Sets the average_value of this AggregatedMetricReportDto.


        :param average_value: The average_value of this AggregatedMetricReportDto.  # noqa: E501
        :type: float
        """

        self._average_value = average_value

    @property
    def standard_deviation_value(self):
        """Gets the standard_deviation_value of this AggregatedMetricReportDto.  # noqa: E501


        :return: The standard_deviation_value of this AggregatedMetricReportDto.  # noqa: E501
        :rtype: float
        """
        return self._standard_deviation_value

    @standard_deviation_value.setter
    def standard_deviation_value(self, standard_deviation_value):
        """Sets the standard_deviation_value of this AggregatedMetricReportDto.


        :param standard_deviation_value: The standard_deviation_value of this AggregatedMetricReportDto.  # noqa: E501
        :type: float
        """

        self._standard_deviation_value = standard_deviation_value

    @property
    def minimim_value(self):
        """Gets the minimim_value of this AggregatedMetricReportDto.  # noqa: E501


        :return: The minimim_value of this AggregatedMetricReportDto.  # noqa: E501
        :rtype: float
        """
        return self._minimim_value

    @minimim_value.setter
    def minimim_value(self, minimim_value):
        """Sets the minimim_value of this AggregatedMetricReportDto.


        :param minimim_value: The minimim_value of this AggregatedMetricReportDto.  # noqa: E501
        :type: float
        """

        self._minimim_value = minimim_value

    @property
    def maximum_value(self):
        """Gets the maximum_value of this AggregatedMetricReportDto.  # noqa: E501


        :return: The maximum_value of this AggregatedMetricReportDto.  # noqa: E501
        :rtype: float
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        """Sets the maximum_value of this AggregatedMetricReportDto.


        :param maximum_value: The maximum_value of this AggregatedMetricReportDto.  # noqa: E501
        :type: float
        """

        self._maximum_value = maximum_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregatedMetricReportDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AggregatedMetricReportDto):
            return True

        return self.to_dict() != other.to_dict()
