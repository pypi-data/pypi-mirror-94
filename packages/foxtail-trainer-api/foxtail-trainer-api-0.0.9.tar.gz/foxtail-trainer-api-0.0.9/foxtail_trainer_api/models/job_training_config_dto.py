# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class JobTrainingConfigDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_sets_sizes': 'UpdateDataSetsSizesDto',
        'features': 'list[str]',
        'targets': 'list[str]',
        'problem_type': 'ProblemType',
        'model_type': 'ModelType',
        'add_or_update_model_hyperparameter_in_job': 'list[AddOrUpdateModelHyperparameterInJob]',
        'remove_model_hyperparameters_from_job': 'list[str]'
    }

    attribute_map = {
        'data_sets_sizes': 'dataSetsSizes',
        'features': 'features',
        'targets': 'targets',
        'problem_type': 'problemType',
        'model_type': 'modelType',
        'add_or_update_model_hyperparameter_in_job': 'addOrUpdateModelHyperparameterInJob',
        'remove_model_hyperparameters_from_job': 'removeModelHyperparametersFromJob'
    }

    def __init__(self, data_sets_sizes=None, features=None, targets=None, problem_type=None, model_type=None, add_or_update_model_hyperparameter_in_job=None, remove_model_hyperparameters_from_job=None, local_vars_configuration=None):  # noqa: E501
        """JobTrainingConfigDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_sets_sizes = None
        self._features = None
        self._targets = None
        self._problem_type = None
        self._model_type = None
        self._add_or_update_model_hyperparameter_in_job = None
        self._remove_model_hyperparameters_from_job = None
        self.discriminator = None

        if data_sets_sizes is not None:
            self.data_sets_sizes = data_sets_sizes
        self.features = features
        self.targets = targets
        if problem_type is not None:
            self.problem_type = problem_type
        if model_type is not None:
            self.model_type = model_type
        self.add_or_update_model_hyperparameter_in_job = add_or_update_model_hyperparameter_in_job
        self.remove_model_hyperparameters_from_job = remove_model_hyperparameters_from_job

    @property
    def data_sets_sizes(self):
        """Gets the data_sets_sizes of this JobTrainingConfigDto.  # noqa: E501


        :return: The data_sets_sizes of this JobTrainingConfigDto.  # noqa: E501
        :rtype: UpdateDataSetsSizesDto
        """
        return self._data_sets_sizes

    @data_sets_sizes.setter
    def data_sets_sizes(self, data_sets_sizes):
        """Sets the data_sets_sizes of this JobTrainingConfigDto.


        :param data_sets_sizes: The data_sets_sizes of this JobTrainingConfigDto.  # noqa: E501
        :type: UpdateDataSetsSizesDto
        """

        self._data_sets_sizes = data_sets_sizes

    @property
    def features(self):
        """Gets the features of this JobTrainingConfigDto.  # noqa: E501


        :return: The features of this JobTrainingConfigDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this JobTrainingConfigDto.


        :param features: The features of this JobTrainingConfigDto.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def targets(self):
        """Gets the targets of this JobTrainingConfigDto.  # noqa: E501


        :return: The targets of this JobTrainingConfigDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this JobTrainingConfigDto.


        :param targets: The targets of this JobTrainingConfigDto.  # noqa: E501
        :type: list[str]
        """

        self._targets = targets

    @property
    def problem_type(self):
        """Gets the problem_type of this JobTrainingConfigDto.  # noqa: E501


        :return: The problem_type of this JobTrainingConfigDto.  # noqa: E501
        :rtype: ProblemType
        """
        return self._problem_type

    @problem_type.setter
    def problem_type(self, problem_type):
        """Sets the problem_type of this JobTrainingConfigDto.


        :param problem_type: The problem_type of this JobTrainingConfigDto.  # noqa: E501
        :type: ProblemType
        """

        self._problem_type = problem_type

    @property
    def model_type(self):
        """Gets the model_type of this JobTrainingConfigDto.  # noqa: E501


        :return: The model_type of this JobTrainingConfigDto.  # noqa: E501
        :rtype: ModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this JobTrainingConfigDto.


        :param model_type: The model_type of this JobTrainingConfigDto.  # noqa: E501
        :type: ModelType
        """

        self._model_type = model_type

    @property
    def add_or_update_model_hyperparameter_in_job(self):
        """Gets the add_or_update_model_hyperparameter_in_job of this JobTrainingConfigDto.  # noqa: E501


        :return: The add_or_update_model_hyperparameter_in_job of this JobTrainingConfigDto.  # noqa: E501
        :rtype: list[AddOrUpdateModelHyperparameterInJob]
        """
        return self._add_or_update_model_hyperparameter_in_job

    @add_or_update_model_hyperparameter_in_job.setter
    def add_or_update_model_hyperparameter_in_job(self, add_or_update_model_hyperparameter_in_job):
        """Sets the add_or_update_model_hyperparameter_in_job of this JobTrainingConfigDto.


        :param add_or_update_model_hyperparameter_in_job: The add_or_update_model_hyperparameter_in_job of this JobTrainingConfigDto.  # noqa: E501
        :type: list[AddOrUpdateModelHyperparameterInJob]
        """

        self._add_or_update_model_hyperparameter_in_job = add_or_update_model_hyperparameter_in_job

    @property
    def remove_model_hyperparameters_from_job(self):
        """Gets the remove_model_hyperparameters_from_job of this JobTrainingConfigDto.  # noqa: E501


        :return: The remove_model_hyperparameters_from_job of this JobTrainingConfigDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_model_hyperparameters_from_job

    @remove_model_hyperparameters_from_job.setter
    def remove_model_hyperparameters_from_job(self, remove_model_hyperparameters_from_job):
        """Sets the remove_model_hyperparameters_from_job of this JobTrainingConfigDto.


        :param remove_model_hyperparameters_from_job: The remove_model_hyperparameters_from_job of this JobTrainingConfigDto.  # noqa: E501
        :type: list[str]
        """

        self._remove_model_hyperparameters_from_job = remove_model_hyperparameters_from_job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobTrainingConfigDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobTrainingConfigDto):
            return True

        return self.to_dict() != other.to_dict()
