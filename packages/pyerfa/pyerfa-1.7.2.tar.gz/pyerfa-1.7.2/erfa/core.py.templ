# Licensed under a 3-clause BSD style license - see LICENSE.rst

# "core.py" is auto-generated by erfa_generator.py from the template
# "core.py.templ". Do *not* edit "core.py" directly, instead edit
# "core.py.templ" and run erfa_generator.py from the source directory to
# update it.

"""
Python wrappers for the ufunc wrappers of the ERFA library.

The key idea is that any function can be called with inputs that are arrays,
and the ufuncs will automatically vectorize and call the ERFA functions for
each item using broadcasting rules for numpy.  So the return values are always
numpy arrays of some sort.

For ERFA functions that take/return vectors or matrices, the vector/matrix
dimension(s) are always the *last* dimension(s).  For example, if you
want to give ten matrices (i.e., the ERFA input type is double[3][3]),
you would pass in a (10, 3, 3) numpy array.  If the output of the ERFA
function is scalar, you'll get back a length-10 1D array.
(Note that the ufuncs take this into account using structured dtypes.)

Note that the ufunc part of these functions are implemented in a separate
module (compiled as ``ufunc``), derived from the ``ufunc.c`` file.
"""

import warnings

import numpy

from . import ufunc

__all__ = [
    'ErfaError', 'ErfaWarning',
    {{ funcs | map(attribute='pyname') | surround("'","'")
       | join(", ") | wordwrap(wrapstring='\n    ') }},
    {{ constants | map(attribute='name') | surround("'","'")
       | join(", ") | wordwrap(wrapstring='\n    ') }}]


class ErfaError(ValueError):
    """
    A class for errors triggered by ERFA functions (status codes < 0)

    Note: this class should *not* be referenced by fully-qualified name, because
    it may move to ERFA in a future version.  In a future such move it will
    still be imported here as an alias, but the true namespace of the class may
    change.
    """


class ErfaWarning(UserWarning):
    """
    A class for warnings triggered by ERFA functions (status codes > 0)

    Note: this class should *not* be referenced by fully-qualified name, because
    it may move to ERFA in a future version.  In a future such move it will
    still be imported here as an alias, but the true namespace of the class may
    change.
    """


# <---------------------------------Error-handling---------------------------->


STATUS_CODES = {}  # populated below before each function that returns an int

# This is a hard-coded list of status codes that need to be remapped,
# such as to turn errors into warnings.
STATUS_CODES_REMAP = {
    'cal2jd': {-3: 3}
}


def check_errwarn(statcodes, func_name):
    if not numpy.any(statcodes):
        return
    # Remap any errors into warnings in the STATUS_CODES_REMAP dict.
    if func_name in STATUS_CODES_REMAP:
        for before, after in STATUS_CODES_REMAP[func_name].items():
            statcodes[statcodes == before] = after
            STATUS_CODES[func_name][after] = STATUS_CODES[func_name][before]

    if numpy.any(statcodes < 0):
        # Errors present - only report the errors.
        if statcodes.shape:
            statcodes = statcodes[statcodes < 0]

        errcodes = numpy.unique(statcodes)

        errcounts = dict([(e, numpy.sum(statcodes == e)) for e in errcodes])

        elsemsg = STATUS_CODES[func_name].get('else', None)
        if elsemsg is None:
            errmsgs = dict([(e, STATUS_CODES[func_name].get(
                e, 'Return code ' + str(e))) for e in errcodes])
        else:
            errmsgs = dict([(e, STATUS_CODES[func_name].get(
                e, elsemsg)) for e in errcodes])

        emsg = ', '.join(['{0} of "{1}"'.format(errcounts[e], errmsgs[e])
                          for e in errcodes])
        raise ErfaError('ERFA function "{}" yielded {}'
                        .format(func_name, emsg))

    elif numpy.any(statcodes > 0):
        # Only warnings present.
        if statcodes.shape:
            statcodes = statcodes[statcodes > 0]

        warncodes = numpy.unique(statcodes)

        warncounts = dict([(w, numpy.sum(statcodes == w)) for w in warncodes])

        elsemsg = STATUS_CODES[func_name].get('else', None)
        if elsemsg is None:
            warnmsgs = dict([(w, STATUS_CODES[func_name].get(
                w, 'Return code ' + str(w))) for w in warncodes])
        else:
            warnmsgs = dict([(w, STATUS_CODES[func_name].get(
                w, elsemsg)) for w in warncodes])

        wmsg = ', '.join(['{0} of "{1}"'.format(warncounts[w], warnmsgs[w])
                          for w in warncodes])
        warnings.warn('ERFA function "{}" yielded {}'.format(func_name, wmsg),
                      ErfaWarning)


# <------------------------structured dtype conversion------------------------>

dt_bytes1 = numpy.dtype('S1')
dt_bytes12 = numpy.dtype('S12')

# <--------------------------Actual ERFA-wrapping code------------------------>

{% for constant in constants %}
{{ constant.name }} = {{ constant.value }}
"""{{ constant.doc|join(' ')|wordwrap() }}"""
{%- endfor %}


{%- for func in funcs %}


def {{ func.pyname }}({{ func.args_by_inout('in|inout')|map(attribute='name')|join(', ') }}):
    """
    {{ func.doc.title }}

    Parameters
    ----------
    {%- for arg in func.args_by_inout('in|inout') %}
    {{ arg.name }} : {{ arg.ctype }} array
    {%- endfor %}

    Returns
    -------
    {%- for arg in func.args_by_inout('inout|out|ret') %}
    {{ arg.name }} : {{ arg.ctype }} array
    {%- endfor %}

    Notes
    -----
    Wraps ERFA function ``{{ func.name }}``.
    {%- if func.args_by_inout('inout') %} Note that, unlike the erfa routine,
    the python wrapper does not change {{ func.args_by_inout('inout')
    | map(attribute='name')|join(', ') }} in-place.
    {%- endif %} The ERFA documentation is::

{{ func.doc }}
    """

    {#-
     # Call the ufunc. Note that we pass inout twice, once as input
     # and once as output, so that changes are done in-place
     #}
    {{ func.python_call }}
    {#-
     # Check whether any warnings or errors occurred.
     #}
    {%- for arg in func.args_by_inout('stat') %}
    check_errwarn({{ arg.name }}, '{{ func.pyname }}')
    {%- endfor %}
    {#-
     # Any string outputs will be in structs; view them as their base type.
     #}
    {%- for arg in func.args_by_inout('out') -%}
    {%- if 'char' in arg.ctype %}
    {{ arg.name }} = {{ arg.name }}.view({{ arg.view_dtype }})
    {%- endif %}
    {%- endfor %}
    {#-
     # Return the output arguments (including the inplace ones)
     #}
    return {{ func.args_by_inout('inout|out|ret')|map(attribute='name')|join(', ') }}

{#-
 # Define the status codes that this function returns.
 #}
{%- if func.args_by_inout('stat') %}
{%- for stat in func.args_by_inout('stat') %}
{%- if stat.doc_info.statuscodes %}


STATUS_CODES['{{ func.pyname }}'] = {
{%- for key, value in stat.doc_info.statuscodes.items() %}
    {{ '{!r}'.format(key) }}: {{ '{!r}'.format(value) }},
{%- endfor %}
}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}
{# done! (note: this comment also ensures final new line!) #}