%YAML 1.2
---

# Operator templates
####################

Op_exc:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = (delta/(PI*tau)+2.*r*v)/tau'
    - 'd/dt * v = (v^2+eta+I_ext+J*(r+r_exc-r_inh)*tau-(PI*r*tau)^2)/tau'
  variables:
    delta:
      default: 1.0
    tau:
      default: 1.0
    eta:
      default: -5.0
    J:
      default: 15.0
    r:
      default: output
    v:
      default: variable
    r_exc:
      default: input
    r_inh:
        default: input
    I_ext:
      default: input

Op_inh:
  base: OperatorTemplate
  equations:
    - 'd/dt * r = (delta/(PI*tau)+2.*r*v)/tau'
    - 'd/dt * v = (v^2+eta+I_ext+J*(r_exc-r_inh-r)*tau-(PI*r*tau)^2)/tau'
  variables:
    delta:
      default: 1.0
    tau:
      default: 1.0
    eta:
      default: -5.0
    J:
      default: 15.0
    r:
      default: output
    v:
      default: variable
    r_exc:
      default: input
    r_inh:
      default: input
    I_ext:
      default: input

Op_exc_syns:
  base: OperatorTemplate
  equations:
    - "d/dt * r = delta/(PI * tau^2) + 2.*r*v/tau"
    - "d/dt * v = (v^2 + eta + inp) / tau + J_e * I_e - J_i * I_i - tau*(PI*r)^2"
    - "d/dt * I_e = x_e"
    - "d/dt * x_e = H_e*(r + r_e)/tau_e - 2*x_e/tau_e - I_e/tau_e^2"
    - "d/dt * I_i = x_i"
    - "d/dt * x_i = H_i*r_i/tau_i - 2*x_i/tau_i - I_i/tau_i^2"
  variables:
    r:
      default: output
    v:
      default: variable
    I_e:
      default: variable
    I_i:
      default: variable
    x_e:
      default: variable
    x_i:
      default: variable
    r_e:
      default: input
    r_i:
      default: input
    tau:
      default: 1.0
    delta:
      default: 1.0
    eta:
      default: -2.5
    J_e:
      default: 10.0
    J_i:
      default: 10.0
    H_e:
      default: 3.25
    H_i:
      default: 22.0
    tau_e:
      default: 1.0
    tau_i:
      default: 2.0
    inp:
      default: input

Op_inh_syns:
  base: OperatorTemplate
  equations:
    - "d/dt * r = delta/(PI * tau^2) + 2.*r*v/tau"
    - "d/dt * v = (v^2 + eta + inp) / tau + J_e * I_e - J_i * I_i - tau*(PI*r)^2"
    - "d/dt * I_e = x_e"
    - "d/dt * x_e = H_e*r_e/tau_e - 2*x_e/tau_e - I_e/tau_e^2"
    - "d/dt * I_i = x_i"
    - "d/dt * x_i = H_i*(r+r_i)/tau_i - 2*x_i/tau_i - I_i/tau_i^2"
  variables:
    r:
      default: output
    v:
      default: variable
    I_e:
      default: variable
    I_i:
      default: variable
    x_e:
      default: variable
    x_i:
      default: variable
    r_e:
      default: input
    r_i:
      default: input
    tau:
      default: 1.0
    delta:
      default: 1.0
    eta:
      default: -2.5
    J_e:
      default: 10.0
    J_i:
      default: 0.0
    H_e:
      default: 3.25
    H_i:
      default: 22.0
    tau_e:
      default: 1.0
    tau_i:
      default: 2.0
    inp:
      default: input

# Population templates
######################

Pop_exc:
  base: NodeTemplate
  operators:
    - Op_exc

Pop_inh:
  base: NodeTemplate
  operators:
    - Op_inh

Pop_exc_syns:
  base: NodeTemplate
  operators:
    - Op_exc_syns

Pop_inh_syns:
  base: NodeTemplate
  operators:
    - Op_inh_syns

# Edge templates
################

DummyEdge:
  base: EdgeTemplate
  operators: []

# Circuit templates
###################

EC:
  base: CircuitTemplate
  nodes:
    Pop_exc: Pop_exc
  edges:

JRC_nosyns:
  base: CircuitTemplate
  nodes:
    PC: Pop_exc
    EIN: Pop_exc
    IIN: Pop_inh
  edges:
    - [PC/Op_exc/r, IIN/Op_inh/r_e, DummyEdge, {weight: 0.3375}]
    - [IIN/Op_inh/r, PC/Op_exc/r_i, DummyEdge, {weight: 0.3375}]
    - [PC/Op_exc/r, EIN/Op_exc/r_e, DummyEdge, {weight: 1.080}]
    - [EIN/Op_exc/r, PC/Op_exc/r_e, DummyEdge, {weight: 1.350}]

JRC:
  base: CircuitTemplate
  nodes:
    PC: Pop_exc_syns
    EIN: Pop_exc_syns
    IIN: Pop_inh_syns
  edges:
    - [PC/Op_exc_syns/r, IIN/Op_inh_syns/r_e, DummyEdge, {weight: 0.3375}]
    - [IIN/Op_inh_syns/r, PC/Op_exc_syns/r_i, DummyEdge, {weight: 0.3375}]
    - [PC/Op_exc_syns/r, EIN/Op_exc_syns/r_e, DummyEdge, {weight: 1.080}]
    - [EIN/Op_exc_syns/r, PC/Op_exc_syns/r_e, DummyEdge, {weight: 1.350}]
