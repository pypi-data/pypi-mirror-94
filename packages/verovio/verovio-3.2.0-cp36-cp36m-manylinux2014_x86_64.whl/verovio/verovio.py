# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_verovio', [dirname(__file__)])
        except ImportError:
            import _verovio
            return _verovio
        if fp is not None:
            try:
                _mod = imp.load_module('_verovio', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _verovio = swig_import_helper()
    del swig_import_helper
else:
    import _verovio
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


uNKNOWN = _verovio.uNKNOWN
aUTO = _verovio.aUTO
mEI = _verovio.mEI
hUMDRUM = _verovio.hUMDRUM
hUMMEI = _verovio.hUMMEI
pAE = _verovio.pAE
aBC = _verovio.aBC
dARMS = _verovio.dARMS
mUSICXML = _verovio.mUSICXML
mUSICXMLHUM = _verovio.mUSICXMLHUM
mEIHUM = _verovio.mEIHUM
mUSEDATAHUM = _verovio.mUSEDATAHUM
eSAC = _verovio.eSAC
mIDI = _verovio.mIDI
tIMEMAP = _verovio.tIMEMAP

def setDefaultResourcePath(*args):
  return _verovio.setDefaultResourcePath(*args)
setDefaultResourcePath = _verovio.setDefaultResourcePath
class toolkit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, toolkit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, toolkit, name)
    __repr__ = _swig_repr
    def __init__(self, initFont=True): 
        this = _verovio.new_toolkit(initFont)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _verovio.delete_toolkit
    __del__ = lambda self : None;
    def getUuid(self): return _verovio.toolkit_getUuid(self)
    def setResourcePath(self, *args): return _verovio.toolkit_setResourcePath(self, *args)
    def loadFile(self, *args): return _verovio.toolkit_loadFile(self, *args)
    def loadData(self, *args): return _verovio.toolkit_loadData(self, *args)
    def saveFile(self, *args): return _verovio.toolkit_saveFile(self, *args)
    def getOptions(self, *args): return _verovio.toolkit_getOptions(self, *args)
    def getAvailableOptions(self): return _verovio.toolkit_getAvailableOptions(self)
    def setOptions(self, *args): return _verovio.toolkit_setOptions(self, *args)
    def getOption(self, *args): return _verovio.toolkit_getOption(self, *args)
    def setOption(self, *args): return _verovio.toolkit_setOption(self, *args)
    def edit(self, *args): return _verovio.toolkit_edit(self, *args)
    def editInfo(self): return _verovio.toolkit_editInfo(self)
    def getLog(self): return _verovio.toolkit_getLog(self)
    def getVersion(self): return _verovio.toolkit_getVersion(self)
    def renderToDeviceContext(self, *args): return _verovio.toolkit_renderToDeviceContext(self, *args)
    def renderToSVG(self, pageNo=1, xmlDeclaration=False): return _verovio.toolkit_renderToSVG(self, pageNo, xmlDeclaration)
    def renderToSVGFile(self, *args): return _verovio.toolkit_renderToSVGFile(self, *args)
    def renderToMIDIFile(self, *args): return _verovio.toolkit_renderToMIDIFile(self, *args)
    def renderToMIDI(self): return _verovio.toolkit_renderToMIDI(self)
    def renderToPAEFile(self, *args): return _verovio.toolkit_renderToPAEFile(self, *args)
    def renderToPAE(self): return _verovio.toolkit_renderToPAE(self)
    def renderToTimemap(self): return _verovio.toolkit_renderToTimemap(self)
    def renderToTimemapFile(self, *args): return _verovio.toolkit_renderToTimemapFile(self, *args)
    def getHumdrumBuffer(self): return _verovio.toolkit_getHumdrumBuffer(self)
    def setHumdrumBuffer(self, *args): return _verovio.toolkit_setHumdrumBuffer(self, *args)
    def getHumdrumFile(self, *args): return _verovio.toolkit_getHumdrumFile(self, *args)
    def getHumdrum(self, *args): return _verovio.toolkit_getHumdrum(self, *args)
    def getElementsAtTime(self, *args): return _verovio.toolkit_getElementsAtTime(self, *args)
    def getMEI(self, *args): return _verovio.toolkit_getMEI(self, *args)
    def getElementAttr(self, *args): return _verovio.toolkit_getElementAttr(self, *args)
    def getNotatedIdForElement(self, *args): return _verovio.toolkit_getNotatedIdForElement(self, *args)
    def getExpansionIdsForElement(self, *args): return _verovio.toolkit_getExpansionIdsForElement(self, *args)
    def redoLayout(self): return _verovio.toolkit_redoLayout(self)
    def redoPagePitchPosLayout(self): return _verovio.toolkit_redoPagePitchPosLayout(self)
    def getPageWithElement(self, *args): return _verovio.toolkit_getPageWithElement(self, *args)
    def getTimeForElement(self, *args): return _verovio.toolkit_getTimeForElement(self, *args)
    def getMIDIValuesForElement(self, *args): return _verovio.toolkit_getMIDIValuesForElement(self, *args)
    def getTimesForElement(self, *args): return _verovio.toolkit_getTimesForElement(self, *args)
    def setScale(self, *args): return _verovio.toolkit_setScale(self, *args)
    def getScale(self): return _verovio.toolkit_getScale(self)
    def setInputFrom(self, *args): return _verovio.toolkit_setInputFrom(self, *args)
    def getInputFrom(self): return _verovio.toolkit_getInputFrom(self)
    def setOutputTo(self, *args): return _verovio.toolkit_setOutputTo(self, *args)
    def getOutputTo(self): return _verovio.toolkit_getOutputTo(self)
    def identifyInputFrom(self, *args): return _verovio.toolkit_identifyInputFrom(self, *args)
    def getPageCount(self): return _verovio.toolkit_getPageCount(self)
    __swig_setmethods__["sMEItoClassIdMap"] = _verovio.toolkit_sMEItoClassIdMap_set
    __swig_getmethods__["sMEItoClassIdMap"] = _verovio.toolkit_sMEItoClassIdMap_get
    if _newclass:sMEItoClassIdMap = _swig_property(_verovio.toolkit_sMEItoClassIdMap_get, _verovio.toolkit_sMEItoClassIdMap_set)
toolkit_swigregister = _verovio.toolkit_swigregister
toolkit_swigregister(toolkit)
cvar = _verovio.cvar

# This file is compatible with both classic and new-style classes.


