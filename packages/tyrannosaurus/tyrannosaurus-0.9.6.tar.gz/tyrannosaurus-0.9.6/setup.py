# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['tyrannosaurus']

package_data = \
{'': ['*'], 'tyrannosaurus': ['resources/*']}

install_requires = \
['grayskull>=0.8.4,<1', 'requests>=2.24,<3', 'tomlkit>=0.7,<1', 'typer>=0.3,<1']

entry_points = \
{'console_scripts': ['tyrannosaurus = tyrannosaurus.cli:cli']}

setup_kwargs = {
    'name': 'tyrannosaurus',
    'version': '0.9.6',
    'description': 'Generate beautifully modern Python projects with seamless, Github-based CI/CD and loads of integrations.',
    'long_description': '# Tyrannosaurus\n\n[![Version status](https://img.shields.io/pypi/status/tyrannosaurus?label=status)](https://pypi.org/project/tyrannosaurus)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Python version compatibility](https://img.shields.io/pypi/pyversions/tyrannosaurus?label=Python)](https://pypi.org/project/tyrannosaurus)\n[![Version on Docker Hub](https://img.shields.io/docker/v/dmyersturnbull/tyrannosaurus?color=green&label=Docker%20Hub)](https://hub.docker.com/repository/docker/dmyersturnbull/tyrannosaurus)\n[![Version on GitHub](https://img.shields.io/github/v/release/dmyersturnbull/tyrannosaurus?include_prereleases&label=GitHub)](https://github.com/dmyersturnbull/tyrannosaurus/releases)\n[![Version on PyPi](https://img.shields.io/pypi/v/tyrannosaurus?label=PyPi)](https://pypi.org/project/tyrannosaurus)\n[![Version on Conda-Forge](https://img.shields.io/conda/vn/conda-forge/tyrannosaurus?label=Conda-Forge)](https://anaconda.org/conda-forge/tyrannosaurus)  \n[![Build (Actions)](https://img.shields.io/github/workflow/status/dmyersturnbull/tyrannosaurus/Build%20&%20test?label=Tests)](https://github.com/dmyersturnbull/tyrannosaurus/actions)\n[![Build (Travis)](https://img.shields.io/travis/dmyersturnbull/tyrannosaurus?label=Travis)](https://travis-ci.org/dmyersturnbull/tyrannosaurus)\n[![Documentation status](https://readthedocs.org/projects/tyrannosaurus/badge)](https://tyrannosaurus.readthedocs.io/en/stable/)\n[![Coverage (coveralls)](https://coveralls.io/repos/github/dmyersturnbull/tyrannosaurus/badge.svg?branch=main&service=github)](https://coveralls.io/github/dmyersturnbull/tyrannosaurus?branch=main)\n[![Coverage (codecov)](https://codecov.io/github/dmyersturnbull/tyrannosaurus/coverage.svg)](https://codecov.io/gh/dmyersturnbull/tyrannosaurus)\n[![Maintainability (Code Climate)](https://api.codeclimate.com/v1/badges/5e3b38c9b9c418461dc3/maintainability)](https://codeclimate.com/github/dmyersturnbull/tyrannosaurus/maintainability)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/dmyersturnbull/tyrannosaurus/badges/quality-score.png?b=main)](https://scrutinizer-ci.com/g/dmyersturnbull/tyrannosaurus/?branch=main)  \n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4485186.svg)](https://doi.org/10.5281/zenodo.4485186)\n[![Created with Tyrannosaurus](https://img.shields.io/badge/Created_with-Tyrannosaurus-0000ff.svg)](https://github.com/dmyersturnbull/tyrannosaurus)\n\nAn opinionated, forwards-looking Python template for 2021.\n\nGenerate elegant, ready-to-use Python\nprojects that have excellent continuous integration and deployment (CI/CD). Integrated with\nDocker Hub, GitHub Packages, Azure, Conda-Forge, and an array of linting, static analysis,\nsecurity testing, documentation, dependency management, and CI/CD tools, including an optional\ncustom tool to keep all duplicate project metadata synchronized to pyproject.toml.\n\n### 🎨 Design / generating a new project\n\nThis is a modern template built with [Poetry](https://python-poetry.org/),\n[GitHub Actions](https://github.com/features/actions), and\n[no legacy files](https://dmyersturnbull.github.io/#-the-python-build-landscape) or tools.\nSee below for a [comparison to other tools](https://github.com/dmyersturnbull/tyrannosaurus#-similar-templates-and-tools).\nAlso see Tyrannosaurus’’s little sister\n[science-notebook-template 🧪](https://github.com/dmyersturnbull/science-notebook-template)\nfor repos supporting scientific publications.\n\nDon’t make 55 commits trying to configure CI/CD workflows.\nAfter creating a new GitHub repository called `myproject`:\n\n```bash\npip install tyrannosaurus\ntyrannosaurus new myproject --track\n```\n\nIf the repo is on an organization, pass `--user myorgname`.\nAfter initializing your project, Tyrannosaurus will list manual steps like adding API keys.\n\n### 💡 Main behavior / features\n\nGenerated projects are integrated with various tools (from PyPi) and external CI/CD/code-quality systems.\nGitHub Actions are used by default, but config files for Travis and Azure Pipelines are also provided.\nYou can swap out, modify, or disable anything as you see fit.\n**[See the docs 📚](https://tyrannosaurus.readthedocs.io/en/stable/)** for more information.\n\n_By default_, here’s how your new project will behave:\n\n- **Commit** ⇒ Files are linted and verified for integrity\n- **Make a pull request** ⇒ Code is built and tested\n- **Push to the main branch** ⇒ Code is built and tested; code quality, coverage, and security badges are updated\n- **Make a GitHub release** ⇒ Artifacts are sent to GitHub, PyPi, DockerHub, GitHub Packages, and readthedocs\n- `tox` ⇒ Tests are run locally\n- `tyrannosaurus sync` ⇒ Project metadata is synced to pyproject.toml\n- `tyrannosaurus update` ⇒ New dependency versions from PyPi and/or Conda are listed\n\n### 🎁 Full features / integrations\n\n- Packaging and dependency management with [Poetry](https://python-poetry.org/)\n- Python 3.8, 3.9, and 3.10 (3.6 and 3.7 with a small change)\n- Only modern files: _no_ manifest file, setup.py, requirements.txt, setup.cfg, or eggs\n- Continuous integration with [GitHub Actions](https://github.com/features/actions),\n  [Travis](https://www.travis-ci.com/), or\n  [Azure Pipelines](https://azure.microsoft.com/en-us/services/devops/pipelines/)\n- Docker and Vagrant configuration\n- Continuous deployment to [PyPi](http://pypi.org/), [Dockerhub](https://hub.docker.com/),\n  and [GitHub Packages](https://github.com/features/packages).\n- Automatic attachment of [sdits](https://docs.python.org/3/distutils/sourcedist.html)\n  and [wheels](https://pythonwheels.com/) to\n  [GitHub Releases](https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/about-releases)\n- Good default GitHub settings, synchronized via [Probot settings](https://github.com/probot/settings)\n- Documentation sent to [readthedocs](https://readthedocs.org/)\n- Nice documentation defaults with\n  [Sphinx extensions](https://www.sphinx-doc.org/en/master/usage/extensions/index.html)\n- Test automation with [Tox](https://tox.readthedocs.io)\n- Commit linting and changelog generation with [Commitizen](https://github.com/commitizen-tools/commitizen)\n- [Shields](https://github.com/badges/shields) with\n  [Coveralls](https://coveralls.io/),\n  [codecov](https://about.codecov.io/),\n  [CodeClimate](https://codeclimate.com/),\n  and [Scrutinizer](https://scrutinizer-ci.com/)\n  that reflect the main branch\n- Code linting with [pre-commit](https://pre-commit.com/), [Black](https://pypi.org/project/black/),\n  [Prettifier](https://prettier.io/), [Dockerfile-lint](https://github.com/Lucas-C/pre-commit-hooks-nodejs),\n  and [markdown-lint-check](https://github.com/gaurav-nelson/github-action-markdown-link-check)\n- Security analysis with [Bandit](https://github.com/PyCQA/bandit),\n  [CodeQL](https://github.com/github/codeql-action),\n  and [safety](https://github.com/pyupio/safety) †\n- Static type analysis with [mypy](https://mypy.readthedocs.io)\n- [Conda-Forge](https://conda-forge.org/) [recipes](https://conda-forge.org/docs/maintainer/adding_pkgs.html#the-recipe-meta-yaml)\n  and [environment YML](https://medium.com/@balance1150/how-to-build-a-conda-environment-through-a-yaml-file-db185acf5d22)\n  with [Grayskull](https://github.com/conda-incubator/grayskull)\n  and [Tyrannosaurus](https://tyrannosaurus.readthedocs.io/)\n- IDE hints via [EditorConfig](https://editorconfig.org/) with good defaults for most languages\n- Fancy [issue labels](https://github.com/crazy-max/ghaction-github-labeler)\n- Slack notifications for CI/CD success and failure with [action-slack](https://github.com/8398a7/action-slack)\n- Fancy GitHub-recognized readme, license,\n  [contributing guide](https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/setting-guidelines-for-repository-contributors#adding-a-contributing-file),\n  [issue templates](https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/configuring-issue-templates-for-your-repository), and\n  [pull request templates](https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/creating-a-pull-request-template-for-your-repository)\n- Nice gitignore, dockerignore, [ChangeLog](https://keepachangelog.com), and other misc files\n- [CodeMeta](https://codemeta.github.io/user-guide/) and [CITATION.cff](https://citation-file-format.github.io/)\n- Dependency updating with [Dependabot](https://dependabot.com/)\n- `tyrannosaurus clean` to clean temp files\n- `tyrannosaurus update` that lists dependency versions to bump\n- `tyrannosaurus sync` to synchronize project metadata to pyproject.toml\n\n† [Temporary issue in safety](https://github.com/pyupio/safety/issues/201)\n\n### ✏️ Syncing to pyproject.toml\n\n_Note: This feature is only partly complete._\n\nTyrannosaurus has an optional `sync` command that synchronizes metadata from `pyproject.toml` to other files,\nso that **all of your metadata is in pyproject.toml**.\nThere are 16 available target files, including `docs/conf.py`, `tox.ini`, `.pre-commit-config.yaml`, `readthedocs.yml`,\n`.travis.yml`, and `__init__.py`.\nSettings like dev dependencies, project version, license headers, and preferred line length can be listed exactly once,\nin pyproject.toml.\n\nTyrannosaurus itself can be included as a dependency (but is not by default).\nRunning `tyrannosaurus build` will run poetry lock, synchronize project metadata (via `sync`), build, run tests,\ninstall, and clean up.\nTarget files can be disabled in `[tool.tyrannosaurus.targets]`.\n\n### 🔨 Building your project locally\n\nYou can test your project locally. Install [Poetry](https://github.com/python-poetry/poetry)\nand [Tox](https://tox.readthedocs.io/en/latest/) (`pip install tox`).\nThen just type `tox` to build artifacts and run tests.\nYou can install locally with `poetry install .` or just `pip install .`.\nTo create an initial Anaconda recipe or environment file, run `tyrannosaurus recipe` or `tyrannosaurus env`.\nAfter that, you can use `sync` to keep them up-to-date with pyproject.toml.\n\n### 🎯 Similar templates and tools\n\nThere are various other templates based on [cookiecutter](https://github.com/cookiecutter/cookiecutter)\nand [copier](https://github.com/copier-org/copier). See which best suits your needs and style.\n\nI designed Tyrannosaurus to solve issues with existing tools.\nHere are features that other tools lack:\n\n- An **elegant CI/CD workflow**: The workflow gets kicked off only via `git push` and GitHub releases.\n- **Interopability with Conda**, including recipes and environment files, by mapping dependencies and metadata.\n- **Automated publishing** to PyPi, Conda-Forge, Docker Hub, GitHub Packages, and readthedocs.\n- **No duplication** between project files. (Not 100%: some duplication remains.)\n- Built-in optional support for **extra/alternative tools**, such as Travis and codemeta.\n- Complete **absence of legacy tools**, files, and Python 2 support.\n\n##### 🏁 Feature table\n\n| Tool                                                                                     | Main techs                | CD kickoff  | N int.† | modern‡ | Docker | Conda | sync | Django |\n| ---------------------------------------------------------------------------------------- | ------------------------- | ----------- | ------- | ------- | ------ | ----- | ---- | ------ |\n| Tyranosaurus                                                                             | Actions, Poetry, Tox      | git, GitHub | 30      | ✔️      | ✔️     | ✔️    | ✔️   |        |\n| [hypermodern-python](https://github.com/cjolowicz/cookiecutter-hypermodern-python)       | Actions, Poetry, Nox      | git, Poetry | 20      | ✔️      |        |       |      |        |\n| [copier-poetry](https://github.com/pawamoy/copier-poetry)                                | Actions, Poetry, Make     | git, manual | 15      |         | ✔️     |       | ✔️   |        |\n| [wemake-python-package](https://github.com/wemake-services/wemake-python-package)        | Actions, Poetry, Make     | git, Poetry | 10      | ✔️      |        |       |      |        |\n| [best-practices](https://github.com/sourcery-ai/python-best-practices-cookiecutter)      | Actions, pipenv           | git, pipenv | 10      |         | ✔️     |       |      |        |\n| [python-blueprint](https://github.com/johnthagen/python-blueprint)                       | Actions, setuptools, Tox  | git, manual | 5       |         | ✔️     |       |      |        |\n| [cookiecutter-pypackage](https://github.com/audreyfeldroy/cookiecutter-pypackage)        | Travis, setuptools, Tox   | git, manual | 10      |         |        |       |      |        |\n| [cookiecutter-pylibrary](https://github.com/ionelmc/cookiecutter-pylibrary)              | Travis, setuptools, Tox   | git, manual | 20      |         |        |       |      |        |\n| [cookiecutter-django](https://github.com/pydanny/cookiecutter-django)                    | Actions, setuptools, Tox  | git, manual | 15      |         | ✔️     |       |      | ✔️     |\n| [django-init](https://github.com/Fueled/django-init)                                     | Actions, setuptools, Make | git, manual | 15      |         | ✔️     |       |      | ✔️     |\n| [docker-science](https://github.com/docker-science/cookiecutter-docker-science)          | Make, Docker, setuptools  | no CI/CD    | 15      |         | ✔️     |       |      |        |\n| [science-notebook-template](https://github.com/dmyersturnbull/science-notebook-template) | Conda                     | no CI/CD    | 5       |         | ✔️     |       |      |        |\n\n**† _N int._**: Approximate number of built-in integrations with tools and standards. What counts is very roughly defined.  \n**‡ _Modern_**: Lacks legacy files and tools. I’m including Make, setuptools, pipenv, and some others.  \n**Note:** [copier](https://github.com/copier-org/copier) syncs with a remote template. It’s a neat idea that Tyrannosaurus lacks.\n\nSome of the packages in the table above need more explanation:\n\n- [hypermodern-python](https://github.com/cjolowicz/hypermodern-python)\n  ([template](https://github.com/cjolowicz/cookiecutter-hypermodern-python)), a Poetry-powered Python\n  template. It’s good, but it made a few unusual choices, such as [Nox](https://github.com/theacodes/nox), which has <500 GitHub stars.\n- Both [cookiecutter-django](https://github.com/pydanny/cookiecutter-django) and\n  [django-init](https://github.com/Fueled/django-init) have fantastic setups for Django projects.\n- [Cookiecutter-docker-science](https://github.com/docker-science/cookiecutter-docker-science) is an interesting project\n  that doesn’t quite fit in this list.\n\n### 🍁 Contributing\n\n[New issues](https://github.com/dmyersturnbull/tyrannosaurus/issues) and pull requests are welcome.\nPlease refer to the [contributing guide](https://github.com/dmyersturnbull/tyrannosaurus/blob/master/CONTRIBUTING.md)\nand [security policy](https://github.com/dmyersturnbull/tyrannosaurus/blob/main/SECURITY.md).  \nGenerated with tyrannosaurus: `tyrannosaurus new tyrannosaurus`\n\n```text\n                                              .++++++++++++.\n                                           .++HHHHHHH^^HHH+.\n                                          .HHHHHHHHHH++-+-++.\n                                         .HHHHHHHHHHH:t~~~~~\n                                        .+HHHHHHHHHHjjjjjjjj.\n                                       .+NNNNNNNNN/++/:--..\n                              ........+NNNNNNNNNN.\n                          .++++BBBBBBBBBBBBBBB.\n .tttttttt:..           .++BBBBBBBBBBBBBBBBBBB.\n+tt+.      ``         .+BBBBBBBBBBBBBBBBBBBBB+++cccc.\nttt.               .-++BBBBBBBBBBBBBBBBBBBBBB++.ccc.\n+ttt++++:::::++++++BBBBBBBBBBBBBBBBBBBBBBB+..++.\n.+TTTTTTTTTTTTTBBBBBBBBBBBBBBBBBBBBBBBBB+.    .ccc.\n  .++TTTTTTTTTTBBBBBBBBBBBBBBBBBBBBBBBB+.      .cc.\n    ..:++++++++++++++++++BBBBBB++++BBBB.\n           .......      -LLLLL+. -LLLLL.\n                        -LLLL+.   -LLLL+.\n                        +LLL+       +LLL+\n                        +LL+         +ff+\n                        +ff++         +++:\n                        ++++:\n```\n',
    'author': 'Douglas Myers-Turnbull',
    'author_email': None,
    'maintainer': 'Douglas Myers-Turnbull',
    'maintainer_email': None,
    'url': 'https://github.com/dmyersturnbull/tyrannosaurus',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4',
}


setup(**setup_kwargs)
