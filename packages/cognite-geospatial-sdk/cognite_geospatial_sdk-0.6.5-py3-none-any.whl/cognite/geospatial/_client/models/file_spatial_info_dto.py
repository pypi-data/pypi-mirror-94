# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Contact: support@cognite.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial._client.configuration import Configuration


class FileSpatialInfoDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'external_id': 'str',
        'layer': 'str',
        'create_layer': 'bool',
        'attributes': 'str',
        'file_type': 'FileTypeNameDTO',
        'file': 'file'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'externalId',
        'layer': 'layer',
        'create_layer': 'createLayer',
        'attributes': 'attributes',
        'file_type': 'fileType',
        'file': 'file'
    }

    def __init__(self, id=None, external_id=None, layer=None, create_layer=False, attributes=None, file_type=None, file=None, local_vars_configuration=None):  # noqa: E501
        """FileSpatialInfoDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._external_id = None
        self._layer = None
        self._create_layer = None
        self._attributes = None
        self._file_type = None
        self._file = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if external_id is not None:
            self.external_id = external_id
        if layer is not None:
            self.layer = layer
        if create_layer is not None:
            self.create_layer = create_layer
        if attributes is not None:
            self.attributes = attributes
        self.file_type = file_type
        self.file = file

    @property
    def id(self):
        """Gets the id of this FileSpatialInfoDTO.  # noqa: E501


        :return: The id of this FileSpatialInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileSpatialInfoDTO.


        :param id: The id of this FileSpatialInfoDTO.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this FileSpatialInfoDTO.  # noqa: E501


        :return: The external_id of this FileSpatialInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this FileSpatialInfoDTO.


        :param external_id: The external_id of this FileSpatialInfoDTO.  # noqa: E501
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def layer(self):
        """Gets the layer of this FileSpatialInfoDTO.  # noqa: E501

        the name of the layer which extracted spatial objects belong to  # noqa: E501

        :return: The layer of this FileSpatialInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this FileSpatialInfoDTO.

        the name of the layer which extracted spatial objects belong to  # noqa: E501

        :param layer: The layer of this FileSpatialInfoDTO.  # noqa: E501
        :type layer: str
        """

        self._layer = layer

    @property
    def create_layer(self):
        """Gets the create_layer of this FileSpatialInfoDTO.  # noqa: E501

        if true, create the layer if there are no layers matching the name specified in 'layer'  # noqa: E501

        :return: The create_layer of this FileSpatialInfoDTO.  # noqa: E501
        :rtype: bool
        """
        return self._create_layer

    @create_layer.setter
    def create_layer(self, create_layer):
        """Sets the create_layer of this FileSpatialInfoDTO.

        if true, create the layer if there are no layers matching the name specified in 'layer'  # noqa: E501

        :param create_layer: The create_layer of this FileSpatialInfoDTO.  # noqa: E501
        :type create_layer: bool
        """

        self._create_layer = create_layer

    @property
    def attributes(self):
        """Gets the attributes of this FileSpatialInfoDTO.  # noqa: E501

        a comma separated list of attributes to extract. If not specified, extract all possible attributes  # noqa: E501

        :return: The attributes of this FileSpatialInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this FileSpatialInfoDTO.

        a comma separated list of attributes to extract. If not specified, extract all possible attributes  # noqa: E501

        :param attributes: The attributes of this FileSpatialInfoDTO.  # noqa: E501
        :type attributes: str
        """

        self._attributes = attributes

    @property
    def file_type(self):
        """Gets the file_type of this FileSpatialInfoDTO.  # noqa: E501


        :return: The file_type of this FileSpatialInfoDTO.  # noqa: E501
        :rtype: FileTypeNameDTO
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this FileSpatialInfoDTO.


        :param file_type: The file_type of this FileSpatialInfoDTO.  # noqa: E501
        :type file_type: FileTypeNameDTO
        """
        if self.local_vars_configuration.client_side_validation and file_type is None:  # noqa: E501
            raise ValueError("Invalid value for `file_type`, must not be `None`")  # noqa: E501

        self._file_type = file_type

    @property
    def file(self):
        """Gets the file of this FileSpatialInfoDTO.  # noqa: E501

        the stream content of the file  # noqa: E501

        :return: The file of this FileSpatialInfoDTO.  # noqa: E501
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FileSpatialInfoDTO.

        the stream content of the file  # noqa: E501

        :param file: The file of this FileSpatialInfoDTO.  # noqa: E501
        :type file: file
        """
        if self.local_vars_configuration.client_side_validation and file is None:  # noqa: E501
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSpatialInfoDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileSpatialInfoDTO):
            return True

        return self.to_dict() != other.to_dict()
