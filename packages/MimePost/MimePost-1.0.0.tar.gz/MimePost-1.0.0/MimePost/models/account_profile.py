# coding: utf-8

"""
    MimePost API Reference (Beta)

    MimePost API for sending email.  You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization     filters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: support@mimepost.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'address': 'str',
        'city': 'str',
        'country': 'str',
        'phone_number': 'str',
        'skype_id': 'str',
        'company_name': 'str',
        'website': 'str',
        'twitter_handle': 'str',
        'linkedin': 'str',
        'billing_name': 'str',
        'billing_company_name': 'str',
        'billing_address': 'str',
        'username': 'str',
        'email': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'address': 'address',
        'city': 'city',
        'country': 'country',
        'phone_number': 'phone_number',
        'skype_id': 'skype_id',
        'company_name': 'company_name',
        'website': 'website',
        'twitter_handle': 'twitter_handle',
        'linkedin': 'linkedin',
        'billing_name': 'billing_name',
        'billing_company_name': 'billing_company_name',
        'billing_address': 'billing_address',
        'username': 'username',
        'email': 'email'
    }

    def __init__(self, first_name=None, last_name=None, address=None, city=None, country=None, phone_number=None, skype_id=None, company_name=None, website=None, twitter_handle='', linkedin=None, billing_name=None, billing_company_name=None, billing_address=None, username=None, email=None):  # noqa: E501
        """AccountProfile - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._address = None
        self._city = None
        self._country = None
        self._phone_number = None
        self._skype_id = None
        self._company_name = None
        self._website = None
        self._twitter_handle = None
        self._linkedin = None
        self._billing_name = None
        self._billing_company_name = None
        self._billing_address = None
        self._username = None
        self._email = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if phone_number is not None:
            self.phone_number = phone_number
        if skype_id is not None:
            self.skype_id = skype_id
        if company_name is not None:
            self.company_name = company_name
        if website is not None:
            self.website = website
        if twitter_handle is not None:
            self.twitter_handle = twitter_handle
        if linkedin is not None:
            self.linkedin = linkedin
        if billing_name is not None:
            self.billing_name = billing_name
        if billing_company_name is not None:
            self.billing_company_name = billing_company_name
        if billing_address is not None:
            self.billing_address = billing_address
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email

    @property
    def first_name(self):
        """Gets the first_name of this AccountProfile.  # noqa: E501

        First name of the user  # noqa: E501

        :return: The first_name of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AccountProfile.

        First name of the user  # noqa: E501

        :param first_name: The first_name of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AccountProfile.  # noqa: E501

        Last name of the user  # noqa: E501

        :return: The last_name of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AccountProfile.

        Last name of the user  # noqa: E501

        :param last_name: The last_name of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def address(self):
        """Gets the address of this AccountProfile.  # noqa: E501


        :return: The address of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountProfile.


        :param address: The address of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this AccountProfile.  # noqa: E501


        :return: The city of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AccountProfile.


        :param city: The city of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this AccountProfile.  # noqa: E501


        :return: The country of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AccountProfile.


        :param country: The country of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def phone_number(self):
        """Gets the phone_number of this AccountProfile.  # noqa: E501


        :return: The phone_number of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this AccountProfile.


        :param phone_number: The phone_number of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def skype_id(self):
        """Gets the skype_id of this AccountProfile.  # noqa: E501


        :return: The skype_id of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._skype_id

    @skype_id.setter
    def skype_id(self, skype_id):
        """Sets the skype_id of this AccountProfile.


        :param skype_id: The skype_id of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._skype_id = skype_id

    @property
    def company_name(self):
        """Gets the company_name of this AccountProfile.  # noqa: E501


        :return: The company_name of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AccountProfile.


        :param company_name: The company_name of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def website(self):
        """Gets the website of this AccountProfile.  # noqa: E501


        :return: The website of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this AccountProfile.


        :param website: The website of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def twitter_handle(self):
        """Gets the twitter_handle of this AccountProfile.  # noqa: E501


        :return: The twitter_handle of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._twitter_handle

    @twitter_handle.setter
    def twitter_handle(self, twitter_handle):
        """Sets the twitter_handle of this AccountProfile.


        :param twitter_handle: The twitter_handle of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._twitter_handle = twitter_handle

    @property
    def linkedin(self):
        """Gets the linkedin of this AccountProfile.  # noqa: E501


        :return: The linkedin of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this AccountProfile.


        :param linkedin: The linkedin of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._linkedin = linkedin

    @property
    def billing_name(self):
        """Gets the billing_name of this AccountProfile.  # noqa: E501


        :return: The billing_name of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._billing_name

    @billing_name.setter
    def billing_name(self, billing_name):
        """Sets the billing_name of this AccountProfile.


        :param billing_name: The billing_name of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._billing_name = billing_name

    @property
    def billing_company_name(self):
        """Gets the billing_company_name of this AccountProfile.  # noqa: E501


        :return: The billing_company_name of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._billing_company_name

    @billing_company_name.setter
    def billing_company_name(self, billing_company_name):
        """Sets the billing_company_name of this AccountProfile.


        :param billing_company_name: The billing_company_name of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._billing_company_name = billing_company_name

    @property
    def billing_address(self):
        """Gets the billing_address of this AccountProfile.  # noqa: E501


        :return: The billing_address of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this AccountProfile.


        :param billing_address: The billing_address of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._billing_address = billing_address

    @property
    def username(self):
        """Gets the username of this AccountProfile.  # noqa: E501

        username  # noqa: E501

        :return: The username of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AccountProfile.

        username  # noqa: E501

        :param username: The username of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this AccountProfile.  # noqa: E501

        Account email address  # noqa: E501

        :return: The email of this AccountProfile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountProfile.

        Account email address  # noqa: E501

        :param email: The email of this AccountProfile.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
