
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <frc/commands/PIDSubsystem.h>

#include <frc/smartdashboard/SendableBuilder.h>
#include <frc/commands/Command.h>
#include <frc/commands/CommandGroup.h>




#include <rpygen/frc__Subsystem.hpp>
#include <rpygen/frc__PIDOutput.hpp>
#include <rpygen/frc__PIDSource.hpp>

namespace rpygen {

using namespace frc;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc__PIDSubsystem = 
    Pyfrc__Subsystem<
    Pyfrc__PIDOutput<
    Pyfrc__PIDSource<
        PyTrampolineBase
    
    , CxxBase
    >
    
    , CxxBase
    >
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc__PIDSubsystem : PyBasefrc__PIDSubsystem<PyTrampolineBase, CxxBase> {
    using PyBasefrc__PIDSubsystem<PyTrampolineBase, CxxBase>::PyBasefrc__PIDSubsystem;



#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "PIDWrite", PIDWrite,output);    }
#endif

#ifndef RPYGEN_DISABLE_PIDGet_v
    double PIDGet() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "PIDGet", PIDGet,);    }
#endif

#ifndef RPYGEN_DISABLE_SetAbsoluteTolerance_d
    void SetAbsoluteTolerance(double absValue) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setAbsoluteTolerance", SetAbsoluteTolerance,absValue);    }
#endif

#ifndef RPYGEN_DISABLE_SetPercentTolerance_d
    void SetPercentTolerance(double percent) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setPercentTolerance", SetPercentTolerance,percent);    }
#endif

#ifndef RPYGEN_DISABLE_KOnTarget_v
    bool OnTarget() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(bool), CxxBase, "onTarget", OnTarget,);    }
#endif

#ifndef RPYGEN_DISABLE_ReturnPIDInput_v
    double ReturnPIDInput() override {
RPYBUILD_OVERRIDE_PURE_NAME(PIDSubsystem,PYBIND11_TYPE(double), CxxBase, "returnPIDInput", ReturnPIDInput,);    }
#endif

#ifndef RPYGEN_DISABLE_UsePIDOutput_d
    void UsePIDOutput(double output) override {
RPYBUILD_OVERRIDE_PURE_NAME(PIDSubsystem,PYBIND11_TYPE(void), CxxBase, "usePIDOutput", UsePIDOutput,output);    }
#endif


#ifndef RPYBLD_DISABLE_GetPIDController_v
  #ifndef RPYBLD_UDISABLE_frc__PIDSubsystem_GetPIDController
    using frc::PIDSubsystem::GetPIDController;
    #define RPYBLD_UDISABLE_frc__PIDSubsystem_GetPIDController
  #endif
#endif


};

}; // namespace rpygen
