
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <frc\commands\PIDCommand.h>

#include <frc/smartdashboard/SendableBuilder.h>
#include <frc/commands/Command.h>
#include <frc/commands/CommandGroup.h>




#include <rpygen/frc__Command.hpp>
#include <rpygen/frc__PIDOutput.hpp>
#include <rpygen/frc__PIDSource.hpp>

namespace rpygen {

using namespace frc;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc__PIDCommand = 
    Pyfrc__Command<
    Pyfrc__PIDOutput<
    Pyfrc__PIDSource<
        PyTrampolineBase
    
    , CxxBase
    >
    
    , CxxBase
    >
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc__PIDCommand : PyBasefrc__PIDCommand<PyTrampolineBase, CxxBase> {
    using PyBasefrc__PIDCommand<PyTrampolineBase, CxxBase>::PyBasefrc__PIDCommand;



#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "PIDWrite", PIDWrite,output);    }
#endif

#ifndef RPYGEN_DISABLE_PIDGet_v
    double PIDGet() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "PIDGet", PIDGet,);    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(SendableBuilder& builder) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "initSendable", InitSendable,builder);    }
#endif

#ifndef RPYGEN_DISABLE__Initialize_v
    void _Initialize() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "_initialize", _Initialize,);    }
#endif

#ifndef RPYGEN_DISABLE__Interrupted_v
    void _Interrupted() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "_interrupted", _Interrupted,);    }
#endif

#ifndef RPYGEN_DISABLE__End_v
    void _End() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "_end", _End,);    }
#endif

#ifndef RPYGEN_DISABLE_ReturnPIDInput_v
    double ReturnPIDInput() override {
RPYBUILD_OVERRIDE_PURE_NAME(PIDCommand,PYBIND11_TYPE(double), CxxBase, "returnPIDInput", ReturnPIDInput,);    }
#endif

#ifndef RPYGEN_DISABLE_UsePIDOutput_d
    void UsePIDOutput(double output) override {
RPYBUILD_OVERRIDE_PURE_NAME(PIDCommand,PYBIND11_TYPE(void), CxxBase, "usePIDOutput", UsePIDOutput,output);    }
#endif


#ifndef RPYBLD_DISABLE_KGetPIDController_v
  #ifndef RPYBLD_UDISABLE_frc__PIDCommand_GetPIDController
    using frc::PIDCommand::GetPIDController;
    #define RPYBLD_UDISABLE_frc__PIDCommand_GetPIDController
  #endif
#endif
#ifndef RPYBLD_DISABLE_SetSetpoint_d
  #ifndef RPYBLD_UDISABLE_frc__PIDCommand_SetSetpoint
    using frc::PIDCommand::SetSetpoint;
    #define RPYBLD_UDISABLE_frc__PIDCommand_SetSetpoint
  #endif
#endif
#ifndef RPYBLD_DISABLE_KGetSetpoint_v
  #ifndef RPYBLD_UDISABLE_frc__PIDCommand_GetSetpoint
    using frc::PIDCommand::GetSetpoint;
    #define RPYBLD_UDISABLE_frc__PIDCommand_GetSetpoint
  #endif
#endif
#ifndef RPYBLD_DISABLE_GetPosition_v
  #ifndef RPYBLD_UDISABLE_frc__PIDCommand_GetPosition
    using frc::PIDCommand::GetPosition;
    #define RPYBLD_UDISABLE_frc__PIDCommand_GetPosition
  #endif
#endif


};

}; // namespace rpygen
