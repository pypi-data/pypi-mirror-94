image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv/

stages:
  - test
  - staging

test3.8:
  stage: test
  image: python:3.8
  before_script:
    - python -V  # Print out python version for debugging
    - python3 -m venv .venv
    - pip install -U pip
    - source .venv/bin/activate
    - pip install .
  script:
    - python -m unittest discover -v -s ./test -p test_*.py

test3.7:
  stage: test
  image: python:3.7
  before_script:
    - python -V  # Print out python version for debugging
    - python3 -m venv .venv
    - pip install -U pip
    - source .venv/bin/activate
    - pip install .
  script:
    - python -m unittest discover -v -s ./test -p test_*.py

test3.9:
  stage: test
  before_script:
    - python -V  # Print out python version for debugging
    - python3 -m venv .venv
    - pip install -U pip
    - source .venv/bin/activate
    - pip install .
  script:
    - python -m unittest discover -v -s ./test -p test_*.py

test_documentation:
  stage: test
  before_script:
    - python -V  # Print out python version for debugging
    - python3 -m venv .venv
    - pip install -U pip
    - source .venv/bin/activate
    - pip install .[docs]
  script:
    - cd docs
    - sphinx-build -M html . build -W

deploy:
  stage: staging
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh -T root@192.168.236.131 <<EOM
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_ID"
  only:
    - master
  script:
    - rm -rf GBprocesS
    - git clone git@gitlab.com:dschaumont/GBprocesS.git
    - cd GBprocesS
    - git checkout master
    - git reset --hard origin/master
    - git merge $CI_BUILD_REF
    - python3.8 -m pip install .
