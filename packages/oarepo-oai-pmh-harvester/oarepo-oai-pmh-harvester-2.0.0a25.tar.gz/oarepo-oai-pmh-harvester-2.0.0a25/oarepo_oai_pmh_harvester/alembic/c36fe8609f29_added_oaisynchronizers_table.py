#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Added OAISynchronizers table"""
import sqlalchemy_utils
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c36fe8609f29'
down_revision = '6e26bad1f028'
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('oarepo_oai_synchronizers',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('provider_id', sa.Integer(), nullable=True),
                    sa.Column('oai_endpoint', sa.String(length=2048), nullable=False),
                    sa.Column('set', sa.String(length=256), nullable=True),
                    sa.Column('metadata_prefix', sa.String(length=32), nullable=True),
                    sa.Column('constant_fields', sa.JSON().with_variant(
                        sqlalchemy_utils.types.json.JSONType(), 'mysql').with_variant(postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), 'postgresql').with_variant(sqlalchemy_utils.types.json.JSONType(), 'sqlite'), nullable=True),
                    sa.Column('unhandled_paths', sa.JSON().with_variant(sqlalchemy_utils.types.json.JSONType(), 'mysql').with_variant(postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), 'postgresql').with_variant(sqlalchemy_utils.types.json.JSONType(), 'sqlite'), nullable=True),
                    sa.Column('default_endpoint', sa.String(), nullable=False),
                    sa.Column('endpoint_mapping', sa.JSON().with_variant(sqlalchemy_utils.types.json.JSONType(), 'mysql').with_variant(postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), 'postgresql').with_variant(sqlalchemy_utils.types.json.JSONType(), 'sqlite'), nullable=True),
                    sa.ForeignKeyConstraint(['provider_id'], ['oarepo_oai_provider.id'], name=op.f('fk_oarepo_oai_synchronizers_provider_id_oarepo_oai_provider')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_synchronizers'))
                    )
    op.drop_column('oarepo_oai_provider', 'default_endpoint')
    op.drop_column('oarepo_oai_provider', 'constant_fields')
    op.drop_column('oarepo_oai_provider', 'endpoint_mapping')
    op.drop_column('oarepo_oai_provider', 'oai_endpoint')
    op.drop_column('oarepo_oai_provider', 'metadata_prefix')
    op.drop_column('oarepo_oai_provider', 'unhandled_paths')
    op.drop_column('oarepo_oai_provider', 'set')
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('oarepo_oai_provider', sa.Column('set', sa.VARCHAR(length=256), autoincrement=False, nullable=True))
    op.add_column('oarepo_oai_provider', sa.Column('unhandled_paths', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('oarepo_oai_provider', sa.Column('metadata_prefix', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.add_column('oarepo_oai_provider', sa.Column('oai_endpoint', sa.VARCHAR(length=2048), autoincrement=False, nullable=False))
    op.add_column('oarepo_oai_provider', sa.Column('endpoint_mapping', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('oarepo_oai_provider', sa.Column('constant_fields', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('oarepo_oai_provider', sa.Column('default_endpoint', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_table('oarepo_oai_synchronizers')
    # ### end Alembic commands ###
