#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Init OAI Models"""
import sqlalchemy_utils
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'aff75d58d918'
down_revision = '795da8efcb34'
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('oarepo_oai_provider',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('code', sa.String(length=16), nullable=False),
                    sa.Column('description', sa.String(length=2048), nullable=True),
                    sa.Column('oai_endpoint', sa.String(length=2048), nullable=False),
                    sa.Column('metadata_prefix', sa.String(length=32), nullable=True),
                    sa.Column('constant_fields', sa.JSON().with_variant(
                        sqlalchemy_utils.types.json.JSONType(), 'mysql').with_variant(
                        postgresql.JSONB(none_as_null=True, astext_type=sa.Text()),
                        'postgresql').with_variant(sqlalchemy_utils.types.json.JSONType(),
                                                   'sqlite'), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_provider')),
                    sa.UniqueConstraint('code', name=op.f('uq_oarepo_oai_provider_code'))
                    )
    op.create_table('oarepo_oai_sync',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('provider_id', sa.Integer(), nullable=True),
                    sa.Column('sync_start', sa.TIMESTAMP(), nullable=True),
                    sa.Column('sync_end', sa.TIMESTAMP(), nullable=True),
                    sa.Column('status', sa.String(length=32), nullable=True),
                    sa.Column('logs', sa.String(length=2048), nullable=True),
                    sa.Column('rec_created', sa.Integer(), nullable=True),
                    sa.Column('rec_modified', sa.Integer(), nullable=True),
                    sa.Column('rec_deleted', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['provider_id'], ['oarepo_oai_provider.id'], name=op.f(
                        'fk_oarepo_oai_sync_provider_id_oarepo_oai_provider')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_sync'))
                    )
    op.create_table('oarepo_oai_record',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
                    sa.Column('oai_identifier', sa.String(length=2048), nullable=False),
                    sa.Column('last_sync_id', sa.INTEGER(), nullable=True),
                    sa.Column('modification_sync_id', sa.INTEGER(), nullable=True),
                    sa.Column('creation_sync_id', sa.INTEGER(), nullable=True),
                    sa.Column('timestamp', sa.TIMESTAMP(), nullable=False),
                    sa.ForeignKeyConstraint(['creation_sync_id'], ['oarepo_oai_sync.id'], name=op.f(
                        'fk_oarepo_oai_record_creation_sync_id_oarepo_oai_sync')),
                    sa.ForeignKeyConstraint(['id'], ['records_metadata.id'],
                                            name=op.f('fk_oarepo_oai_record_id_records_metadata')),
                    sa.ForeignKeyConstraint(['last_sync_id'], ['oarepo_oai_sync.id'], name=op.f(
                        'fk_oarepo_oai_record_last_sync_id_oarepo_oai_sync')),
                    sa.ForeignKeyConstraint(['modification_sync_id'], ['oarepo_oai_sync.id'],
                                            name=op.f(
                                                'fk_oarepo_oai_record_modification_sync_id_oarepo_oai_sync')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_record')),
                    sa.UniqueConstraint('oai_identifier',
                                        name=op.f('uq_oarepo_oai_record_oai_identifier'))
                    )
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('oarepo_oai_record')
    op.drop_table('oarepo_oai_sync')
    op.drop_table('oarepo_oai_provider')
    # ### end Alembic commands ###
