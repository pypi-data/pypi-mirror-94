
# This dictionary helps in sorting of rows
OBJECT_TYPE_SORT_ORDER:
  PRE_SCRIPT: 0
  DB: 1
  SCHEMA: 2
  BASE_TABLE: 3
  TABLE: 3 # Base_TABLE and TABLE are the same hence the same order
  FUNCTION: 4
  VIEW: 5
  PROCEDURE: 6
  PIPE: 7
  GRANT: 50
  POST_SCRIPT: 60


METADATA_QUERY:
  - TYPE: SCHEMA
    FILE: schemata.csv
    QUERY: >
      SELECT  'SCHEMA' OBJ_TYPE, CATALOG_NAME DB, SCHEMA_NAME SCH, SCHEMA_NAME OBJ_NAME, 
              IS_TRANSIENT, IS_MANAGED_ACCESS, CREATED, LAST_ALTERED, COMMENT,
              MD5(SCHEMA_NAME) OBJ_MD5, 
              'SCHEMA_' || SCHEMA_NAME OBJ_KEY
      FROM "{P_DB}".INFORMATION_SCHEMA.SCHEMATA 
      WHERE CATALOG_NAME = '{P_DB}' 
        AND SCHEMA_NAME = '{P_SCHEMA}';

  - TYPE: TABLE
    FILE: tables.csv
    QUERY: >
      SELECT  T.TABLE_CATALOG DB, T.TABLE_SCHEMA SCH, T.TABLE_NAME OBJ_NAME, 
              IFF(TABLE_TYPE = 'BASE TABLE', 'BASE_TABLE',TABLE_TYPE) AS OBJ_TYPE, 
              CLUSTERING_KEY, IS_TRANSIENT, CREATED, LAST_ALTERED, COMMENT, 
              CONCAT_WS('-', T.TABLE_NAME, OBJ_TYPE,  
                  IFNULL( CLUSTERING_KEY, 'X' )) TBL_SIGNATURE, 
              MD5(TBL_SIGNATURE) OBJ_MD5, 
              OBJ_TYPE || '_' ||  TABLE_NAME AS OBJ_KEY
      FROM "{P_DB}".INFORMATION_SCHEMA.TABLES T 
      WHERE T.TABLE_SCHEMA = '{P_SCHEMA}' 
        AND T.TABLE_CATALOG = '{P_DB}'
        AND TABLE_TYPE IN ('BASE TABLE', 'VIEW')
      ORDER BY CREATED, OBJ_TYPE, OBJ_NAME;

  - TYPE: COLUMN
    FILE: columns.csv
    QUERY: >
      SELECT  'COLUMN' OBJ_TYPE, TABLE_CATALOG DB, TABLE_SCHEMA SCH, TABLE_NAME, COLUMN_NAME OBJ_NAME, 
              ORDINAL_POSITION, COLUMN_DEFAULT, IS_NULLABLE, DATA_TYPE, COMMENT, 
              CONCAT_WS('-',IS_NULLABLE,DATA_TYPE, ORDINAL_POSITION,IS_IDENTITY, NVL(COLUMN_DEFAULT, '') ) COL_SIGNATURE, 
              MD5(COL_SIGNATURE) OBJ_MD5, 
              TABLE_NAME || '_' || COLUMN_NAME AS OBJ_KEY
      FROM "{P_DB}".INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_CATALOG = '{P_DB}' 
        AND TABLE_SCHEMA = '{P_SCHEMA}' 
      ORDER BY TABLE_NAME,ORDINAL_POSITION ;

  - TYPE: FUNCTION
    FILE: functions.csv
    QUERY: >
      SELECT  
          FUNCTION_CATALOG DB, FUNCTION_SCHEMA SCH, FUNCTION_NAME OBJ_NAME, 
          'FUNCTION' AS OBJ_TYPE, 
          NVL(ARGUMENT_SIGNATURE,'') ARGUMENT_SIGNATURE,
          replace(replace(replace(ARGUMENT_SIGNATURE ,' ','-'),'('),')') ARG_SIGNATURE,
          NVL(DATA_TYPE,'') DATA_TYPE, 
          NVL(FUNCTION_LANGUAGE,'') FUNCTION_LANGUAGE, 
          NVL(FUNCTION_DEFINITION, '') FUNCTION_DEFINITION, 
          NVL(VOLATILITY, '') VOLATILITY, 
          NVL(IS_NULL_CALL, '') IS_NULL_CALL, 
          NVL(IS_SECURE,'') IS_SECURE, 
          NVL(IS_EXTERNAL, '') IS_EXTERNAL, 
          NVL(API_INTEGRATION, '') API_INTEGRATION, 
          NVL(CONTEXT_HEADERS,'') CONTEXT_HEADERS, 
          NVL(MAX_BATCH_ROWS,0) MAX_BATCH_ROWS, 
          NVL(COMPRESSION,'') COMPRESSION, 
          CREATED, LAST_ALTERED, COMMENT,
          CONCAT_WS('-', OBJ_NAME, OBJ_TYPE, ARG_SIGNATURE, 
            DATA_TYPE,  FUNCTION_LANGUAGE,  FUNCTION_DEFINITION, 
            VOLATILITY,  IS_NULL_CALL,  IS_SECURE,  IS_EXTERNAL,
            API_INTEGRATION, CONTEXT_HEADERS, MAX_BATCH_ROWS,COMPRESSION
          )  FN_SIGNATURE ,
          MD5(FN_SIGNATURE) OBJ_MD5, 
          OBJ_TYPE || '_' ||  FUNCTION_NAME || '::' || ARG_SIGNATURE   AS OBJ_KEY
      FROM "{P_DB}".INFORMATION_SCHEMA.FUNCTIONS 
      WHERE FUNCTION_CATALOG = '{P_DB}' 
        AND FUNCTION_SCHEMA = '{P_SCHEMA}' 
      ORDER BY OBJ_KEY ;
  
  - TYPE: VIEW
    FILE: views.csv
    QUERY: >
      SELECT  'VIEW' OBJ_TYPE, TABLE_CATALOG DB, TABLE_SCHEMA SCH, TABLE_NAME OBJ_NAME, 
              VIEW_DEFINITION, CREATED, LAST_ALTERED, 
              MD5(VIEW_DEFINITION) OBJ_MD5,
              'VIEW_' || TABLE_NAME OBJ_KEY 
      FROM "{P_DB}".INFORMATION_SCHEMA.VIEWS 
      WHERE TABLE_CATALOG = '{P_DB}' 
        AND TABLE_SCHEMA = '{P_SCHEMA}' 
      ORDER BY CREATED;

  - TYPE: PROCEDURE
    FILE: procedures.csv
    QUERY: >
      SELECT  
        PROCEDURE_CATALOG DB, PROCEDURE_SCHEMA SCH, PROCEDURE_NAME OBJ_NAME, 
        'PROCEDURE' AS OBJ_TYPE, 
        NVL(ARGUMENT_SIGNATURE,'') ARGUMENT_SIGNATURE,
        replace(replace(replace(ARGUMENT_SIGNATURE ,' ','-'),'('),')') ARG_SIGNATURE,
        NVL(DATA_TYPE,'') DATA_TYPE, 
        NVL(PROCEDURE_LANGUAGE,'') PROCEDURE_LANGUAGE, 
        NVL(PROCEDURE_DEFINITION, '') PROCEDURE_DEFINITION, 
        CREATED, LAST_ALTERED, COMMENT,
        CONCAT_WS('-', OBJ_NAME, OBJ_TYPE, ARG_SIGNATURE, 
          DATA_TYPE,  PROCEDURE_LANGUAGE,  PROCEDURE_DEFINITION
        )  PROC_SIGNATURE ,
        MD5(PROC_SIGNATURE) OBJ_MD5, 
        OBJ_TYPE || '_' ||  PROCEDURE_NAME || '::' || ARG_SIGNATURE   AS OBJ_KEY    
      FROM "{P_DB}".INFORMATION_SCHEMA.PROCEDURES 
      WHERE PROCEDURE_CATALOG = '{P_DB}' 
        AND PROCEDURE_SCHEMA = '{P_SCHEMA}' 
      ORDER BY OBJ_KEY ;

  - TYPE: GRANT
    FILE: grants.csv
    QUERY: >
      SELECT  'GRANT' OBJ_TYPE, OBJECT_CATALOG DB, OBJECT_SCHEMA SCH, OBJECT_NAME OBJ_NAME, 
              PRIVILEGE_TYPE, GRANTEE, OBJECT_TYPE GRANT_OBJECT_TYPE,
              OBJECT_TYPE || '_' || 
                CASE WHEN OBJECT_TYPE = 'FUNCTION' OR OBJECT_TYPE = 'PROCEDURE' THEN
                    replace(replace(replace(OBJECT_NAME,'(', '::'),')'), ' ','-') 
                ELSE OBJECT_NAME
                END OBJ_KEY,
              MD5(OBJ_KEY) OBJ_MD5
      FROM "{P_DB}".INFORMATION_SCHEMA.OBJECT_PRIVILEGES A
      WHERE OBJECT_CATALOG = '{P_DB}' 
        AND OBJECT_SCHEMA = '{P_SCHEMA}' 
      ORDER BY OBJ_KEY;

DDL_QUERY: >
  SELECT '{OBJ_KEY}' OBJ_KEY,
         GET_DDL('{OBJ_TYPE}', '{OBJ_NAME}') DDL, 
         SPLIT_PART(DDL, ';', 0) DDL_DEFN,
         MD5(DDL_DEFN) DDL_MD5;
