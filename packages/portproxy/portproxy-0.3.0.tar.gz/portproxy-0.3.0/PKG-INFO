Metadata-Version: 2.1
Name: portproxy
Version: 0.3.0
Summary: Automatically forward and manage ports from any remote machines.
Home-page: https://github.com/pseeth/portproxy/
Author: Prem Seetharaman
Author-email: prem@descript.com
License: UNKNOWN
Description: # PortProxy
        
        PortProxy is a simple service for forwarding ports dynamically 
        upon request from machine names found in your ssh config file.
        Here's how it works. Say you have a config file in your ssh
        that looks like this:
        
        ```
        Host machine1
            HostName machine1.internet.com
            User you
        
        Host machine1
            HostName machine2.internet.com
            User you
        ```
        
        You might want port `8888` from both `machine1` and `machine2` (e.g.
        you have a Jupyter notebook running on both). So, what you would
        normally do is something like this:
        
        ```
        ssh -L 8888:localhost:8888 machine1
        ssh -L 8888:localhost:8889 machine2
        ```
        
        and so on for each machine. If you have a lot of machines, the above
        method can get a bit cumbersome. So, PortProxy handles all of this
        under the hood. Your mental model of all of the ports on all remote
        machines becomes like this:
        
        ```
        [PortProxy_url]/[machine_name]/[forwarded_port]
        ```
        
        For example, to get on port `8888` on `machine1`, navigate to 
        `localhost:5000/machine1/8888` in your browser, if `PortProxy` 
        is running on `localhost:5000`.
        
        And that's it!
        
        # Releasing
        
        Do the following steps:
        
        ```
        python setup.py sdist
        ```
        
        Upload it to test PyPI:
        
        ```
        pip install twine
        twine upload --repository testpypi dist/*
        pip install -U --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple -U portproxy
        ```
        
        Make sure you can install it and it works (e.g. run the examples). Now upload
        to actual PyPI:
        
        ```
        twine upload dist/*
        ```
        
Keywords: command-line configuration yaml argument parsing
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Requires-Python: >=3.5, <4
Description-Content-Type: text/markdown
Provides-Extra: tests
