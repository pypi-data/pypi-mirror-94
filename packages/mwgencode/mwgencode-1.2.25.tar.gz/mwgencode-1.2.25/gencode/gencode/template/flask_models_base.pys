"""
NOTE: This unit is auto generated by the gencode.
Do not edit these code manually.
"""
from app import db
from datetime import datetime,timedelta
import json
from enum import Enum
from flask import current_app

class SqlType(Enum):
    mysql = 0 #'mysql+mysqldb'
    mssql = 1 #'mssql+pymssql'
    sqlite = 2 #'sqlite:'

def getSqlType():
    sql_uri =  current_app.config['SQLALCHEMY_DATABASE_URI']
    if sql_uri.startswith('mysql+mysqldb'):
        return SqlType.mysql.value
    elif sql_uri.startswith('mssql+pymssql'):
        return SqlType.mssql.value
    elif sql_uri.startswith('sqlite:'):
        return SqlType.sqlite.value
    else:
        assert False,'不能识别的SQL驱动,%s'%sql_uri

def new_id():
    if getSqlType() == SqlType.sqlite.value:
        import uuid
        return str(uuid.uuid1())
    else:
        connection = db.engine.raw_connection()
        try:
            cursor = connection.cursor()
            if getSqlType()==SqlType.mysql.value:
                cursor.callproc("sp_getobjectids_new", [1])
            elif getSqlType()==SqlType.mssql.value:
                # 不知为何cursor.callproc 在 mssql中取不到资料？？
                cursor.execute("exec pro_gettableid 1")
            newid = cursor.fetchone()[0]
            cursor.close()
            connection.commit()
        finally:
            connection.close()
        return str(newid)

{% for enum in enumerations %}
class {{enum.name}}(Enum):
    {% for k,v in enum.columns.items() %}
    {{k}} ={{v}}
    {% endfor %}
{% endfor %}

{% for _,table in metatables.items() %}
{{ table.class_name }} = db.Table('{{table.table_name}}', db.Model.metadata,
    db.Column('{{table['columns'][0].dbname}}',{{table['columns'][0].type}}, db.ForeignKey('{{table['columns'][0].reftable}}.{{table['columns'][0].refid}}')),
    db.Column('{{table['columns'][1].dbname}}',{{table['columns'][1].type}}, db.ForeignKey('{{table['columns'][1].reftable}}.{{table['columns'][1].refid}}'))
)
{% endfor %}


{% for _,table in tables.items() %}
class {{ table.class_name }}{% if not table.is_sigletable %}_base{% endif %}({% if table.parent_name %}{{table.parent_name}}{% else %}db.Model{% endif %}):
    {% if table.doc %}
    """
    {{table.doc}}
    """
    {% endif %}
    {% if table.table_name %}
    __tablename__ = '{{table.table_name}}'
    {% endif %}
    {% if table.discriminator_column %}
    {{table.discriminator_column.name}} = db.Column({{table.discriminator_column.dbname}}{{table.discriminator_column.type}})
    {% endif %}
    {% if table.mapper_args %}
    __mapper_args__ = {{table.mapper_args}}
    {% endif %}
    {% if table.table_args %}
    __table_args__ = {{table.table_args}}
    {% endif %}
    {% for uc in table.unique_constraints %}
    {{ uc }}
    {% endfor %}
    {% for fld in table.columns %}
    {% if fld.doc %}
    # {{fld.doc}}
    {% endif %}
    {{fld.name}} = db.Column({{fld.dbname}}{{fld.type}}{{fld.default}}{{fld.unique}}{{fld.nullable}}{{fld.primary_key}})
    {% endfor %}
    {% for fld in table.fkeyids %}
    {{fld.name}} = db.Column({{fld.dbname}}{{fld.type}},db.ForeignKey("{{fld.reftable}}.{{fld.refid}}"){{fld.default}}{{fld.unique}}{{fld.nullable}}{{fld.primary_key}})
    {% endfor %}
    {% for rs in table.relationsips %}
    {{rs.name}} = db.relationship("{{rs.relationship_cls}}"{{rs.back_populates}}{{rs.uselist}}{{rs.foreign_keys}}{{rs.secondary}}{{rs.lazy}}{{rs.cascade}}{{rs.remote_side}}{{rs.primaryjoin}}{{rs.order_by}})
    {% endfor %}

    {% for func in table.funcs %}
    {%if func.isstatic%}
    @staticmethod
    {% endif %}
    def {{func.name}}({{func.self_param}}{{func.params}}):
{{func.codes}}
    {% endfor %}


    def __repr__(self):
        return json.dumps(self.to_json())

    def to_json(self,fields:list=None):
        '''
        按资料库中的fieldname输出json
        :param fields:资料库栏位名，不指定fields时，输出所有的资料，否则按指定fields输出
        :return:
        '''
        return {key: getattr(self, key) for key in (fields or self.__table__.columns.keys())
                   if hasattr(self,key)
               }

{% endfor %}
